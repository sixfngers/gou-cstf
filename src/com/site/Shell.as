package com.site{import com.adobe.serialization.json.JSON;import com.asual.swfaddress.SWFAddress;    import com.asual.swfaddress.SWFAddressEvent;    import com.davidcaneso.collections.types.Deeplink;    import com.davidcaneso.display.drawing.SquareArea;    import com.davidcaneso.events.framework.SiteManagerEvent;    import com.davidcaneso.events.framework.TypefaceSetupEvent;    import com.davidcaneso.events.loading.CssLoaderEvent;import com.davidcaneso.events.loading.ServerLoaderEvent;import com.davidcaneso.events.loading.XmlLoaderEvent;    import com.davidcaneso.framework.Section;    import com.davidcaneso.framework.SectionIntro;    import com.davidcaneso.framework.SiteManager;    import com.davidcaneso.loading.CssLoader;import com.davidcaneso.loading.ServerLoader;import com.davidcaneso.loading.XmlLoader;    import com.davidcaneso.singletons.StageReference;    import com.davidcaneso.singletons.Styling;    import com.davidcaneso.singletons.XMLData;    import com.davidcaneso.singletons.tracking.google.SiteTracking;    import com.davidcaneso.text.EmbededFonts;    import com.davidcaneso.utils.LiveTrace;	import com.davidcaneso.utils.StringUtils;	import com.davidcaneso.utils.XMLUtil;    import com.greensock.TweenMax;    import com.greensock.easing.Circ;    import com.greensock.easing.Quad;import com.site.app.AppConsts;import flash.display.DisplayObjectContainer;    import flash.display.MovieClip;    import flash.display.Sprite;    import flash.display.Stage;    import flash.events.Event;    import flash.events.MouseEvent;import flash.net.URLVariables;import flash.system.Security;[SWF(backgroundColor=0x000000, frameRate=30, width=1024, height=768)]	public dynamic class Shell extends SiteManager	{		//	dev properties		private static const CLASS_NAME		:String 	= 'Shell';		private var _devConfigFile			:String 	= '../../assets/data/siteConfig.xml';		private var _configFile				:String;		private var _configLoader			:XmlLoader;		private var _cssLoader				:CssLoader;		private var _sitemapLoader			:XmlLoader;		private var _xmlFileRef				:String;		private var _firstLoad				:Array;		private var _initialPreloader		:SiteInitialPreloader;		private var _sectionPreloader		:SiteSectionPreloader;        private var _stageContent           :MovieClip;        public 	var skipInitialIntro		:Boolean 	= false;		public 	var skipSectionIntro		:Boolean 	= false;		public 	var tracking				:SiteTracking;			//	visual elements		public 	var typeHolder				:Sprite;		public 	var sleeperHolder			:Sprite;		public 	var preloaderHolder			:Sprite;		public 	var sectionPreloaderHolder	:Sprite;		public 	var siteContainer			:Sprite;		public 	var navHolder				:Sprite;        public 	var videoHolder				:Sprite;		public 	var headerHolder			:Sprite;        public 	var notificationHolder		:Sprite;		public 	var footerHolder			:Sprite;		public 	var baseHolder				:Sprite;		public 	var staticElementsHolder	:Sprite;		public 	var staticVideoPlayerHolder	:Sprite;        public  var rollOverHolder          :Sprite;		public var masking					:SquareArea;        public  var shieldVisual             :MovieClip;        public  var shieldVisualLoader       :MovieClip;        public  var shieldVisualLoaderOverlay:MovieClip;        public  var shineHolder              :MovieClip;        public  var enterButton              :MovieClip;        public  var blocker                  :MovieClip;        public  var vikingsValidatedDeeplink :int;        public var deeplinkUserData:AppUserDataModel;        public var deeplinkUserLoader:ServerLoader;		public function Shell():void		{            Security.allowDomain("*.universalstudios.com");            Security.loadPolicyFile("https://bannerassets.universalstudios.com/crossdomain.xml");            tabChildren = false;            //	uncomment next line to see trace calls in the ide.			//			_showTraces = true;			multistageDeeplinks = new Array();            var passedDlParameter:String = loaderInfo.parameters.dl;//            	test deeplink values//            	uncomment to test//              passedDlParameter = '/ragnar';//              passedDlParameter = '#/ragnar';//              passedDlParameter = '#ragnar';//            	passedDlParameter = '/gallery';//            	passedDlParameter = '/gallery-|-0-|-hit';//              passedDlParameter = '93';            if(passedDlParameter != null && passedDlParameter.length > 0)                dl = StringUtils.removeHashesAndSlashes(passedDlParameter);            _configFile = loaderInfo.parameters.configxml;			if(_configFile == null || _configFile == 'undefined' || _configFile.length < 1)				_configFile = _devConfigFile;						deeplink = new Deeplink();            rollOverHolder          = new Sprite();            typeHolder				= new Sprite();			footerHolder			= new Sprite();			staticElementsHolder	= new Sprite();            staticVideoPlayerHolder	= new Sprite();			baseHolder				= new Sprite();			siteContainer 			= new Sprite();			sleeperHolder 			= new Sprite();			preloaderHolder 		= new Sprite();			navHolder 				= new Sprite();            headerHolder 			= new Sprite();			videoHolder 			= new Sprite();            notificationHolder      = new Sprite();//			videoHolder.alpha =.1 ;                        sectionPreloaderHolder  = new Sprite();			super._sectionHolder	= new Sprite();			super._introHolder		= new Sprite();			siteContainer.addChild(baseHolder);			siteContainer.addChild(sectionHolder);            siteContainer.addChild(staticElementsHolder);            siteContainer.addChild(footerHolder);            siteContainer.addChild(sectionPreloaderHolder);            siteContainer.addChild(headerHolder);            siteContainer.addChild(introHolder);			addChild(rollOverHolder);            addChild(typeHolder);			addChild(siteContainer);            addChild(staticVideoPlayerHolder);            addChild(notificationHolder);            /*//            *************************************//            start eclipse workaround do not remove            try            {                _stageContent = this['stageContent'];                addChild(_stageContent);            }            catch(e:Error)            {                _stageContent = new shellStageContent() as MovieClip;                addChild(_stageContent);            }            var content:shellStageContent = _stageContent as shellStageContent;//          end eclipse workaround do not remove//          **************************************/            var lt:LiveTrace = LiveTrace.instance;            LiveTrace.changeSize(300, 400);            //addChild(lt);			LiveTrace.output("dl: "+dl);//            blocker = new SquareArea(100, 100, 0);//            blocker.addEventListener(MouseEvent.CLICK, _blockerInteract);            //addChild(blocker);            addChild(preloaderHolder);            addChild(sleeperHolder);//            shieldVisual = content.shield;//            shieldVisual.gotoAndStop(1);////            shieldVisualLoader = shieldVisual['loader'];//            shineHolder = shieldVisualLoader['shineHolder'];////            shieldVisualLoaderOverlay = shieldVisualLoader['overlay'];//            enterButton = content.enterButton;////			//siteContainer.mask = masking;						initialBuild = true;						_initialPreloader = new SiteInitialPreloader(this);            _initialPreloader.addEventListener(Event.CHANGE, _updateShieldLoader);            _initialPreloader.addEventListener(Event.COMPLETE, _exitShieldLoaderOnComplete);            _initialPreloader.showTraces = false;			super._preloader = _initialPreloader;			preloaderHolder.addChild(_initialPreloader);						_handleResize();			stage.addEventListener(Event.RESIZE,	_handleResize	);			stage.addEventListener(SiteManagerEvent.SITE_STATE_UPDATE,	_handleSiteStateUpdate	);			stage.addEventListener(TypefaceSetupEvent.SETUP, _handleTypeSetup);            _loadConfigFile();		}        private function _enterButtonInteract(e:MouseEvent):void        {            switch(e.type)            {                case MouseEvent.ROLL_OVER:                    enterButton.gotoAndStop(2);                    break;                case MouseEvent.ROLL_OUT:                    enterButton.gotoAndStop(1);                    break;                case MouseEvent.CLICK:                    _exitPreloader();                    break;            }        }        private function _blockerInteract(e:MouseEvent):void        {            switch(e.type)            {                case MouseEvent.CLICK:                    break;            }        }        private function _exitPreloader():void        {            //TweenMax.to(_stageContent,.3, {autoAlpha:0, ease:Circ.easeIn});            stage.dispatchEvent(new SiteManagerEvent(SiteManagerEvent.INITIAL_ANIMATION_START, super.siteState, super.activeSectionNumber, super.nextSectionNumber));        }        private function _updateShieldLoader(e:Event):void        {            //var totalLoaderFrames:int = 70;//            var frameToStopOn:int = int((_initialPreloader.percentLoaded * totalLoaderFrames) / 100);//            shieldVisualLoader.gotoAndStop(frameToStopOn);//            shieldVisualLoaderOverlay.gotoAndStop(frameToStopOn);        }        private function _exitShieldLoaderOnComplete(e:Event):void        {            _initialPreloader.removeEventListener(Event.CHANGE, _updateShieldLoader);            _initialPreloader.removeEventListener(Event.COMPLETE, _exitShieldLoaderOnComplete);            //shieldVisualLoader.gotoAndPlay('exit');            //if(shineHolder.numChildren > 0)//            {//                shineHolder.mouseEnabled = false;//                shineHolder.mouseChildren = false;//                MovieClip(shineHolder.getChildAt(0)).gotoAndPlay('exit');//            }            //shieldVisual.gotoAndPlay('transOut');            _exitPreloader();            //TweenMax.to(enterButton, 1, {delay:.6, autoAlpha:0, ease:Quad.easeOut, onComplete:_exitPreloader});        }				public function showVideo(filePath:String):void		{			trace(headerHolder.getChildAt(0));			MovieClip(videoHolder.getChildAt(0)).startVideoStream(filePath);		}				private function _handleTypeSetup(e:TypefaceSetupEvent):void		{			stage.removeEventListener(TypefaceSetupEvent.SETUP, _handleTypeSetup);			super.globalType = e.mc;			//	setup text formats in Styling singleton			Styling.instance.addTypeSwf(EmbededFonts(e.mc));			Styling.instance.addFormatFromXMLList(XMLData.instance.config.textformats.format);		}				private function _loadConfigFile():void		{			classTrace('hit loadConfigFile');			if(loaderInfo.url.substr(0, 7) == 'http://')			{				_configFile+='?nocache='+(Math.round(Math.random()*100000000));			}						_configLoader = new XmlLoader(_configFile);			_configLoader.addEventListener( XmlLoaderEvent.COMPLETE, 	_handleConfigLoadComplete	);			_configLoader.addEventListener(	XmlLoaderEvent.ERROR, 		_handleConfigLoadError		);			_configLoader.startLoad();		}				private function _handleConfigLoadComplete(e:XmlLoaderEvent):void		{			classTrace('hit handleConfigLoadComplete');			_configLoader.removeEventListener(	XmlLoaderEvent.COMPLETE, 	_handleConfigLoadComplete	);			_configLoader.removeEventListener(	XmlLoaderEvent.ERROR, 		_handleConfigLoadError		);			_configLoader.destroy();						var config:XML = XMLData.instance.config = e.xml;			baseUrl = config.baseUrl			if (StageReference.instance.stage.loaderInfo.url.substr(0,7) == 'file://')			{				baseUrl = config.@devbaseurl;			}			trace('baseUrl', baseUrl);			if(dl != null && dl.length > 0)            {                multistageDeeplinks = dl.split(String(config.@deeplinkdelimiter));                var params:URLVariables = new URLVariables();                params.id = dl;                var apiBaseUrl:String = config.@apibaseurl;                deeplinkUserLoader = new ServerLoader(false, false);                deeplinkUserLoader.devLoadedData = '{"status":"success","data":{"id":"99","timestamp":"2014-05-13 18:32:45","name":"costumed","base_path":"","image_path":"550fcf6359b0c0eb84ec71c237df709amov.png","gif_path":"550fcf6359b0c0eb84ec71c237df709amov.gif","video_path":"550fcf6359b0c0eb84ec71c237df709a.mov","origin":"","status":"approved"}}';                //deeplinkUserLoader.devLoadedData = '{"status":"success","data":{"id":"93","timestamp":"2014-05-13 18:16:48","name":"TwistPony","base_path":"","image_path":"f55a14008e55214dc893adbe9b1f3968mov.png","gif_path":"f55a14008e55214dc893adbe9b1f3968mov.gif","video_path":"f55a14008e55214dc893adbe9b1f3968.mov","origin":"","status":"approved"}}';                deeplinkUserLoader.addEventListener(ServerLoaderEvent.START, _handleDeeplinkUserLoaderEvent);                deeplinkUserLoader.addEventListener(ServerLoaderEvent.COMPLETE, _handleDeeplinkUserLoaderEvent);                deeplinkUserLoader.addEventListener(ServerLoaderEvent.ERROR, _handleDeeplinkUserLoaderEvent);                deeplinkUserLoader.startLoad(apiBaseUrl + AppConsts.getByIdPath(), params, 'text', true);            }						classTrace('deeplinkdelimiter: ' + config.@deeplinkdelimiter);			classTrace('multistageDeeplinks: ' + multistageDeeplinks);						if(config.@useswfaddress == "true")			{				useSWFAddress = true;				_siteName = config.@sitename;			}						super._sectionRuntimeLoads = new Array();						var iLimit			:int = config.runtimeassets.section.length();			var sectionLoadList	:Array;						var iiLimit			:int;			var loadArray		:Array;						for(var i:int = 0; i < iLimit; i++)			{				sectionLoadList = new Array();				iiLimit = config.runtimeassets.section[i].children().length();								for(var ii:int = 0; ii < iiLimit; ii++)				{					loadArray 		= new Array();					loadArray[0] 	= String( config.runtimeassets.section[i].load.@file[ii] 	);					loadArray[1] 	= String( config.runtimeassets.section[i].load.@target[ii]	);										sectionLoadList.push(loadArray);				}								super._sectionRuntimeLoads.push(sectionLoadList);			}						//	setup color palette in Styling Singleton			Styling.instance.addColorFromXmlList(config.colorpalette, 'name', 'value');			_setupFirstLoad();            // dont load css file just yet check for deeplink and load that users data so its ready once the full site loads.			//_loadCSSFile();            if(!deeplinkUserLoader)            {                _loadCSSFile();            }		}        private function _handleDeeplinkUserLoaderEvent(e:ServerLoaderEvent):void        {            switch(e.type)            {                case ServerLoaderEvent.START:                    break;                case ServerLoaderEvent.COMPLETE:                    var jsonData:Object = com.adobe.serialization.json.JSON.decode(e.loadedData);                    if(jsonData.status == 'success')                    {                        var entry:Object = jsonData.data;                        deeplinkUserData = new AppUserDataModel();                        deeplinkUserData.id            = entry.id;                        deeplinkUserData.userName      = entry.name;                        deeplinkUserData.basePath      = entry.base_path;                        deeplinkUserData.userImagePath = entry.image_path;                        deeplinkUserData.userGifPath   = entry.gif_path;                        deeplinkUserData.userVideoPath = entry.video_path;                        deeplinkUserData.userOrigin    = entry.origin;                    }                    else                    {                        deeplinkUserData = null;                    }                    break;                case ServerLoaderEvent.ERROR:                    deeplinkUserData = null;                    break;            }            if(e.type != ServerLoaderEvent.START)            {                deeplinkUserLoader.removeEventListener(ServerLoaderEvent.START, _handleDeeplinkUserLoaderEvent);                deeplinkUserLoader.removeEventListener(ServerLoaderEvent.COMPLETE, _handleDeeplinkUserLoaderEvent);                deeplinkUserLoader.removeEventListener(ServerLoaderEvent.ERROR, _handleDeeplinkUserLoaderEvent);                deeplinkUserLoader = null;                _loadCSSFile();            }        }				private function _handleConfigLoadError(evt:Event):void		{			trace('an error occurred loading '+_configFile+' the site cannot function without this file');		}						private function _setupFirstLoad():void		{			var config:XML = XMLData.instance.config;			_firstLoad = new Array();			if(String(config.initialload.@globaltypefile).length > 0)			{				var loadArray:Array = new Array();					loadArray[0] = String(config.initialload.@globaltypefile);					loadArray[1] = 'typeHolder';									_firstLoad.push(loadArray);			}			else			{				trace('no global type for this site');			}									var initialLoadList:XMLList = new XMLList(config.runtimeassets.initial);				initialLoadList.appendChild(config.initialload.children());            classTrace('initialLoadList:\n'+initialLoadList);						for(var i:int = 0; i < initialLoadList.load.length(); i++)			{				loadArray = new Array();				loadArray[0] = String(initialLoadList.load.@file[i]);				loadArray[1] = String(initialLoadList.load.@target[i]);								_firstLoad.push(loadArray);			}		}				//	css loading functions		private function _loadCSSFile():void		{			var file:String = XMLData.instance.config.textformats.@cssfile;			trace('load css ' + file);			classTrace('hit loadCSSFile');			if(file.length < 1)			{				_loadSitemapFile();				return;			}												_cssLoader = new CssLoader(baseUrl + file);			_cssLoader.addEventListener(	CssLoaderEvent.COMPLETE, 	_handleCSSLoadComplete	);			_cssLoader.addEventListener(	CssLoaderEvent.ERROR, 		_handleCSSLoadError		);			_cssLoader.startLoad();		}				private function _handleCSSLoadComplete(e:CssLoaderEvent):void		{			classTrace('hit handleCSSLoadComplete');			if(e != null)			{				//trace('css '+e.cssText);				Styling.instance.addStyleSheet(e.cssText);			}						_cssLoader.removeEventListener(	CssLoaderEvent.COMPLETE, 	_handleCSSLoadComplete	);			_cssLoader.removeEventListener(	CssLoaderEvent.ERROR, 		_handleCSSLoadError		);			//_cssLoader.destroy();						_loadSitemapFile();		}				private function _handleCSSLoadError(e:CssLoaderEvent):void		{			classTrace('hit handleCSSLoadError');			_handleCSSLoadComplete(null);		}				//	sitemap loader functions		private function _loadSitemapFile():void		{			var file:String = XMLData.instance.config.initialload.@xmlfile;			classTrace('hit loadSitemap ' + file);			if(file.length < 1){				loadInitialFiles();				return;			}						if(loaderInfo.url.substr(0, 7) == 'http://')			{				file += '?nocache='+( Math.round( Math.random()*100000000) );			}						_sitemapLoader = new XmlLoader(baseUrl + file);			_sitemapLoader.addEventListener(XmlLoaderEvent.COMPLETE, _handleSitemapLoadComplete);			_sitemapLoader.addEventListener(XmlLoaderEvent.ERROR, _handleSitemapLoadError);			_sitemapLoader.startLoad()		}				private function _handleSitemapLoadComplete(e:XmlLoaderEvent):void		{			classTrace('hit handleSitemapLoadComplete');						_sitemapLoader.removeEventListener(XmlLoaderEvent.COMPLETE, _handleSitemapLoadComplete);			_sitemapLoader.removeEventListener(XmlLoaderEvent.ERROR, _handleSitemapLoadError);			_sitemapLoader.destroy();						if(e != null)			{				var sitemap:XML = XMLData.instance.sitemap = e.xml;				var sectionXmlList:XMLList = sitemap.sectionlist;				var limit:int = sectionXmlList.children().length();								_totalSections = limit;								var sectionSwf:String;				var sectionIntro:String;				var sectionDeeplink:String;								//	add swf files intros and deeplinks to the appropriate lists				for(var i:int = 0; i < limit; i++){					sectionSwf = String( sectionXmlList.section[i].@sectionswf[0]);					sectionIntro = String(sectionXmlList.section[i].@intro[0]);					sectionDeeplink = String( sectionXmlList.section[i].@deeplink[0]);										if( sectionSwf.length > 0 && sectionSwf != null)						setSectionListAt( sectionSwf, i);					if( sectionIntro.length > 0 && sectionIntro	!= null)						setIntroListAt( sectionIntro, i);					if( sectionDeeplink.length > 0 && sectionDeeplink != null)						deeplink.addDeeplink( sectionDeeplink, i);				}										}            _setupTrackers();						//	move on to the initial load either through the swfAddress or directly to the function			if(useSWFAddress){				SWFAddress.addEventListener(SWFAddressEvent.INIT, super.SWFAddressDeeplink);			}else{				loadInitialFiles();			}		}        private function _setupTrackers():void        {            var list:XMLList = XMLData.instance.sitemap.tracking.tracker;            trace('_setupTrackers '+list);            var iLimit:int = list.length();            for(var i:int = 0; i<iLimit; i++)            {                SiteTracking.instance.addTracker(list.@name[i], XMLUtil.XMLBoolean(list.@default[i]))            }            classTrace('site tracking steup '+SiteTracking.instance.trackerList);        }				private function _handleSitemapLoadError(evt:Event):void		{			classTrace('en error occurred loading the file with sitemapLoader');			_handleSitemapLoadComplete(null)		}				override protected function loadInitialFiles(evt:Event = null):void		{			output('loadInitialFiles');			var deeplinkCheck:String;			var validatedDeeplink:int = 0;						if(useSWFAddress)			{				var curAddress:String = SWFAddress.getValue();				output('curAddress = ' + curAddress);								if(curAddress == '/'){					output('curAddress was null or / use _dl');					//if(dl != null && dl.length > 0)	validatedDeeplink = deeplink.findDeeplink(dl);					if(dl != null && dl.length > 0)						validatedDeeplink = deeplink.findDeeplink(multistageDeeplinks[0]);				}else{					output('use curAddress ');					validatedDeeplink = deeplink.findDeeplink(curAddress);				}			}else{				//deeplinkCheck = dl				//if(dl != null && dl.length > 0)	validatedDeeplink = deeplink.findDeeplink(dl);				if(dl != null && dl.length > 0)                {                    validatedDeeplink = 0;//                    validatedDeeplink = deeplink.findDeeplink(multistageDeeplinks[0]);//                    special handling of deeplinks since this site always loads to the empty section numbered 0                    vikingsValidatedDeeplink = deeplink.findDeeplink(multistageDeeplinks[0]);                }			}						super.activeSectionNumber 	= 0;			super.nextSectionNumber 	= 0;			classTrace(activeSectionNumber+' - '+nextSectionNumber);						var file:String;			var loadTargetName:String;			var loadTarget:DisplayObjectContainer;						for(var i:int = 0; i < _firstLoad.length; i++)			{				file 			= String(_firstLoad[i][0]);				loadTargetName 	= String(_firstLoad[i][1]);				loadTarget		= DisplayObjectContainer(this[loadTargetName]);								if(loadTarget == null)					super.addRuntimeAssetToLoad(baseUrl + file, loadTargetName);				else					_preloader.addToLoadStack(baseUrl + file, this[loadTargetName] );			}						trace('_sectionRuntimeLoads: '+super._sectionRuntimeLoads[0]);			var iiLimit:int = super._sectionRuntimeLoads[0].length;						for(var ii:int = 0; ii < iiLimit; ii++)			{				file 			= String(super._sectionRuntimeLoads[validatedDeeplink][ii][0]);				loadTargetName 	= String(super._sectionRuntimeLoads[validatedDeeplink][ii][1]);				super.addRuntimeAssetToLoad(baseUrl + file, loadTargetName)			}			output('section list '+_sectionList[validatedDeeplink]);			_preloader.addToLoadStack( baseUrl + _sectionList[validatedDeeplink], sectionHolder );						classTrace(_preloader.loadStack);						var introFile:String = _introList[validatedDeeplink];			if( introFile != null)	_preloader.addToLoadStack(baseUrl + introFile, introHolder );						//_preloader.startLoad()			changeSiteState(INITIAL_LOADING_STATE);		}				private function _handleSiteStateUpdate(evt:Event):void		{			classTrace('handleSiteStateUpdate to state '+siteState);			switch(siteState)			{				case INITIAL_LOADING_STATE:					_initialPreloader.animateIn();					break;									case SECTION_LOADING_STATE:					classTrace('handleSiteStateUpdate introHolder children: '+introHolder.numChildren);					classTrace('handleSiteStateUpdate sectionHolder children: '+sectionHolder.numChildren);								if(introHolder.numChildren > 0)					{						classTrace('introHolder has '+ introHolder.numChildren +' children to remove');						if( introHolder.numChildren > 0)						{							for(var i:int = 0; i < introHolder.numChildren; i++)							{								SectionIntro(introHolder.getChildAt(i)).destroy();							}						}					}										if(sectionHolder.numChildren > 0)					{						classTrace('sectionHolder has '+ sectionHolder.numChildren +' children to remove');						if( sectionHolder.numChildren > 0)						{							for(var ii:int = 0; ii < sectionHolder.numChildren; ii++)							{								Section(sectionHolder.getChildAt(ii)).destroy();							}						}					}										super.clearContainer(		DisplayObjectContainer(introHolder)		);					super.clearContainer(		DisplayObjectContainer(sectionHolder)	);															_sectionPreloader.animateIn();										break;									case INITIAL_ANIMATION_COMPLETE_STATE:					_showInitialSection();					break;			}		}				protected override function initialSiteBuild(e:SiteManagerEvent):void		{			classTrace('initialSiteBuild');			//	the initial loader visual is no longer needed			preloaderHolder.removeChild(_initialPreloader);			//	setup a new loader for the sections            //var sectionPreloaderVisual:MovieClip = new sectionLoaderVisual();//                sectionPreloaderVisual.x = 184;//                sectionPreloaderVisual.y = -17;//                sectionPreloaderVisual.alpha = 0;//            sectionPreloaderHolder.addChild(sectionPreloaderVisual);////			_sectionPreloader = new SiteSectionPreloader(this, sectionPreloaderVisual);//			_sectionPreloader.showTraces = true;//			super._preloader = _sectionPreloader;//			preloaderHolder.addChild(_sectionPreloader);			changeSiteState(INITIAL_ANIMATION_STATE);			changeSiteState(INITIAL_ANIMATION_COMPLETE_STATE);			classTrace(siteState);		}				private function _showInitialSection():void		{			classTrace('hit showInitialSection');			initialBuild = false;			showLoadedSection(skipInitialIntro);		}				//private function showLoadedSection(skipIntro:Boolean = false):void		internal function showLoadedSection(skipIntro:Boolean = false):void		{			classTrace('hit showLoadedSection skipIntro = '+skipIntro);			var currentState:String = super.siteState;						var sectionNumber:int = super.nextSectionNumber;			super.activeSectionNumber = sectionNumber;						super._sectionRuntimeLoads[sectionNumber] = new Array();						var nextState:String = SECTION_TRANS_IN_STATE;						if(!skipIntro)			{				var introFile:String = super.introList[sectionNumber];				classTrace('introFile = '+introFile );								if(introFile != null)					nextState = INTRO_TRANS_IN_STATE;			}						skipInitialIntro = false;			skipSectionIntro = false;						super.changeSiteState(nextState);		}				private function _handleResize(e:Event = null):void		{			var s:Stage = StageReference.instance.stage;			var w:int = s.stageWidth;			var h:int = s.stageHeight;						//preloaderHolder.x = int(w * .5);			//preloaderHolder.y = int(h * .5);            if(_initialPreloader)            {                _initialPreloader.x = int(w * .5);                //_initialPreloader.y = int(768 * .5);                _initialPreloader.bg.width = w;                _initialPreloader.bg.height = h;                _initialPreloader.bg.x = -(_initialPreloader.bg.width * .5);                //_initialPreloader.bg.y = -(768 * .5);                //                _initialPreloader.visual.y = int(h * .5);            }			//sectionHolder.x = int(w * .5);			siteContainer.y = int((h - 768) * .5);            //notificationHolder.y = -(siteContainer.y * .5);					}				//	development methods		public function classTrace(val:*, className:String = ''):void		{			if(!_showTraces)				return;			var prefix:String = '';			if(className.length > 0)				prefix = className+': ';			else				prefix = CLASS_NAME+': ';						//output(prefix+val);			LiveTrace.output(prefix + val)            trace(prefix+val);		}			}	}
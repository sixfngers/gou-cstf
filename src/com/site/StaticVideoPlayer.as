package com.site{import com.davidcaneso.display.Slider;import com.davidcaneso.display.SliderWithClickableTrack;import com.davidcaneso.display.drawing.SquareArea;import com.davidcaneso.display.drawing.SquareOutline;import com.davidcaneso.events.SliderEvent;import com.davidcaneso.events.framework.SiteManagerEvent;    import com.davidcaneso.events.video.VideoPlaybackEvent;    import com.davidcaneso.framework.ActiveSiteElement;    import com.davidcaneso.framework.DevelopmentEnvironment;    import com.davidcaneso.framework.SiteManager;    import com.davidcaneso.singletons.StageReference;import com.davidcaneso.singletons.Styling;import com.davidcaneso.video.VideoPlayer;    import com.greensock.*;    import com.greensock.easing.*;    import com.site.app.AppStepEvent;import com.site.ui.SquareAppTextButton;import flash.display.*;    import flash.events.*;    [SWF(backgroundColor=0xffffff, frameRate=30, width=1024, height=768)]    public class StaticVideoPlayer extends ActiveSiteElement	{		private var _restartOnWake:Boolean = false;				private var _container:Sprite;		private var _blocker:SquareArea;		private var _player:VideoPlayer;        private var _closeButton:MovieClip;        private var _scrubberTrack:SquareArea;        private var _scrubberHandle:SquareArea;        private var _scrubberMasking:SquareArea;        private var _scrubber:Slider;        private var _scrubberContainer:Sprite;        private var _pausePlayButton:MovieClip;        private var _playerOutline:SquareOutline;        private var _headerText:MovieClip;				public function StaticVideoPlayer()		{			_className = 'StaticVideoPlayer';			_devConfigFile = '../../assets/data/siteConfig.xml';			_devSetupType		= DevelopmentEnvironment.INITIAL_EVENT_TYPES;			_devSectionNumber 	= -1;			_showTraces 		= false;						//	uncomment the _showTraces var on the line below to activate traces for this section			_showTraces = true;		}				override public function destroy():void		{			super.destroy()		}				//	private and protected methods		override protected function setup():void		{			trace('setup');			//_xml = XMLData.instance.sitemap.base;			_container = new MovieClip();						_blocker = new SquareArea(100, 768);			//_blocker.alpha = .8;			_blocker.addEventListener(MouseEvent.ROLL_OVER, _blockerInteract);			_blocker.addEventListener(MouseEvent.ROLL_OUT, _blockerInteract);			_blocker.addEventListener(MouseEvent.CLICK, _blockerInteract);            _blocker.alpha = 0;            _blocker.visible = false;			_player = new VideoPlayer(628, 354, 0x000000);            _player.showTraces();            _player.y = Math.round((768 - _player.videoDisplay.height) * .5) - 75;			_player.addEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handlePlayerStateChange);            _player.addEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handlePlayerTimeChange);            _player.addEventListener(VideoPlaybackEvent.METADATA_RECEIVED, _handleMetaDataPlaybackEvent);            _closeButton = new videoCloseButtonGraphics();            _closeButton.x = _player.x + _player.videoDisplay.width - _closeButton.width;            _closeButton.y = _player.y - _closeButton.height - 5;            _closeButton.buttonMode = true;            _closeButton.mouseChildren = false;            _closeButton.addEventListener(MouseEvent.ROLL_OVER, _handleCloseInteract);            _closeButton.addEventListener(MouseEvent.ROLL_OUT, _handleCloseInteract);            _closeButton.addEventListener(MouseEvent.CLICK, _handleCloseInteract);            _scrubberMasking = new SquareArea(580, 18, 0xff0000);            _scrubberTrack = new SquareArea(580, 18, 0xffffff);            _scrubberTrack.alpha = .3;            _scrubberHandle = new SquareArea(580, 18, 0xffffff);            _scrubberHandle.alpha = .8;            _scrubberHandle.scaleX = -1;            //_scrubberHandle.x = -_scrubberHandle.width;            _scrubber = new Slider(_scrubberHandle, _scrubberTrack, StageReference.instance.stage, _scrubberTrack.width);            _scrubber.mask = _scrubberMasking;            _scrubber.addEventListener(SliderEvent.DRAG_START, _handleSliderEvent);            _scrubber.addEventListener(SliderEvent.DRAG_STOP, _handleSliderEvent);            _scrubber.addEventListener(SliderEvent.DRAG_UPDATE, _handleSliderEvent);            _scrubberContainer = new Sprite();            _scrubberContainer.y = _player.y + (_player.height - (_scrubberTrack.height + 4));            _scrubberContainer.addChild(_scrubber);            _scrubberContainer.addChild(_scrubberMasking);            _pausePlayButton = new videoPausePlayIconImage();            _pausePlayButton.y = _scrubberContainer.y;            _pausePlayButton.buttonMode = true;            _pausePlayButton.mouseChildren = false;            _pausePlayButton.addEventListener(MouseEvent.ROLL_OVER, _handlePausePlayInteract);            _pausePlayButton.addEventListener(MouseEvent.ROLL_OUT, _handlePausePlayInteract);            _pausePlayButton.addEventListener(MouseEvent.CLICK, _handlePausePlayInteract);            _playerOutline = new SquareOutline(_player.videoDisplay.maxWidth + 2, _player.videoDisplay.maxHeight + 2, 2, 2, 0xffffff, 0, false);            //_playerOutline.y =  Math.round((768 - _playerOutline.height) * .5) - 75;            _headerText = new headerText();            _closeButton.y = _playerOutline.y - _closeButton.height - 5;            _scrubberContainer.x = _playerOutline.x + 7;            _scrubberContainer.y = _playerOutline.y + _playerOutline.height - (_scrubberContainer.height + 7);            _pausePlayButton.x = _scrubberContainer.x + _scrubberTrack.width + 8;            _pausePlayButton.y = _scrubberContainer.y;            _player.x = _playerOutline.x + ((_playerOutline.width - _player.videoDisplay.width) * .5);            _player.y = _playerOutline.y + ((_playerOutline.height - _player.videoDisplay.height) * .5);            _container = new Sprite();			_container.visible = false;			_container.alpha = 0;			_container.addChild(_playerOutline);            _container.addChild(_headerText);            _container.addChild(_player);            _container.addChild(_scrubberContainer);            _container.addChild(_pausePlayButton);            _container.addChild(_closeButton);            addChild(_blocker);            addChild(_container);			handleResize();			StageReference.instance.stage.addEventListener(Event.RESIZE, handleResize);            StageReference.instance.stage.addEventListener(AppStepEvent.LEARN_MOVES, _handleAppStepEvent);            //_showVideo();		}        private function _handleMetaDataPlaybackEvent(e:VideoPlaybackEvent):void        {            var maxW:int = _player.videoDisplay.maxWidth;            var maxH:int = _player.videoDisplay.maxHeight;            var contentW:int = e.metaData.width;            var contentH:int = e.metaData.height;            _player.videoDisplay.width = contentW;            _player.videoDisplay.height = contentH;            var scaleRatio:Number;            var contentIsSmallerThanHolder:Boolean = false;            if((contentH / contentW) < 1)            {                // use the vertical scale ratio because that will be the smaller dimension                scaleRatio = (maxH / contentH);                _player.videoDisplay.height = maxH;                _player.videoDisplay.width = contentW * scaleRatio;            }            else if((contentH / contentW) > 1)            {                scaleRatio = (maxW / contentW);                _player.videoDisplay.width = maxW;                _player.videoDisplay.height = contentH * scaleRatio;            }            else            {                //image is square                _player.videoDisplay.height = Math.min(_player.videoDisplay.maxHeight, _player.videoDisplay.maxWidth);                _player.videoDisplay.width = Math.min(_player.videoDisplay.maxHeight, _player.videoDisplay.maxWidth);            }            //_player.x = playerMasking.x + int(((_playerOutline.width - _player.videoDisplay.width) * .5));            //_player.y = playerMasking.y + int(((_playerOutline.height - _player.videoDisplay.height) * .5));            _player.x = _playerOutline.x + ((_playerOutline.width - _player.videoDisplay.width) * .5);            _player.y = _playerOutline.y + ((_playerOutline.height - _player.videoDisplay.height) * .5);            //handleResize(null)        }        private function _handlePausePlayInteract(e:MouseEvent):void        {            switch(e.type)            {                case MouseEvent.ROLL_OVER:                    TweenMax.to(_pausePlayButton,.3, {tint:Styling.instance.findColor('red'), ease:Quad.easeOut});                    break;                case MouseEvent.ROLL_OUT:                    TweenMax.to(_pausePlayButton,.3, {removeTint:true, ease:Quad.easeOut});                    break;                case MouseEvent.CLICK:                    _player.pauseVideo(!_player.isPaused);                    break;            }        }        private function _handleSliderEvent(e:SliderEvent):void        {            switch(e.type)            {                case SliderEvent.DRAG_START:                    _player.startScrub(e.percent);                    break;                case SliderEvent.DRAG_STOP:                    _player.endScrub(e.percent);                    break;                case SliderEvent.DRAG_UPDATE:                    trace(e.percent);                    _player.scrub(e.percent);                    break;            }        }        private function _handleCloseInteract(e:MouseEvent):void        {            switch(e.type)            {                case MouseEvent.ROLL_OVER:                    break;                case MouseEvent.ROLL_OUT:                    break;                case MouseEvent.CLICK:                    _hideVideo();                    break;            }        }        private function _handleAppStepEvent(e:AppStepEvent):void        {            _showVideo();        }				private function _blockerInteract(e:MouseEvent = null):void		{					}		private function _showVideo():void		{            TweenMax.killTweensOf(_blocker);            TweenMax.killTweensOf(_container);            TweenMax.to(_blocker, .5, {autoAlpha:.8, ease:Quad.easeOut});            TweenMax.to(_container, .5, {autoAlpha:1, ease:Quad.easeOut, onComplete:_startVideo})		}				private function _hideVideo():void		{			if(!_player.isPaused)				_player.pauseVideo(true);            TweenMax.killTweensOf(_blocker);            TweenMax.killTweensOf(_container);            TweenMax.to(_blocker, .3, {autoAlpha:0, ease:Quad.easeOut});			TweenMax.to(_container, .3, {autoAlpha:0, ease:Quad.easeOut, onComplete:_hideVideoComplete});		}				private function _hideVideoComplete():void		{			// dispatch event to let app know video is hidden            StageReference.instance.stage.dispatchEvent(new AppStepEvent(AppStepEvent.CLOSE_LEARN_MOVES))		}				private function _startVideo():void		{			//_player.startVideo('../../assets/mp4/The_Simpsons_S19E05_Treehouse_of_Horror_XVIII.3gp');			_player.startVideo('../../assets/mp4/dance-lessons.mp4');//			_player.startVideo('../../assets/mp4/dance-lessons.flv');		}        private function _handlePlayerTimeChange(e:VideoPlaybackEvent):void        {            _scrubber.moveHandleToPercent(e.percentPlayed, false);        }				private function _handlePlayerStateChange(e:VideoPlaybackEvent):void        {            var curState:String = e.playerState;            classTrace('player state changed to '+ curState);            //	possible player states are:            //	VIDEO_UNSTARTED_STATE			:	player is idle has been setup but no video has been played            //	VIDEO_START_STATE				:	player has started a video            //	VIDEO_STOP_STATE				:	player has stopped playing a video            //	VIDEO_PLAY_STATE				:	player is currently playing a video            //	VIDEO_PAUSE_STATE				:	player has paused a video            //	VIDEO_COMPLETE_STATE			:	player has completed playing a video            //	VIDEO_SCRUB_STATE				:	player is scrubbing through a video            //	VIDEO_BUFFERING_START_STATE		:	player has started buffering a video            //	VIDEO_BUFFERING_STOP_STATE		:	player has stopped buffering a video            switch(curState){                case VideoPlayer.VIDEO_COMPLETE_STATE:                    _hideVideo();                    break;                case VideoPlayer.VIDEO_PLAY_STATE:                    break;                case VideoPlayer.VIDEO_PAUSE_STATE:                    break;                case VideoPlayer.VIDEO_BUFFERING_START_STATE:                    //showBuffer();                    break;                case VideoPlayer.VIDEO_BUFFERING_STOP_STATE:                    //hideBuffer();                    break;            }        }						override protected function handleSiteStateUpdate(e:SiteManagerEvent):void		{			switch(e.siteState){				case SiteManager.INITIAL_ANIMATION_STATE:					animateIn();					break;					case SiteManager.SLEEP_STATE:					sleep();					break;					case SiteManager.WAKE_STATE:					wake();					break;			}		}						private function animateIn():void		{			classTrace('hit animateIn');		}        private function animateInComplete():void		{			classTrace('animateInComplete');			//stage.dispatchEvent(new SiteManagerEvent(SiteManagerEvent.INITIAL_ANIMATION_COMPLETE, _top.siteState, _top.activeSectionNumber, _top.nextSectionNumber))		}		protected override function sleep():void		{			classTrace('hit sleep');			if(_player.playerState != VideoPlayer.VIDEO_UNSTARTED_STATE && !_player.isPaused)			{				_restartOnWake = true;				_player.pauseVideo(true);			}		}								protected override function wake():void		{			classTrace('hit wake');			if(_restartOnWake)			{				_player.pauseVideo(false);			}			_restartOnWake = false					}				private function handleResize(e:Event = null):void		{            var s:Stage = StageReference.instance.stage;            var w:int = s.stageWidth;            var h:int = s.stageHeight;						_blocker.width = w;            _blocker.height = h;            _container.x = int((w - _playerOutline.width) *.5);            _container.y = int((h - _container.height) *.5);//            _playerOutline.x = Math.round((w - _playerOutline.width) * .5);////            _headerText.x = _playerOutline.x;////            _player.x = _playerOutline.x + ((_playerOutline.width - _player.videoDisplay.width) * .5);////            _scrubberContainer.x = _playerOutline.x + 7;////            _pausePlayButton.x = _scrubberContainer.x + _scrubberTrack.width + 8;////            _closeButton.x = _playerOutline.x + _playerOutline.width - _closeButton.width;					}	}	}
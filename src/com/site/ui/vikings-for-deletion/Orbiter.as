package com.site.ui{		import flash.display.MovieClip;	import flash.events.Event;    public class Orbiter extends MovieClip	{		private var _startingRotation:int;        private var _orbitSpeed:Number;		private var _offsetX:Number;        private var _offsetY:Number;        private var _orbitWidth:int;		private var _orbitHeight:int;		private var _maxOrbitScale:Number;		private var _orbitScaleChange:Number;		private var _baseOrbitScale:Number;				// values that update		private var _currentOrbitRotation:Number;		private var _currentOrbitScale:Number;		private var _sortOrder:int = 0;				public function Orbiter()		{        }				public function get orbitHeight():int		{			return _orbitHeight;		}				public function get sortOrder():int		{			return _sortOrder;		}				public function init(offsetX:Number, offsetY:Number, orbitWidth:Number, orbitHeight:Number, orbitSpeed:Number, maxScale:Number, scaleChange:Number, startingRotation:Number = 0):void		{			// constructor code			_offsetX = offsetX;            _offsetY = offsetY;            _orbitWidth = orbitWidth;			_orbitHeight = orbitHeight;			_orbitSpeed = orbitSpeed;			_maxOrbitScale = maxScale;			_orbitScaleChange = scaleChange;			_baseOrbitScale = _maxOrbitScale - _orbitScaleChange;            _startingRotation = startingRotation;            _currentOrbitRotation = startingRotation;            moveOrbToRotation(_startingRotation);//            addEventListener(MouseEvent.ROLL_OVER, _handleInteracttion);//            addEventListener(MouseEvent.ROLL_OUT, _handleInteracttion);//            addEventListener(MouseEvent.CLICK, _handleInteracttion);		}//        private function _handleInteracttion(e:MouseEvent):void//        {//            switch(e.type)//            {//                case MouseEvent.ROLL_OVER://                    break;////                case MouseEvent.ROLL_OUT://                    break;////                case MouseEvent.CLICK:////                    break;//            }//        }				public function startOrbit():void		{			if(!this.hasEventListener(Event.ENTER_FRAME))				this.addEventListener(Event.ENTER_FRAME, _updateOrbit);		}				public function stopOrbit():void		{			if(this.hasEventListener(Event.ENTER_FRAME))				this.removeEventListener(Event.ENTER_FRAME, _updateOrbit);		}        public function moveOrbToRotation(newRotation:Number):void        {            _currentOrbitRotation = newRotation + _startingRotation;            _updateOrbit(null)        }				private function _updateOrbit(e:Event = null):void		{			//trace(currentOrbitRotation)					//			_currentOrbitRotation += _orbitSpeed;            if(_currentOrbitRotation > 360)            {                _currentOrbitRotation - 360;            }            _updateOrbToRotation(_currentOrbitRotation);		}        private function _updateOrbToRotation(newRotation:Number):void        {            this.x = _orbitWidth * (Math.cos(Math.PI * _currentOrbitRotation/180));            this.y = _orbitHeight * (Math.sin(Math.PI * _currentOrbitRotation/180));            //	scale            var percentageXFromCenter:Number = Math.abs(this.x / _orbitWidth);            var percentageYFromCenter:Number = Math.abs(this.y / _orbitHeight);            var newOrbitScale:Number;            if(this.y <= 0)            {                newOrbitScale = _baseOrbitScale - (_orbitScaleChange * percentageYFromCenter);            }            else if(this.y > 0)            {                newOrbitScale = _baseOrbitScale + (_orbitScaleChange * percentageYFromCenter);            }//          account for the offsets after you have adjusted the scale otherwise you will get flipped visuals            this.x += _offsetX;            this.y += _offsetY;            this.scaleX =            this.scaleY = newOrbitScale;            if(newOrbitScale >= _baseOrbitScale && _sortOrder == 0)            {                _sortOrder = 1;                dispatchEvent(new Event(Event.CHANGE));            }            else if(newOrbitScale <= _baseOrbitScale && _sortOrder == 1)            {                _sortOrder = 0;                dispatchEvent(new Event(Event.CHANGE));            }            _currentOrbitScale = newOrbitScale;        }        public function get startingRotation():int        {            return _startingRotation;        }    }}
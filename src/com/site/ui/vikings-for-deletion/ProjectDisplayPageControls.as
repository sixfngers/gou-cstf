package com.site.ui{	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.Point;	import flash.utils.Timer;		import com.greensock.*	import com.greensock.easing.*		import com.davidcaneso.framework.Section;	import com.davidcaneso.framework.DevelopmentEnvironment	import com.davidcaneso.singletons.RuntimeAssets	import com.davidcaneso.singletons.Styling	import com.davidcaneso.singletons.XMLData	import com.davidcaneso.events.framework.DevelopmentEnvironmentEvent	import com.davidcaneso.events.framework.SiteManagerEvent;	import com.davidcaneso.events.framework.SectionEvent;	import com.davidcaneso.text.DynamicTextField;	import com.davidcaneso.framework.SimpleLink;	import com.davidcaneso.display.drawing.SquareArea;	import com.davidcaneso.display.buttons.BasicButton	import com.davidcaneso.display.buttons.LinkButton		import com.davidcaneso.loading.Preloader;	import com.site.sections.ProjectData;	import com.site.ui.ThumbLiveLinkButton		import com.davidcaneso.events.loading.PreloaderEvent;	import com.davidcaneso.utils.LiveTrace;	import com.site.ui.events.FullDisplayPaginationEvent;	import com.site.ui.TimerToggle		import com.davidcaneso.events.buttonEvent.ToggleButtonEvent;	public class ProjectDisplayPageControls extends Sprite	{		private var _current:int		private var _total:int		private var _buttons:Array				private var _timerToggle:TimerToggle		private var _cycleTimer:Timer				public function ProjectDisplayPageControls()		{			_timerToggle = new TimerToggle()			_timerToggle.x = -_timerToggle.width + 2			_timerToggle.addEventListener(ToggleButtonEvent.UPDATE, _handleToggleUpdate)			_buttons = []			addEventListener('paginationButtonClick', _handleButtonClick)						_cycleTimer = new Timer(int(XMLData.instance.sitemap.sectionlist.section[0].content.@cycletimer))			_cycleTimer.addEventListener(TimerEvent.TIMER, _handleTimerEvent)									addChild(_timerToggle)						animateOut(0)		}				public function adjustTotal(newTotal:int):void		{			var currentTotal:int = _total			var quantityNeeded:int = newTotal 						var numberToCreate:int = quantityNeeded - currentTotal;						_total = newTotal			var pageButton:ProjectDisplayPageButton						if(quantityNeeded >= currentTotal)			{				for(var i:int = 0; i < numberToCreate; i++)				{					pageButton = new ProjectDisplayPageButton()					pageButton.visible = false					addChild(pageButton)					_buttons.push(pageButton)				}			}		}				public function animateIn(t:Number = .5, delay:Number = 0, color:Number = 0x000000):void		{			_startTimer()			_current = 0;			ProjectDisplayPageButton(_buttons[0]).forceSelect(true)			_enableAllButOne(_current)			TweenMax.to(this, 0, {tint:color})						var button:ProjectDisplayPageButton						for(var i:int = 0; i < _buttons.length; i++)			{				button = _buttons[i]				button.visible = false				button.x = _timerToggle.x - 4 -( ((_total - i) * (button.width + 5)) )				if(i < _total)				{					button.visible = true;				}							}									TweenMax.to(this, t, {autoAlpha:1, ease:Quad.easeOut, delay:delay})		}				public function animateOut(t:Number = .5, delay:Number = 0):void		{			_stopTimer();			var button:ProjectDisplayPageButton			for(var i:int = 0; i < _buttons.length; i++)			{				button = _buttons[i]				button.disableButton()			}						TweenMax.to(this, t, {autoAlpha:0, ease:Quad.easeOut, delay:delay})		}				public function sleep():void		{			_stopTimer()		}				public function wake():void		{			_startTimer()		}				private function _handleButtonClick(e:Event):void		{			e.stopImmediatePropagation()						var animationDirection:int = 1			var buttonNumber:int = _total			for(var i:int = 0; i < _total; i++)			{				if(e.target == _buttons[i])				{					buttonNumber = i					//	animate from the left if you are moving backwards through the list					if(buttonNumber < _current) 					animationDirection *= -1					//	force animatsion from the right if you are looping through the images					if(_current == _total - 1 && buttonNumber == 0)	animationDirection = 1										_current = buttonNumber					_enableAllButOne(_current)					dispatchEvent(new FullDisplayPaginationEvent(FullDisplayPaginationEvent.CHANGE, buttonNumber, animationDirection))				}			}						_startTimer()		}				private function _enableAllButOne(buttonNumber:int):void		{			for(var i:int = 0; i<_buttons.length; i++)			{				if(i < _total)				{					if(i != buttonNumber) ProjectDisplayPageButton(_buttons[i]).enableButton()				}							}		}				private function _handleTimerEvent(e:TimerEvent):void		{			var nextButton:int = _current + 1			if(nextButton >= _total) nextButton = 0			ProjectDisplayPageButton(_buttons[nextButton]).forceSelect()		}				private function _handleToggleUpdate(e:ToggleButtonEvent):void		{			if(e.isOn) 	_startTimer()			else		_stopTimer()		}				private function _startTimer():void		{			_cycleTimer.reset()			_timerToggle.reset()			if(_timerToggle.isOn && !_cycleTimer.running)			{				_timerToggle.startRotation()								_cycleTimer.start()			}					}				private function _stopTimer():void		{			_timerToggle.stopRotation()			_cycleTimer.stop()		}			}	}
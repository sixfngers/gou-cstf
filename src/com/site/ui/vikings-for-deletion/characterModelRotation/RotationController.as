package com.site.ui.characterModelRotation{	import com.davidcaneso.singletons.StageReference;	import flash.display.MovieClip;	import flash.events.MouseEvent;	public class RotationController extends MovieClip	{		public var visual:MovieClip;		protected var rotationSpeed:int = 2;		private var _mouseOriginalX:Number;        public function RotationController(mc:MovieClip)		{			visual = mc;            trace('constructor',visual);		}        public function beginRotationControl():void		{            trace(visual);			visual.addEventListener(MouseEvent.MOUSE_DOWN, onDown);		}		public function endRotationControl():void		{			visual.removeEventListener(MouseEvent.MOUSE_DOWN, onDown);			StageReference.instance.stage.removeEventListener(MouseEvent.MOUSE_UP, onUp);		}		public function destroy():void		{			endRotationControl();			visual = null;		}		private function onDown(e:MouseEvent):void        {			visual.removeEventListener(MouseEvent.MOUSE_DOWN, onDown);			visual.addEventListener(MouseEvent.MOUSE_UP, onUp);			StageReference.instance.stage.addEventListener(MouseEvent.MOUSE_UP, onUp);			_mouseOriginalX = e.stageX;			StageReference.instance.stage.addEventListener(MouseEvent.MOUSE_MOVE, onMove);		}		private function onUp(e:MouseEvent):void		{			visual.addEventListener(MouseEvent.MOUSE_DOWN, onDown);			visual.removeEventListener(MouseEvent.MOUSE_UP, onUp);			StageReference.instance.stage.removeEventListener(MouseEvent.MOUSE_UP, onUp);			StageReference.instance.stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMove);		}		private function onMove(e:MouseEvent):void		{			var stageMouseX:Number = e.stageX;			var dist:Number = _mouseOriginalX - stageMouseX;			var rotationAmount:int;            if (dist < 1)			{//				rotateChar(-1 * rotationSpeed);				rotationAmount = -1 * rotationSpeed;			}			else			{//				rotateChar(1 * rotationSpeed);				rotationAmount = rotationSpeed;			}			_mouseOriginalX = stageMouseX;			var rotationControllerEvent:RotationControllerEvent = new RotationControllerEvent(RotationControllerEvent.UPDATE, rotationAmount);			dispatchEvent(rotationControllerEvent);		}	}}
package com.site.ui{import com.davidcaneso.singletons.RuntimeAssets;import com.davidcaneso.singletons.RuntimeAssets;	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.Point;		import com.greensock.*	import com.greensock.easing.*		import com.davidcaneso.framework.Section;	import com.davidcaneso.framework.DevelopmentEnvironment	import com.davidcaneso.singletons.RuntimeAssets	import com.davidcaneso.singletons.Styling	import com.davidcaneso.singletons.XMLData	import com.davidcaneso.events.framework.DevelopmentEnvironmentEvent	import com.davidcaneso.events.framework.SiteManagerEvent;	import com.davidcaneso.events.framework.SectionEvent;	import com.davidcaneso.text.DynamicTextField;	import com.davidcaneso.framework.SimpleLink;	import com.davidcaneso.display.drawing.SquareArea;	import com.davidcaneso.display.buttons.BasicButton	import com.davidcaneso.display.buttons.LinkButton		import com.davidcaneso.loading.Preloader;	import com.site.sections.ProjectData;	import com.site.ui.ThumbLiveLinkButton		import com.davidcaneso.events.loading.PreloaderEvent;	import com.site.ui.events.ProjectThumbEvent;	import com.davidcaneso.display.drawing.SquareOutline;	import com.davidcaneso.display.layout.Alignment;		import com.site.sections.CharacterData;import flash.utils.getDefinitionByName;import flash.utils.getQualifiedClassName;public class CharNavDisplay extends MovieClip	{        private var _navId:int;		private var _data:CharacterData;				private var _container:Sprite;		private var _characterVisual:Sprite;		private var _nameDisplay:DynamicTextField;		private var _rotationContainer:Sprite;        private var _rotationTimeline:MovieClip;        private var _initialFrame:int;        private var _frontOrbContainer:Sprite;        private var _backOrbContainer:Sprite;        private var _orbVisualList:Vector.<Orbiter>;				public function CharNavDisplay(charData:CharacterData, navId:int)		{            _navId = navId;            _data = charData;            _orbVisualList = new Vector.<Orbiter>();			_characterVisual = _data.navSwf;			_characterVisual.visible = true;            _rotationContainer = RuntimeAssets.instance.findAsset('rotatingRangar');            _rotationContainer.visible = true;            trace(MovieClip(_rotationContainer.getChildAt(0)).numChildren);            var rotationContainer:MovieClip = MovieClip(_rotationContainer.getChildAt(0));            _rotationTimeline = MovieClip(rotationContainer.getChildByName('char'));            _rotationTimeline.gotoAndStop('initialFrame');            _initialFrame = _rotationTimeline.currentFrame;            _frontOrbContainer = Sprite(rotationContainer.getChildByName('front'));            _frontOrbContainer.alpha = 0;            _frontOrbContainer.visible = false;            _backOrbContainer = Sprite(rotationContainer.getChildByName('back'));            _backOrbContainer.alpha = 0;            _backOrbContainer.visible = false;            buildCharacterOrbs();            setOrbitsToPercentage(int((currentRotationFrame / totalRotationFrames) * 100));            _nameDisplay = new DynamicTextField(100, 50,'tickerFormat', TextFieldAutoSize.CENTER);			_nameDisplay.text = _data.characterName;            _container = new Sprite();            _container.addChild(_characterVisual);			_container.addChild(_nameDisplay);            _container.addChild(_rotationContainer);			addChild(_container);            resetButton();		}        public function buildCharacterOrbs():void        {            var orbit:Orbiter;            for each(var orbData:CharacterOrbData in data.orbDataList)            {                orbit = new Orbiter();                orbit.init(orbData.offsetX, orbData.offsetY, orbData.orbitWidth, orbData.orbitHeight, orbData.orbitSpeed, orbData.maxOrbitScale, orbData.orbitScaleChange, orbData.startingRotation);                orbit.addEventListener(Event.CHANGE, _updateOrbSortOrder);                orbit.addChild(RuntimeAssets.instance.findAsset(orbData.visualAssetName));                _frontOrbContainer.addChild(orbit);                _orbVisualList.push(orbit);            }            _updateOrbSortOrder(null);        }        private function _updateOrbSortOrder(e:Event):void        {            if(e == null)            {                for each(var orb:Orbiter in _orbVisualList)                {                    if(orb.sortOrder == 0)                        _backOrbContainer.addChild(orb);                    else                        _frontOrbContainer.addChild(orb);                }            }            else            {                var orbit:Orbiter = e.target as Orbiter;                if(orbit.sortOrder == 0)                    _backOrbContainer.addChild(orbit);                else                    _frontOrbContainer.addChild(orbit);            }        }        public function animateInOrbs():void        {            TweenMax.to(_backOrbContainer,.2, {autoAlpha:1, ease:Quint.easeOut});            TweenMax.to(_frontOrbContainer,.2, {autoAlpha:1, ease:Quint.easeOut});            for each(var orb:Orbiter in _orbVisualList)            {                orb.y += 120;                TweenMax.to(orb,1, {y:"-120", ease:Quint.easeOut});            }        }        public function rotateChar(direction:int):void        {            var nextFrameNumber:int = _rotationTimeline.currentFrame + direction;            if(direction > 0)            {                if(nextFrameNumber >= totalRotationFrames - 3)                    nextFrameNumber = totalRotationFrames - 3;            }            else            {                if(nextFrameNumber <= 1)                    nextFrameNumber = 1;            }            _rotationTimeline.gotoAndStop(nextFrameNumber);            //trace('char is now rotated to '+ int((currentRotationFrame / totalRotationFrames) * 100) );            setOrbitsToPercentage(int((currentRotationFrame / totalRotationFrames) * 100))        }        public function restartOrbits():void        {            for each(var orb:Orbiter in _orbVisualList)            {                orb.startOrbit();            }        }        public function setOrbitsToPercentage(percentage:Number):void        {            for each(var orb:Orbiter in _orbVisualList)            {                orb.moveOrbToRotation(200 *  (percentage / 100));            }        }        public function pauseOrbits():void        {            for each(var orb:Orbiter in _orbVisualList)            {                orb.stopOrbit();            }        }        public function rotateCharToPercent(percent:int):void        {            var frameAtPercent:int;            if(frameAtPercent <= 1)                frameAtPercent = 1;            else if(frameAtPercent >= totalRotationFrames - 1)                frameAtPercent = totalRotationFrames;            _rotationTimeline.gotoAndStop(frameAtPercent);        }		private function _handleBlankButtonInteract(e:MouseEvent):void		{			switch(e.type)			{				case MouseEvent.ROLL_OVER:					_buttonRollOver();					break;									case MouseEvent.ROLL_OUT:					_buttonRollOut();					break;									case MouseEvent.CLICK:					_buttonClick();					break;			}		}				private function _buttonRollOver():void		{			//TweenMax.to(_rollOverOutline, .3, {width:_rollOverMask.width, height:_rollOverMask.height, ease:Quad.easeOut})			//TweenMax.to(_fill, .3, {x:-_fill.width, ease:Quad.easeOut})		}				private function _buttonRollOut(t:Number = .3):void		{			//TweenMax.to(_rollOverOutline, t, {width:_rollOverMask.width + (_outlineWidth * 1.5), height:_rollOverMask.height + (_outlineHeight * 1.5), ease:Quad.easeOut})			//TweenMax.to(_fill, .3, {x:-15, ease:Quad.easeOut})		}				private function _buttonClick():void		{            removeEventListener(MouseEvent.CLICK, _handleBlankButtonInteract);			dispatchEvent(new Event(Event.SELECT));		}        public function resetButton():void        {            addEventListener(MouseEvent.CLICK, _handleBlankButtonInteract);        }        public function get navId():int        {            return _navId;        }        public function get data():CharacterData        {            return _data;        }        public function get currentRotationFrame():int        {            return _rotationTimeline.currentFrame;        }        public function get totalRotationFrames():int        {            return _rotationTimeline.totalFrames;        }}	}
package com.site.app.steps{    //	imports    import com.davidcaneso.display.drawing.SquareArea;    import com.davidcaneso.events.framework.SiteManagerEvent;    import com.davidcaneso.singletons.StageReference;    import com.davidcaneso.singletons.Styling;    import com.davidcaneso.text.DynamicTextField;    import com.davidcaneso.utils.LiveTrace;    import com.greensock.TweenMax;    import com.greensock.easing.Quad;    import com.greensock.plugins.MotionBlurPlugin;    import com.greensock.plugins.TweenPlugin;    import com.site.AppUser;    import com.site.app.AppConsts;    import com.site.app.AppStep;    import com.site.app.VideoFileUploader;    import com.site.app.VideoFileUploaderEvent;    import com.site.ui.SquareAppTextButton;    import flash.display.MovieClip;    import flash.display.Sprite;    import flash.events.Event;    import flash.events.MouseEvent;    TweenPlugin.activate([MotionBlurPlugin]);    public class UploadFileStep extends AppStep	{		private static const showTraces:Boolean = true;		private static const MAX_FILE_SIZE_MB:int = 10;		private static const MAX_FILE_SIZE_KB:Number = MAX_FILE_SIZE_MB * 1024;						//	properties        private var _content:MovieClip;		private var _selectFileButton:MovieClip;		private var _fileUploader:VideoFileUploader;        private var _preloaderVisual:Sprite;        private var _preloaderFill:SquareArea;						//	constructor		public function UploadFileStep(devMode:Boolean = false):void		{            _content = new uploadFileStageContent() as MovieClip;            _content.stepHeader.tf.text = 'Upload';            addChild(_content);            super(devMode);            //var baseUrl:String = XMLData.instance.config.@baseurl;            trace('UploadFileStep num children '+this.numChildren);            var fileUploaderScriptUrl:String = apiBaseUrl + AppConsts.uploadScriptUrl;            //var uploadDestination:String = baseUrl + AppConsts.tempVideoPath;            _fileUploader = new VideoFileUploader(fileUploaderScriptUrl, devMode, 'e5c93c51325de1f19d7bbd8177b763f2.flv');			_fileUploader.showTraces = true;            _fileUploader.addEventListener(VideoFileUploaderEvent.BROWSE_START, _handleFileUploaderEvent);            _fileUploader.addEventListener(VideoFileUploaderEvent.BROWSE_CANCEL, _handleFileUploaderEvent);			_fileUploader.addEventListener(VideoFileUploaderEvent.START, _handleFileUploaderEvent);            _fileUploader.addEventListener(VideoFileUploaderEvent.UPDATE, _handleFileUploaderEvent);			_fileUploader.addEventListener(VideoFileUploaderEvent.COMPLETE, _handleFileUploaderEvent);			_fileUploader.addEventListener(VideoFileUploaderEvent.ERROR, _handleFileUploaderEvent);			_selectFileButton = _content.selectFileButton;			_selectFileButton.addEventListener(MouseEvent.ROLL_OVER, _selectFileInteract);			_selectFileButton.addEventListener(MouseEvent.ROLL_OUT, _selectFileInteract);			_selectFileButton.addEventListener(MouseEvent.CLICK, _selectFileInteract);			_selectFileButton.tf.text = 'SELECT FILE';            _content.prevStep.buttonMode = true;            _content.prevStep.mouseChildren = false;            _content.prevStep.addEventListener(MouseEvent.ROLL_OVER, _handlePrevNextInteract);            _content.prevStep.addEventListener(MouseEvent.ROLL_OUT, _handlePrevNextInteract);            _content.prevStep.addEventListener(MouseEvent.CLICK, _handlePrevNextInteract);            _content.nextStep.alpha = 0;            _content.nextStep.visible = false;            _content.nextStep.buttonMode = true;            _content.nextStep.mouseChildren = false;            _content.nextStep.addEventListener(MouseEvent.ROLL_OVER, _handlePrevNextInteract);            _content.nextStep.addEventListener(MouseEvent.ROLL_OUT, _handlePrevNextInteract);            _content.nextStep.addEventListener(MouseEvent.CLICK, _handlePrevNextInteract);            var preloaderWidth:int = 367;            _preloaderVisual = new Sprite();            _preloaderVisual.x = (_selectFileButton.x + (_selectFileButton.width  * .5));            _preloaderVisual.y = _selectFileButton.y - 10;            _preloaderVisual.visible = false;            var preloaderHeader:DynamicTextField = new DynamicTextField(preloaderWidth, 0, Styling.instance.findFormat('filePreloaderHeader'));                preloaderHeader.text = 'VIDEO UPLOADING';                preloaderHeader.x = int(-preloaderHeader.width * .5);            var preloaderBase:SquareArea = new SquareArea(preloaderWidth, 10, Styling.instance.findColor('white'));                preloaderBase.x = int(-preloaderBase.width * .5);                preloaderBase.y = preloaderHeader.y + preloaderHeader.height + 20;            _preloaderFill = new SquareArea(preloaderWidth, 10, Styling.instance.findColor('red'));            _preloaderFill.x = preloaderBase.x;            _preloaderFill.y = preloaderBase.y;            _preloaderFill.scaleX = 0;            _preloaderVisual.addChild(preloaderHeader);            _preloaderVisual.addChild(preloaderBase);            _preloaderVisual.addChild(_preloaderFill);            _content.addChild(_preloaderVisual);        }        private function _handlePrevNextInteract(e:MouseEvent):void        {            var mc:MovieClip = _content.nextStep;            if(e.target == _content.prevStep)                mc = _content.prevStep;            switch(e.type)            {                case MouseEvent.ROLL_OVER:                    TweenMax.to(mc.arrow,.2, {tint:0x000000, ease:Quad.easeOut});                    break;                case MouseEvent.ROLL_OUT:                    TweenMax.to(mc.arrow,.2, {removeTint:true, ease:Quad.easeOut});                    break;                case MouseEvent.CLICK:                    if(mc == _content.nextStep)                        _handleNextStepClick(null);                    else                        _handlePrevStepClick(null);                    break;            }        }        override protected function _handleNextStepClick(e:Event):void        {            super._handleNextStepClick(null);        }				override public function animateIn():void		{            _selectFileButton.visible = true;            _preloaderVisual.visible = false;            _preloaderFill.scaleX = 0;			this.alpha = 1;			this.visible = true;						StageReference.instance.stage.addEventListener(SiteManagerEvent.SITE_STATE_UPDATE, handleSiteStateUpdate);		}				override protected function _animateInComplete():void {}						override protected function _animateOut():void		{			StageReference.instance.stage.removeEventListener(SiteManagerEvent.SITE_STATE_UPDATE, handleSiteStateUpdate);            this.alpha = 0;            this.visible = false;            _animateOutComplete();		}				override protected function _animateOutComplete():void		{			super._animateOutComplete();		}								//private function				private function _handleFileUploaderEvent(e:VideoFileUploaderEvent):void		{			switch (e.type)			{				case VideoFileUploaderEvent.BROWSE_START:                    _selectFileButton.visible = false;					break;                case VideoFileUploaderEvent.BROWSE_CANCEL:                    _selectFileButton.visible = true;					break;				case VideoFileUploaderEvent.START:                    _selectFileButton.visible = false;                    _preloaderVisual.visible = true;                    _preloaderFill.scaleX = 0;                    break;                case VideoFileUploaderEvent.UPDATE:                    _preloaderFill.scaleX = int(e.percent / 100) - .1;					break;                case VideoFileUploaderEvent.COMPLETE:                    _classTrace('userVideoPath: ' + AppUser.userVideoPath);                    AppUser.dataModel.userOrigin = '';                    _selectFileButton.visible = true;                    _preloaderFill.scaleX = .9;                    _handleNextStepClick(null);					break;				case VideoFileUploaderEvent.ERROR:					break;			}		}				private function _selectFileInteract(e:MouseEvent = null):void		{			switch(e.type)			{				case MouseEvent.ROLL_OVER:                    TweenMax.to(_selectFileButton.tf,.2, {tint:0x000000, ease:Quad.easeOut});                    break;									case MouseEvent.ROLL_OUT:                    TweenMax.to(_selectFileButton.tf,.2, {removeTint:true, ease:Quad.easeOut});                    break;									case MouseEvent.CLICK:					_fileUploader.browseForFile();					break;			}		}		private function rejectFile():void		{			LiveTrace.output('files too big');			rejected();		}				private function rejected():void		{			// where do we go from here		}						private function _classTrace(val: * ):void		{			if (showTraces)			{				trace((('UploadFileStep' + ': ') + val));			}		}			}	}
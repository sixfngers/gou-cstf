package com.site.app.steps{    import com.adobe.serialization.json.JSON;    import com.davidcaneso.collections.Queue;    import com.davidcaneso.display.drawing.SquareArea;import com.davidcaneso.events.video.VideoPlaybackEvent;import com.davidcaneso.framework.SiteManager;import com.davidcaneso.singletons.StageReference;    import com.davidcaneso.singletons.Styling;    import com.davidcaneso.singletons.XMLData;    import com.davidcaneso.sound.events.SoundFxEvent;    import com.davidcaneso.text.DynamicTextField;    import com.davidcaneso.utils.LiveTrace;    import com.davidcaneso.video.VideoPlayer;    import com.greensock.TweenMax;    import com.greensock.easing.Back;    import com.site.AppUserDataModel;import com.site.Shell;import com.site.app.AppConsts;import com.site.app.AppStepEvent;import com.site.ui.VideoSlot;import flash.display.MovieClip;import flash.display.Sprite;    import flash.events.Event;    import flash.geom.Point;    import flash.text.TextFieldAutoSize;    public class VideoPlayerCarousel extends Sprite    {        public var allDataLoaded:Boolean = false;        public var _jbPool:Queue;        public var pool:Queue;        public var used:Queue;//        private var _httpPlayer:VideoPlayer;//        private var _rtmpPlayer:VideoPlayer;        private var _activePlayer:VideoPlayer;        private var totalSlots:int = 5;        private var _slotRotation:Vector.<VideoSlot>;        private var _slotPositions:Vector.<Point>;        private var _slotHolder:Sprite;        private var _nameHolder:Sprite;        private var _nameHolderBg:SquareArea;        private var _nameHolderTf:DynamicTextField;        private var _nameHolderMasking:SquareArea;        private var _jamesBrownVideos:Object;        // upqa data        //private var _jamesBrownData:String = '{"status":"success","data":{"total":11,"entries":[{"id":"49","timestamp":"2014-05-21 16:28:12","name":"Chadwick","base_path":"","image_path":"908856e07c6fa01e23732ace70485ceaflv.png","gif_path":"908856e07c6fa01e23732ace70485ceaflv.gif","video_path":"908856e07c6fa01e23732ace70485cea.flv","origin":""},{"id":"48","timestamp":"2014-05-21 16:27:36","name":"Chadwick","base_path":"","image_path":"068a1f7b1d0fb7a7b59ad772b0aed1daflv.png","gif_path":"068a1f7b1d0fb7a7b59ad772b0aed1daflv.gif","video_path":"068a1f7b1d0fb7a7b59ad772b0aed1da.flv","origin":""},{"id":"47","timestamp":"2014-05-21 16:25:42","name":"James Brown","base_path":"","image_path":"e7a564049576a4fa6e7af5c6d2c5fb9bflv.png","gif_path":"e7a564049576a4fa6e7af5c6d2c5fb9bflv.gif","video_path":"e7a564049576a4fa6e7af5c6d2c5fb9b.flv","origin":""},{"id":"46","timestamp":"2014-05-21 16:24:16","name":"James Brown","base_path":"","image_path":"1976cbac89e1e8b0661d1eed7a159134flv.png","gif_path":"1976cbac89e1e8b0661d1eed7a159134flv.gif","video_path":"1976cbac89e1e8b0661d1eed7a159134.flv","origin":""},{"id":"45","timestamp":"2014-05-21 16:23:26","name":"James Brown","base_path":"","image_path":"132f471d8756b288170f788d610b9804flv.png","gif_path":"132f471d8756b288170f788d610b9804flv.gif","video_path":"132f471d8756b288170f788d610b9804.flv","origin":""},{"id":"44","timestamp":"2014-05-21 16:22:28","name":"James Brown","base_path":"","image_path":"cca184436ac174f2ce7520ff79239fa9flv.png","gif_path":"cca184436ac174f2ce7520ff79239fa9flv.gif","video_path":"cca184436ac174f2ce7520ff79239fa9.flv","origin":""},{"id":"43","timestamp":"2014-05-21 16:21:37","name":"James Brown","base_path":"","image_path":"ebd59227e54b03a2bb6cfe8e1984020dflv.png","gif_path":"ebd59227e54b03a2bb6cfe8e1984020dflv.gif","video_path":"ebd59227e54b03a2bb6cfe8e1984020d.flv","origin":""},{"id":"42","timestamp":"2014-05-21 16:20:42","name":"James Brown","base_path":"","image_path":"9088b92a1afa3202e970290a29d23285flv.png","gif_path":"9088b92a1afa3202e970290a29d23285flv.gif","video_path":"9088b92a1afa3202e970290a29d23285.flv","origin":""},{"id":"41","timestamp":"2014-05-21 15:52:11","name":"James Brown","base_path":"","image_path":"0bf91858dcea41ad9d7e1066eda2973bflv.png","gif_path":"0bf91858dcea41ad9d7e1066eda2973bflv.gif","video_path":"0bf91858dcea41ad9d7e1066eda2973b.flv","origin":""},{"id":"40","timestamp":"2014-05-21 15:38:26","name":"James Brown","base_path":"","image_path":"3ac36de46d38b5e669e34bfaca5c1b04flv.png","gif_path":"3ac36de46d38b5e669e34bfaca5c1b04flv.gif","video_path":"3ac36de46d38b5e669e34bfaca5c1b04.flv","origin":""},{"id":"36","timestamp":"2014-05-21 14:37:38","name":"James Brown","base_path":"","image_path":"0bfa3e3b3c3c1574093562c4c7fc6f09flv.png","gif_path":"0bfa3e3b3c3c1574093562c4c7fc6f09flv.gif","video_path":"0bfa3e3b3c3c1574093562c4c7fc6f09.flv","origin":""}]}}';        // live data        private var _jamesBrownData:String = '{"status":"success","data":{"total":11,"entries":[{"id":"13","timestamp":"2014-05-28 17:58:44","name":"Chadwick","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"36cf7a4cad4a42a8a06a4cfc4327cf54flv.png","gif_path":"36cf7a4cad4a42a8a06a4cfc4327cf54flv.gif","video_path":"36cf7a4cad4a42a8a06a4cfc4327cf54.flv","origin":""},{"id":"12","timestamp":"2014-05-28 17:57:57","name":"Chadwick","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"b2c99e8cea49c7983dfabefba87d31cdflv.png","gif_path":"b2c99e8cea49c7983dfabefba87d31cdflv.gif","video_path":"b2c99e8cea49c7983dfabefba87d31cd.flv","origin":""},{"id":"11","timestamp":"2014-05-28 17:56:48","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"6ee2c49334b1863e3a52bd473bb16385flv.png","gif_path":"6ee2c49334b1863e3a52bd473bb16385flv.gif","video_path":"6ee2c49334b1863e3a52bd473bb16385.flv","origin":""},{"id":"10","timestamp":"2014-05-28 17:55:30","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"a03cca2340c928c61205c0811ade79ebflv.png","gif_path":"a03cca2340c928c61205c0811ade79ebflv.gif","video_path":"a03cca2340c928c61205c0811ade79eb.flv","origin":""},{"id":"9","timestamp":"2014-05-28 17:51:24","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"4f62973b105daf9b777387a74182a93eflv.png","gif_path":"4f62973b105daf9b777387a74182a93eflv.gif","video_path":"4f62973b105daf9b777387a74182a93e.flv","origin":""},{"id":"8","timestamp":"2014-05-28 17:49:32","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"89377122730b05168150b342f2443312flv.png","gif_path":"89377122730b05168150b342f2443312flv.gif","video_path":"89377122730b05168150b342f2443312.flv","origin":""},{"id":"7","timestamp":"2014-05-28 17:48:39","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"cc12bd651a7cccbfd78cc68bc44c00b2flv.png","gif_path":"cc12bd651a7cccbfd78cc68bc44c00b2flv.gif","video_path":"cc12bd651a7cccbfd78cc68bc44c00b2.flv","origin":""},{"id":"6","timestamp":"2014-05-28 17:47:34","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"fbedcdd94267228f0cb4e8316c72eadcflv.png","gif_path":"fbedcdd94267228f0cb4e8316c72eadcflv.gif","video_path":"fbedcdd94267228f0cb4e8316c72eadc.flv","origin":""},{"id":"5","timestamp":"2014-05-28 17:40:18","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"f1c8ae416abac6e1fe3cd6f85fd02291flv.png","gif_path":"f1c8ae416abac6e1fe3cd6f85fd02291flv.gif","video_path":"f1c8ae416abac6e1fe3cd6f85fd02291.flv","origin":""},{"id":"4","timestamp":"2014-05-28 17:39:25","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"c9483adc50162f4fee153760c768888eflv.png","gif_path":"c9483adc50162f4fee153760c768888eflv.gif","video_path":"c9483adc50162f4fee153760c768888e.flv","origin":""},{"id":"3","timestamp":"2014-05-28 17:37:12","name":"James Brown","base_path":"https:\/\/bannerassets.universalstudios.com\/up\/cantstopthefunk\/final\/","image_path":"80fc264db67b6269e23e19b107173b1aflv.png","gif_path":"80fc264db67b6269e23e19b107173b1aflv.gif","video_path":"80fc264db67b6269e23e19b107173b1a.flv","origin":""}]}}';        private var _jbVideoInsertionCounter:int;        private var _jbVideoInsertionMax:int = 6;        public function VideoPlayerCarousel()        {            _jbPool = new Queue();            _jamesBrownVideos = com.adobe.serialization.json.JSON.decode(_jamesBrownData);            for(var j:int = 0; j < _jamesBrownVideos.data.entries.length; j++)            {                var entry:Object = _jamesBrownVideos.data.entries[j];                var model:AppUserDataModel = new AppUserDataModel();                    model.userName      = entry.name;                    model.basePath      = entry.base_path;                    model.userImagePath = entry.image_path;                    model.userGifPath   = entry.gif_path;                    model.userVideoPath = entry.video_path;                    model.userOrigin    = entry.origin;                _jbPool.insertInQueue(model);            }            _jbPool.shuffle();//            _httpPlayer = new VideoPlayer(AppConsts.MAX_VIDEO_WIDTH, AppConsts.MAX_VIDEO_HEIGHT, 0);//            _httpPlayer.visible = false;//            _httpPlayer.addEventListener(VideoPlaybackEvent.METADATA_RECEIVED, _handleHttpVideoPlaybackEvent);//            _rtmpPlayer = new VideoPlayer(AppConsts.MAX_VIDEO_WIDTH, AppConsts.MAX_VIDEO_HEIGHT, 0, AppConsts.RTMP);//            _rtmpPlayer.visible = false;//            _rtmpPlayer.addEventListener(VideoPlaybackEvent.METADATA_RECEIVED, _handleRtmpVideoPlaybackEvent);            _slotRotation = new Vector.<VideoSlot>;            _slotPositions = new Vector.<Point>();            var slotHolderOffset:int = 410 + 35;            var _slotPositionGutter:int = 17;            _slotHolder = new Sprite();            _slotHolder.x = (slotHolderOffset - ((AppConsts.MAX_VIDEO_WIDTH + _slotPositionGutter) * 2));            _slotHolder.y = 9;            for(var i:int = 0; i < totalSlots; i++)            {                //  position at 0 is the active video position                _slotPositions.push( new Point( (AppConsts.MAX_VIDEO_WIDTH + _slotPositionGutter) * i, 0 ) );                var slot:VideoSlot = new VideoSlot();                var initialSlotPosition:int = totalSlots - (i + 1);                trace("slot "+ i +' - '+ initialSlotPosition + ' '+ (AppConsts.MAX_VIDEO_WIDTH + _slotPositionGutter) * initialSlotPosition);                slot.slotPosition = initialSlotPosition;                slot.x = (AppConsts.MAX_VIDEO_WIDTH + _slotPositionGutter) * initialSlotPosition;                slot.addEventListener(Event.CHANGE, _handleChangeEvent);                _slotHolder.addChild(slot);                _slotRotation.push(slot);            }//            _httpPlayer.x =//            _rtmpPlayer.x = slotHolderOffset;////            _httpPlayer.y =//            _rtmpPlayer.y = _slotHolder.y;            _nameHolderMasking = new SquareArea(AppConsts.MAX_VIDEO_WIDTH, AppConsts.MAX_VIDEO_HEIGHT, 0xff00ff);            _nameHolderMasking.x = slotHolderOffset;            _nameHolderMasking.y = _slotHolder.y;            _nameHolderMasking.alpha = .2;            _nameHolder = new Sprite();            _nameHolder.visible = false;            _nameHolder.x = _nameHolderMasking.x;            _nameHolder.y = _nameHolderMasking.y;            _nameHolderBg = new SquareArea(AppConsts.MAX_VIDEO_WIDTH + 4, 35, Styling.instance.findColor("red"), false);            _nameHolderBg.x = -2;            _nameHolderBg.y = -5;            _nameHolderBg.rotation = -1;            _nameHolderTf = new DynamicTextField(10, 40, Styling.instance.findFormat('videoNameDisplay'), TextFieldAutoSize.LEFT);            _nameHolderTf.y = 5;            //_nameHolderTf.border = true;            _nameHolderTf.multiline = false;            _nameHolderTf.wordWrap = false;            _nameHolderTf.text = '';            _nameHolder.addChild(_nameHolderBg);            _nameHolder.addChild(_nameHolderTf);            _nameHolder.mask = _nameHolderMasking;            addChild(_slotHolder);//            addChild(_httpPlayer);//            addChild(_rtmpPlayer);            addChild(_nameHolder);            addChild(_nameHolderMasking);        }        private function _handleChangeEvent(event:Event):void        {            changeVideo();        }        public function init():void        {            if(StageReference.instance.stage.getChildAt(0))            {                try                {                    var deeplinkUserData:Object = MovieClip(StageReference.instance.stage.getChildAt(0)).deeplinkUserData;                    if(deeplinkUserData)                        pool.insertInQueue(deeplinkUserData, 0);                }                catch(e:*)                {                    // will only error when in the ide                }            }            var obj:Object = _jbPool.nextInQueue();            pool.insertInQueue(obj, 0);//            var testAppUserData:AppUserDataModel = new AppUserDataModel();//                testAppUserData.userOrigin = AppConsts.WEBCAM_ORIGIN;//                testAppUserData.userVideoPath = '4702111234693087599';//                testAppUserData.userImagePath = '4702111234307211631.png';//                testAppUserData.userGifPath = '4702111234307211631.gif';//                testAppUserData.userName = 'gone again';////            pool.insertInQueue(testAppUserData, 0);            for(var i:int = 2; i < totalSlots; i++)            {                trace('_slotRotation['+i+'] '+_slotRotation[i].x);                _slotRotation[i].setupSlot( AppUserDataModel(pool.nextInQueue()) , i == 2, i == 2);            }            animateIn(true);        }        public function injectUserIntoNextVideoSlot(userData:AppUserDataModel, slotNumber:int):void        {            LiveTrace.output('inject '+userData.toString()+' into slot '+slotNumber);            for each(var slot:VideoSlot in _slotRotation)            {                if(slot.slotPosition == slotNumber)                    slot.setupSlot(userData);            }        }        public function animateIn(initial:Boolean = false):void        {//            if(VideoSlot(_slotRotation[2]).isRtmpVideo)//            {//                _httpPlayer.visible = false;//                _rtmpPlayer.visible = true;//            }//            else//            {//                _httpPlayer.visible = true;//                _rtmpPlayer.visible = false;//            }            if(initial)            {                StageReference.instance.stage.dispatchEvent(new SoundFxEvent(SoundFxEvent.SOUND, 'intro'));                TweenMax.to(this, 1.05, {volume:1, onComplete:function():void{StageReference.instance.stage.dispatchEvent(new SoundFxEvent(SoundFxEvent.SOUND, 'loop'));}});                //_activateSlot(_slotRotation[2]);            }//            else//                changeVideo();        }        public function animateOut():void        {            trace("pause streams on animate out");            pauseRotation();//            _httpPlayer.pauseVideo(true);//            _httpPlayer.closeStream();////            _httpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleHttpVideoPlaybackEvent);//            _httpPlayer.removeEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleHttpVideoPlaybackEvent);//            _httpPlayer.removeEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleHttpVideoPlaybackEvent);//            _httpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleHttpVideoPlaybackEvent);////            _rtmpPlayer.pauseVideo(true);//            _rtmpPlayer.videoDisplay.clearDisplay();//////            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleRtmpVideoPlaybackEvent);//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleRtmpVideoPlaybackEvent);//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleRtmpVideoPlaybackEvent);//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleRtmpVideoPlaybackEvent);        }        public function pauseRotation():void        {//            if(!_activePlayer.isPaused)//                _activePlayer.pauseVideo(true);             for each(var slot:VideoSlot in _slotRotation)             {                 if(slot.active)                 {                     slot.pauseVideo();                 }             }        }        public function unpauseRotation():void        {//           _activePlayer.pauseVideo(false);            for each(var slot:VideoSlot in _slotRotation)            {                if(slot.active)                {                    slot.unpauseVideo();                }            }        }        public function changeVideo():void        {            trace('change video');            _nameHolder.visible = false;//            _httpPlayer.visible = false;//            _httpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleHttpVideoPlaybackEvent);//            _httpPlayer.removeEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleHttpVideoPlaybackEvent);//            _httpPlayer.removeEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleHttpVideoPlaybackEvent);//            _httpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleHttpVideoPlaybackEvent);////            _rtmpPlayer.visible = false;//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleRtmpVideoPlaybackEvent);//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleRtmpVideoPlaybackEvent);//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleRtmpVideoPlaybackEvent);//            _rtmpPlayer.removeEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleRtmpVideoPlaybackEvent);            // populate next video in line            // animate            for each(var slot:VideoSlot in _slotRotation)            {                slot.deactivate();                var nextSlotPosition:int = slot.slotPosition + 1;                if(nextSlotPosition >= totalSlots)                {                    nextSlotPosition = 0;                }                var t:Number = .5;                var endPoint:Point = _slotPositions[nextSlotPosition];                var osFunc:Function = _changeSlotPosition;                var osParam:Array = [slot];                var ocFunc:Function = null;                var ocParams:Array = null;                switch(nextSlotPosition)                {                    // reset position once the slot reaches the zero position                    case totalSlots - 1:                        // check model first so we dont put null objects in the queue.                        // null objects will be present during the initial slot population and caused a hard to find bug.                        if(slot.userDataModel)                        {                            if(slot.isJamesBrownVideo)                                _jbPool.insertInQueue(slot.userDataModel);                            else                                used.insertInQueue(slot.userDataModel);                        }                        break;                    case 0:                        t = 0;                        populateSlotDataModel(slot);                        break;                    case 2://                        ocFunc = _activateSlot;//                        ocParams = [slot];                        break;                }                TweenMax.to(slot,t, {x:endPoint.x, ease:Back.easeOut, onStart:osFunc, onStartParams:osParam, onComplete:ocFunc, onCompleteParams:ocParams});            }        }        private function populateSlotDataModel(slot:VideoSlot):void        {//            LiveTrace.output('pool queue length '+pool.queueLength);//            LiveTrace.output('used queue length '+used.queueLength);            var nextModel:AppUserDataModel;            if(_jbVideoInsertionCounter >= _jbVideoInsertionMax)            {                _jbVideoInsertionCounter = 0;                nextModel = AppUserDataModel(_jbPool.nextInQueue());                slot.setupSlot( nextModel, true );            }            else            {                nextModel = AppUserDataModel(pool.nextInQueue());                if(!nextModel)                {                    nextModel = AppUserDataModel(used.nextInQueue());                }                if(pool.queueLength == 0)                {                    LiveTrace.output('more data needed in the pool. queue length '+pool.queueLength);                    dispatchEvent(new Event(Event.CONNECT));                }                slot.setupSlot( nextModel);            }//            LiveTrace.output('pool queue length '+pool.queueLength);//            LiveTrace.output('used queue length '+used.queueLength);//            LiveTrace.output(nextModel.toString());            _jbVideoInsertionCounter++;        }//        private function _insertDataModelInUsed(slot:VideoSlot):void//        {//            used.insertInQueue(slot.userDataModel);//        }        private function _changeSlotPosition(slot:VideoSlot):void        {            slot.removeEventListener(VideoPlaybackEvent.METADATA_RECEIVED, _handleMetaDataRecievedEvent);            slot.slotPosition++;            if(slot.slotPosition >= totalSlots)            {                slot.slotPosition = 0;                slot.addEventListener(VideoPlaybackEvent.METADATA_RECEIVED, _handleMetaDataRecievedEvent);            }            if(slot.slotPosition == 2)            {                _activateSlot(slot);//                if(slot.userDataModel.userOrigin == AppConsts.WEBCAM_ORIGIN)//                {//                    _activePlayer = slot.rtmpPlayer;//                }//                else//                {//                    _activePlayer = slot.httpPlayer;//                }            }            else            {                slot.deactivate();            }        }        private function _handleMetaDataRecievedEvent(e:VideoPlaybackEvent):void        {            if(VideoSlot(e.target).slotPosition == 0)                dispatchEvent(new AppStepEvent(AppStepEvent.SHOW_NEXT_VIDEO_BUTTON));        }        private function _activateSlot(slot:VideoSlot):void        {            // get slots data model            var userDataModel:AppUserDataModel = slot.userDataModel;            _nameHolderTf.text = slot.userDataModel.userName;            _nameHolderTf.x = AppConsts.MAX_VIDEO_WIDTH - _nameHolderTf.width;            if(slot.userDataModel.userName.length >= 0)                _nameHolder.visible = true;            _nameHolderBg.x = (AppConsts.MAX_VIDEO_WIDTH - (_nameHolderTf.width + 10));            slot.startVideo();//            if(userDataModel.userOrigin != AppConsts.WEBCAM_ORIGIN)//            {//                _activePlayer = slot.rtmpPlayer;//            }//            else//            {//                _activePlayer = slot.httpPlayer;//            }            return;            // play this slots video            if(userDataModel.userOrigin == AppConsts.WEBCAM_ORIGIN)            {                LiveTrace.output('start rtmp video '+userDataModel.userVideoPath);                trace('start rtmp video '+userDataModel.userVideoPath);//                _rtmpPlayer.visible = true;//                _httpPlayer.visible = false;////                _rtmpPlayer.addEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleRtmpVideoPlaybackEvent);//                _rtmpPlayer.addEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleRtmpVideoPlaybackEvent);//                _rtmpPlayer.addEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleRtmpVideoPlaybackEvent);//                _rtmpPlayer.addEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleRtmpVideoPlaybackEvent);//                _rtmpPlayer.changeVolume(0);//                _rtmpPlayer.startVideo(userDataModel.userVideoPath);            }            else            {                var videoPath:String = AppConsts.finalVideoPath + userDataModel.userVideoPath;                trace('start http video '+XMLData.instance.config.@apibaseurl + videoPath);//                _rtmpPlayer.visible = false;//                _httpPlayer.visible = true;//                _httpPlayer.changeVolume(0);//                _httpPlayer.startVideo(XMLData.instance.config.@apibaseurl + videoPath);            }        }//        private function _handleHttpVideoPlaybackEvent(e:VideoPlaybackEvent):void//        {//            switch(e.type)//            {//                case VideoPlaybackEvent.PLAYER_TIME_CHANGE://                    var currentTime:int = Math.floor(_httpPlayer.ns.time);////                    trace(_httpPlayer.percentagePlayed+' of '+_httpPlayer.videoDuration);////                    trace('current time '+currentTime);////                    trace('playerState '+_httpPlayer.playerState);//////                    if(_httpPlayer.videoDuration >= AppConsts.MAX_VIDEO_DURATION && currentTime > AppConsts.VIDEO_CUTOFF_TIME)//                    {//                        _httpPlayer.pauseVideo(true);//                        _httpPlayer.closeStream();////                        changeVideo();//                    }////                    break;////                case VideoPlaybackEvent.METADATA_RECEIVED://                    centerVideo();//                    _httpPlayer.addEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleHttpVideoPlaybackEvent);//                    _httpPlayer.addEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleHttpVideoPlaybackEvent);//                    _httpPlayer.addEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleHttpVideoPlaybackEvent);//                    _httpPlayer.addEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleHttpVideoPlaybackEvent);//                    break;////                case VideoPlaybackEvent.PLAYER_STATE_CHANGE://                    var curState:String = e.playerState;////                    //	possible player states are://                    //	VIDEO_UNSTARTED_STATE			:	player is idle has been setup but no video has been played//                    //	VIDEO_START_STATE				:	player has started a video//                    //	VIDEO_STOP_STATE				:	player has stopped playing a video//                    //	VIDEO_PLAY_STATE				:	player is currently playing a video//                    //	VIDEO_PAUSE_STATE				:	player has paused a video//                    //	VIDEO_COMPLETE_STATE			:	player has completed playing a video//                    //	VIDEO_SCRUB_STATE				:	player is scrubbing through a video//                    //	VIDEO_BUFFERING_START_STATE		:	player has started buffering a video//                    //	VIDEO_BUFFERING_STOP_STATE		:	player has stopped buffering a video//                    switch(curState){//                        case VideoPlayer.VIDEO_UNSTARTED_STATE://                            break;////                        case VideoPlayer.VIDEO_COMPLETE_STATE://                            changeVideo();//                            break;////                        case VideoPlayer.VIDEO_PLAY_STATE://                            break;////                        case VideoPlayer.VIDEO_PAUSE_STATE://                            break;////                        case VideoPlayer.VIDEO_BUFFERING_START_STATE://                            //trace('show buffer');//                            break;////                        case VideoPlayer.VIDEO_BUFFERING_STOP_STATE:////                            trace('hide buffer');//                            break;//                    }//                    break;//////            }//////        }//        private function centerVideo():void//        {////        }//        private function _handleRtmpVideoPlaybackEvent(e:VideoPlaybackEvent):void//        {//            switch(e.type)//            {//                case VideoPlaybackEvent.PLAYER_TIME_CHANGE://                    var currentTime:int = Math.floor(_rtmpPlayer.ns.time);//                    trace(_rtmpPlayer.percentagePlayed+' of '+_rtmpPlayer.videoDuration);//                    trace('current time '+currentTime);//                    trace('playerState '+_rtmpPlayer.playerState);//////                    if(_rtmpPlayer.videoDuration >= AppConsts.MAX_VIDEO_DURATION && currentTime > AppConsts.VIDEO_CUTOFF_TIME)//                    {//                        _rtmpPlayer.pauseVideo(true);//                        //_rtmpPlayer.closeStream();////                        changeVideo();//                    }////                    break;////                case VideoPlaybackEvent.METADATA_RECEIVED://                    trace('_rtmpPlayer.playerState '+_rtmpPlayer.playerState);//                    centerVideo();//////                    if(         _rtmpPlayer.playerState == VideoPlayer.VIDEO_UNSTARTED_STATE////                            || _rtmpPlayer.playerState == VideoPlayer.VIDEO_PAUSE_STATE////                            || _rtmpPlayer.playerState == VideoPlayer.VIDEO_BUFFERING_STOP_STATE////                    ){//                        _rtmpPlayer.pauseVideo(false);////                    }//////                    _rtmpPlayer.addEventListener(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _handleRtmpVideoPlaybackEvent);////                    _rtmpPlayer.addEventListener(VideoPlaybackEvent.INVALID_FORMAT, _handleRtmpVideoPlaybackEvent);////                    _rtmpPlayer.addEventListener(VideoPlaybackEvent.FILE_NOT_FOUND, _handleRtmpVideoPlaybackEvent);////                    _rtmpPlayer.addEventListener(VideoPlaybackEvent.PLAYER_TIME_CHANGE, _handleRtmpVideoPlaybackEvent);//                    break;////                case VideoPlaybackEvent.PLAYER_STATE_CHANGE://                    var curState:String = e.playerState;////                    //	possible player states are://                    //	VIDEO_UNSTARTED_STATE			:	player is idle has been setup but no video has been played//                    //	VIDEO_START_STATE				:	player has started a video//                    //	VIDEO_STOP_STATE				:	player has stopped playing a video//                    //	VIDEO_PLAY_STATE				:	player is currently playing a video//                    //	VIDEO_PAUSE_STATE				:	player has paused a video//                    //	VIDEO_COMPLETE_STATE			:	player has completed playing a video//                    //	VIDEO_SCRUB_STATE				:	player is scrubbing through a video//                    //	VIDEO_BUFFERING_START_STATE		:	player has started buffering a video//                    //	VIDEO_BUFFERING_STOP_STATE		:	player has stopped buffering a video//                    switch(curState){//                        case VideoPlayer.VIDEO_UNSTARTED_STATE://                            break;////                        case VideoPlayer.VIDEO_COMPLETE_STATE://                            changeVideo();//                            break;////                        case VideoPlayer.VIDEO_PLAY_STATE://                            break;////                        case VideoPlayer.VIDEO_PAUSE_STATE://                            break;////                        case VideoPlayer.VIDEO_BUFFERING_START_STATE:////                            trace('show buffer');//                            break;////                        case VideoPlayer.VIDEO_BUFFERING_STOP_STATE://                            trace('hide buffer');////                            _rtmpPlayer.pauseVideo();//                            break;////                        case VideoPlayer.VIDEO_STOP_STATE://                            changeVideo();//                            break;//                    }//                    break;//////            }//////        }    }}
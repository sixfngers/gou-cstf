package com.site.app.steps{	//	imports    import com.davidcaneso.events.framework.SiteManagerEvent;    import com.davidcaneso.singletons.StageReference;    import com.greensock.*;    import com.greensock.easing.*;    import com.greensock.plugins.MotionBlurPlugin;    import com.greensock.plugins.TweenPlugin;    import com.site.app.AppStep;import com.site.app.AppStepEvent;import flash.display.MovieClip;    import flash.events.MouseEvent;    TweenPlugin.activate([MotionBlurPlugin]);    public class VideoRecordingTypeSelectionStep extends AppStep	{		//	properties        private var _content:MovieClip;				//	constructor		public function VideoRecordingTypeSelectionStep(devMode:Boolean = false):void		{            _content =  new videoRecordingTypeSelectionStageContent() as MovieClip;            _content.stepHeader.tf.text = '';            addChild(_content);            super(devMode);            _content.uploadButton.tf.text = 'SKIP TO UPLOAD';            _content.uploadButton.buttonMode = true;            _content.uploadButton.mouseChildren = false;            _content.uploadButton.addEventListener(MouseEvent.ROLL_OVER, _handleButtonInteract);            _content.uploadButton.addEventListener(MouseEvent.ROLL_OUT, _handleButtonInteract);            _content.uploadButton.addEventListener(MouseEvent.CLICK, _handleButtonInteract);            _content.webcamButton.tf.text = 'USE WEBCAM';            _content.webcamButton.buttonMode = true;            _content.webcamButton.mouseChildren = false;            _content.webcamButton.addEventListener(MouseEvent.ROLL_OVER, _handleButtonInteract);            _content.webcamButton.addEventListener(MouseEvent.ROLL_OUT, _handleButtonInteract);            _content.webcamButton.addEventListener(MouseEvent.CLICK, _handleButtonInteract);            _content.prevStep.buttonMode = true;            _content.prevStep.mouseChildren = false;            _content.prevStep.addEventListener(MouseEvent.ROLL_OVER, _handlePrevNextInteract);            _content.prevStep.addEventListener(MouseEvent.ROLL_OUT, _handlePrevNextInteract);            _content.prevStep.addEventListener(MouseEvent.CLICK, _handlePrevNextInteract);            _content.nextStep.visible = false;            _content.nextStep.buttonMode = true;            _content.nextStep.mouseChildren = false;            _content.nextStep.addEventListener(MouseEvent.ROLL_OVER, _handlePrevNextInteract);            _content.nextStep.addEventListener(MouseEvent.ROLL_OUT, _handlePrevNextInteract);            _content.nextStep.addEventListener(MouseEvent.CLICK, _handlePrevNextInteract);        }        private function _handleButtonInteract(e:MouseEvent):void        {            var mc:MovieClip = _content.webcamButton;            if(e.target == _content.uploadButton)                mc = _content.uploadButton;            switch(e.type)            {                case MouseEvent.ROLL_OVER:                    TweenMax.to(mc.tf,.2, {tint:0x000000, ease:Quad.easeOut});                    break;                case MouseEvent.ROLL_OUT:                    TweenMax.to(mc.tf,.2, {removeTint:true, ease:Quad.easeOut});                    break;                case MouseEvent.CLICK:                    if(mc == _content.uploadButton)                        _exitEventParam = AppStepEvent.UPLOAD_STEP;                    else                        _exitEventParam = AppStepEvent.WEBCAM_RECORD_STEP;                    _handleNextStepClick(null);                    break;            }        }        private function _handlePrevNextInteract(e:MouseEvent):void        {            var mc:MovieClip = _content.nextStep;            if(e.target == _content.prevStep)                mc = _content.prevStep;            switch(e.type)            {                case MouseEvent.ROLL_OVER:                    TweenMax.to(mc.arrow,.2, {tint:0x000000, ease:Quad.easeOut});                    break;                case MouseEvent.ROLL_OUT:                    TweenMax.to(mc.arrow,.2, {removeTint:true, ease:Quad.easeOut});                    break;                case MouseEvent.CLICK:                    if(mc == _content.nextStep)                        _handleNextStepClick(null);                    else                        _handlePrevStepClick(null);                    break;            }        }				override public function animateIn():void		{			this.alpha = 1;			this.visible = true;						StageReference.instance.stage.addEventListener(SiteManagerEvent.SITE_STATE_UPDATE, handleSiteStateUpdate);		}				override protected function _animateInComplete():void {}		override protected function _animateOut():void		{            super._animateOut();            this.alpha = 0;            this.visible = false;            _animateOutComplete();		}				override protected function _animateOutComplete():void		{			super._animateOutComplete();		}			}	}
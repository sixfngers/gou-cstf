package com.site.sections{    import com.davidcaneso.framework.Section;import com.davidcaneso.framework.SimpleLink;import com.davidcaneso.singletons.StageReference;import com.davidcaneso.singletons.XMLData;import com.davidcaneso.sound.SfxController;import com.davidcaneso.sound.events.SoundFxEvent;import com.davidcaneso.utils.LiveTrace;import com.davidcaneso.utils.StringUtils;import com.greensock.TweenMax;import com.greensock.easing.Quad;import com.site.AppUser;    import com.site.app.*;    import com.site.app.AppStepEvent;    import com.site.app.steps.*;    import com.site.app.steps.CarouselStep;    import flash.display.MovieClip;    import flash.display.Stage;    import flash.events.Event;    [SWF(backgroundColor=0xffffff, frameRate=30, width=1024, height=768)]    public class AppSteps extends Section	{        private var _content:MovieClip;        private var _user:AppUser;        private var _carouselStep:AppStep;        private var _instructionsStep:AppStep;		private var _recordingTypeSelectionStep:AppStep;		private var _videoUploadStep:AppStep;        private var _videoRecordStep:AppStep;        private var _videoVerificationStep:AppStep;        private var _shareStep:AppStep;        private var _submissionStep:AppStep;        private var _soundController:SfxController;        public var sfxVolume:Number = 1;        public var _isMuted:Boolean = false;        public var _unmuteOnReturn:Boolean = false;        public function AppSteps()		{			// constructor code			_className 			= 'AppSteps';			_devSectionNumber	= 0;			_devConfigFile		= '../../assets/data/siteConfig.xml';			_showTraces 		= false;			//	uncomment the _showTraces var on the line below to activate traces for this section			_showTraces = true;		}		//mandatory override methods		override protected function setup():void		{            _soundController = new SfxController();            _soundController.addLibraryEffect("intro", new introSound());            _soundController.addLibraryEffect("loop", new loopSound());            StageReference.instance.stage.addEventListener(SoundFxEvent.SOUND, _handelSoundEvent);            StageReference.instance.stage.addEventListener(AppStepEvent.LEARN_MOVES, _handleLearnMovesEvent);            StageReference.instance.stage.addEventListener(AppStepEvent.CLOSE_LEARN_MOVES, _handleLearnMovesEvent);            StageReference.instance.stage.addEventListener(AppStepEvent.SOUND_TOGGLE, _handleSoundToggle);            _content = new appStepsStageContent() as MovieClip;            addChild(_content);            StageReference.instance.stage.addEventListener(AppStepEvent.START_APP, _handleStartApp);            _user = AppUser.instance;            classTrace('dev ' + super._dev);            LiveTrace.output('upload sequence url '+AppConsts.uploadImageSequenceScriptUrl);            _carouselStep = new CarouselStep(super._dev);            _carouselStep.y = 17;            //_carouselStep.addEventListener(AppStep.PREV_STEP_EVENT_TYPE, _prevStep);            _carouselStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            _carouselStep.animateIn();            _instructionsStep = new InstructionStep(super._dev);            _instructionsStep.addEventListener(AppStepEvent.PREV_STEP_EVENT_TYPE, _prevStep);            _instructionsStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            //_instructionsStep.animateIn();            _recordingTypeSelectionStep = new VideoRecordingTypeSelectionStep(super._dev);            _recordingTypeSelectionStep.addEventListener(AppStepEvent.PREV_STEP_EVENT_TYPE, _prevStep);            _recordingTypeSelectionStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            //_recordingTypeSelectionStep.animateIn();            _videoUploadStep = new UploadFileStep(super._dev);            _videoUploadStep.addEventListener(AppStepEvent.PREV_STEP_EVENT_TYPE, _prevStep);            _videoUploadStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            //_videoUploadStep.animateIn();            _videoRecordStep = new VideoRecordStep(super._dev);            _videoRecordStep.addEventListener(AppStepEvent.PREV_STEP_EVENT_TYPE, _prevStep);            _videoRecordStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            //_videoRecordStep.animateIn();            _videoVerificationStep = new VideoVerificationStep(super._dev);            _videoVerificationStep.addEventListener(AppStepEvent.PREV_STEP_EVENT_TYPE, _prevStep);            _videoVerificationStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            //_videoVerificationStep.animateIn();            _submissionStep = new VideoSubmissionStep(super._dev);            _submissionStep.addEventListener(AppStepEvent.PREV_STEP_EVENT_TYPE, _prevStep);            _submissionStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            //_submissionStep.animateIn();            _shareStep = new ShareStep(super._dev);            //_shareStep.addEventListener(AppStep.PREV_STEP_EVENT_TYPE, _prevStep);            _shareStep.addEventListener(AppStepEvent.NEXT_STEP_EVENT_TYPE, _nextStep);            _shareStep.addEventListener(ShareEvent.SHARE, _handleShareEvent);            //_shareStep.animateIn();			var _stepContainer:MovieClip = new MovieClip();                _stepContainer.addChild(_carouselStep);                _stepContainer.addChild(_instructionsStep);                _stepContainer.addChild(_recordingTypeSelectionStep);                _stepContainer.addChild(_videoUploadStep);                _stepContainer.addChild(_videoRecordStep);                _stepContainer.addChild(_videoVerificationStep);                _stepContainer.addChild(_submissionStep);                _stepContainer.addChild(_shareStep);            appStepsStageContent(_content).content.addChild(_stepContainer);			handleResize();			StageReference.instance.stage.addEventListener(Event.RESIZE, handleResize);		}        private function _handleSoundToggle(e:AppStepEvent):void        {            if(_isMuted)            {                _unmuteVolume();            }            else            {                _muteVolume();            }        }        private function _handleLearnMovesEvent(e:AppStepEvent):void        {            if(_isActive)            {                if(e.type == AppStepEvent.LEARN_MOVES)                {                    if(_isMuted)                        return;                    else                    {                        _unmuteOnReturn = true;                        _muteVolume();                    }                }                else                {                    if(_unmuteOnReturn)                    {                        _unmuteVolume();                    }                    _unmuteOnReturn = false;                }            }        }        private function _muteVolume():void        {            StageReference.instance.stage.dispatchEvent(new AppStepEvent(AppStepEvent.SOUND_MUTED));            _isMuted = true;            TweenMax.to(this, 1,{sfxVolume:0, onUpdate:_updateVolume, ease:Quad.easeOut});        }        private function _unmuteVolume():void        {            StageReference.instance.stage.dispatchEvent(new AppStepEvent(AppStepEvent.SOUND_UNMUTED));            _isMuted = false;            TweenMax.to(this, 1,{sfxVolume:1, onUpdate:_updateVolume, ease:Quad.easeOut});        }        private function _updateVolume():void        {            try            {                _soundController.changeVolume(sfxVolume);            }            catch(e:*)            {                 LiveTrace.output(e.toString());            }        }        private function _handelSoundEvent(event:SoundFxEvent):void        {            switch(event.soundName)            {                case "intro":                    try                    {                        _soundController.playEffect(event.soundName);                    }                    catch(e:Error)                    {                        LiveTrace.output(e.toString());                    }                    break;                case "loop":                    try                    {                        _soundController.playEffect(event.soundName, 1, 0, -1);                    }                    catch(e:Error)                    {                        LiveTrace.output(e.toString());                    }                    break;            }        }        private function _handleStartApp(e:AppStepEvent):void        {            if(CarouselStep(_carouselStep).isActive)                CarouselStep(_carouselStep).startApp();        }        private function _handleShareEvent(e:ShareEvent):void        {            var urlstr:String;            var apibaseurl:String = XMLData.instance.config.@apibaseurl;            var deeplinkUrl:String = apibaseurl + AppConsts.DL_PARAM + AppUser.dataModel.id;            var usersShareGifUrl:String = apibaseurl + AppConsts.gifPath + AppUser.dataModel.userShareGifPath;            if(AppUser.dataModel.basePath.length > 0)            {                usersShareGifUrl = AppUser.base_path + AppConsts.GIF_DIR + AppUser.dataModel.userShareGifPath;            }            LiveTrace.output('share id '+AppUser.dataModel.id);            switch(e.shareType)            {                case ShareEvent.PINTREST:                    var pinShareUrl:String = 'http://www.pinterest.com/pin/create/button/?';                    var pinimageParam:String = 'media=';                    var pinUrlParam:String = '&url=';                    var pinDescriptionParam:String = '&description=';                    //var pinDescription:String = "I just added my video to CAN'T STOP THE FUNK!, dancing along with the one and only James Brown! Join in the celebration!";                    var pinDescription:String = XMLData.instance.config.socialtext.pintrest;                    urlstr = pinShareUrl + pinimageParam + StringUtils.escapeHashesAndSlashes(escape(usersShareGifUrl)) + pinUrlParam + StringUtils.escapeHashesAndSlashes(escape(deeplinkUrl)) + pinDescriptionParam + StringUtils.escapeHashesAndSlashes(escape(pinDescription));//                    http://www.pinterest.com/pin/create/button/?//                    media=http%3A%2F%2Fhandheldpress.net%2Fapi%2Fuploads%2Ffinal%2Fgif%2F3ed0f6937e2f3ac012328a2214e56c02mov.gif//                    &url=dev.bpginteractive.com%2Funiversal%2Fgetonup%3Fid%3D99//                    &description=test%20-%20description                    SimpleLink.linkOut(urlstr);                    break;                case ShareEvent.TWITTER:                    var twitterShareUrl:String = 'https://twitter.com/intent/tweet?text=';                    var prefix:String = XMLData.instance.config.socialtext.twitter.prefix;                    var suffix:String = XMLData.instance.config.socialtext.twitter.suffix;                    urlstr = twitterShareUrl + StringUtils.escapeHashesAndSlashes(prefix + deeplinkUrl + suffix);                    LiveTrace.output('twitter '+urlstr);                    SimpleLink.linkOut(urlstr);                    break;                case ShareEvent.TUMBLR:                    var tumblrShareUrl:String = "http://www.tumblr.com/share/photo?";                    var sourceParam:String = 'source=';                    var captionParam:String = '&caption=';                    var linkParam:String = '&click_thru=';                    //var caption:String = "I just added my video to CAN'T STOP THE FUNK!, dancing along with the one and only James Brown! Join in the celebration!";                    var caption:String = XMLData.instance.config.socialtext.tumblr;                    urlstr = tumblrShareUrl + sourceParam + StringUtils.escapeHashesAndSlashes(escape(usersShareGifUrl)) + captionParam + StringUtils.escapeHashesAndSlashes(escape(caption)) + linkParam + StringUtils.escapeHashesAndSlashes(escape(deeplinkUrl));                    LiveTrace.output('tumblr share '+urlstr);                    SimpleLink.linkOut(urlstr);                    break;                case ShareEvent.GOOGLE:                    LiveTrace.output('google');                    var googleShareUrl:String = "https://plus.google.com/share?";                    var googleLinkParam:String = 'url=';                    urlstr = googleShareUrl + googleLinkParam + StringUtils.escapeHashesAndSlashes(escape(deeplinkUrl));                    LiveTrace.output('google share '+urlstr);                    SimpleLink.linkOut(urlstr);                    break;                case ShareEvent.FACEBOOK:                    LiveTrace.output('facebook');                    SimpleLink.linkOut('https://www.facebook.com/sharer.php?u='+deeplinkUrl);                    break;            }        }        private function _prevStep(e:AppStepEvent):void        {            switch(e.target)            {                case _carouselStep:                    break;                case _instructionsStep:                    StageReference.instance.stage.dispatchEvent(new AppStepEvent(AppStepEvent.SHOW_SEARCH));                    _carouselStep.animateIn();                    break;                case _recordingTypeSelectionStep:                    _instructionsStep.animateIn();                    break;                case _videoUploadStep:                case _videoRecordStep:                case _videoVerificationStep:                case _submissionStep:                    _recordingTypeSelectionStep.animateIn();                    break;                case _shareStep:                    break;            }        }        private function _nextStep(e:AppStepEvent):void        {            trace('AppSteps: next step '+e.type);            var changeEvent:AppStepEvent = new AppStepEvent(AppStepEvent.ACTIVE_STEP_UPDATE);            classTrace('next step');            switch(e.target)            {                case _carouselStep:                    _instructionsStep.animateIn();                    changeEvent.param = 'carousel';                    StageReference.instance.stage.dispatchEvent(changeEvent);                    break;                case _instructionsStep:                    _recordingTypeSelectionStep.animateIn();                    changeEvent.param = 'carousel';                    StageReference.instance.stage.dispatchEvent(changeEvent);                    break;                case _recordingTypeSelectionStep:                    if(e.param == AppStepEvent.UPLOAD_STEP)                        _videoUploadStep.animateIn();                    else if(e.param == AppStepEvent.WEBCAM_RECORD_STEP)                        _videoRecordStep.animateIn();                    break;                case _videoUploadStep:                case _videoRecordStep:                    _videoVerificationStep.animateIn();                    break;                case _videoVerificationStep:                    _submissionStep.animateIn();                    break;                case _submissionStep:                    _shareStep.animateIn();                    break;                case _shareStep:                    StageReference.instance.stage.dispatchEvent(new AppStepEvent(AppStepEvent.SHOW_SEARCH));                    _carouselStep.animateIn();                    break;            }        }		override protected function animateIn():void		{            LiveTrace.output('///////////////////// appSteps animate in here here here here/////////////////////')			TweenMax.to(this, 1, {autoAlpha:1, onComplete:animateInComplete})		}        private function animateInComplete():void        {            super.sectionAnimateInComplete();        }		override protected function animateOut():void        {            TweenMax.to(this, 1, {autoAlpha:0, onComplete:animateOutComplete})		}        private function animateOutComplete():void        {            super.sectionAnimateOutComplete();        }		override public function destroy():void		{			classTrace('hit destroy');			super.destroy();		}        override protected function sleep():void		{            var appStepEvent:AppStepEvent = new AppStepEvent(AppStepEvent.SLEEP_APP);            StageReference.instance.stage.dispatchEvent(appStepEvent);            TweenMax.to(this, 1,{sfxVolume:0, onUpdate:_updateVolume, ease:Quad.easeOut});        }        override protected function wake():void		{            var appStepEvent:AppStepEvent = new AppStepEvent(AppStepEvent.WAKE_APP);            StageReference.instance.stage.dispatchEvent(appStepEvent);            if(!_isMuted)            {                TweenMax.to(this, 1,{sfxVolume:1, onUpdate:_updateVolume, ease:Quad.easeOut});            }		}				private function handleResize(e:Event = null):void		{ 			var s:Stage = StageReference.instance.stage;            var w:int = s.stageWidth;            _content.masking.x =            _content.content.x = int((w - 1024) * .5);		}	}}
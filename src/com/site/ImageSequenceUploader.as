package com.francis{	import com.adobe.images.PNGEncoder;	import com.davidcaneso.display.buttons.TestButton;	import com.davidcaneso.utils.LiveTrace;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLLoaderDataFormat;	import flash.net.URLVariables;	import flash.utils.ByteArray;	import com.francis.Global;	import flash.utils.Timer;	import flash.events.TimerEvent;	import ru.inspirit.net.MultipartURLLoader;	import com.squareplease.CustomEvent;	import nochump.util.zip.ZipEntry;	import nochump.util.zip.ZipOutput;	public class ImageSequenceUploader extends MovieClip	{		//	check to see if the file is running in the ide, as the php scripts will fail unless running on a server with php		private var _devMode:Boolean = false;		//	loader used to upload the files		private var _ml:MultipartURLLoader;		private var _phpSaveImagesScript:String = './uploadBatchedSequence.php';		private var _phpFileCreationScript:String = './initializeStructure.php';		//	number of images in each splice		private var _spliceImageLengths:Array;		//	sum of all the _spliceImageLengths		private var _totalFiles:int;		//	keep track of where in the current splices you are		private var _currentSplice:int = 0;		//	keep track of the current splice image. resets to 0 when you move to another splice		private var _currentSpliceImage:int = 0;		//	keep track of how many files have been uploaded so we can show progress to the user		private var _uploadCounter:int = 0;		//	user name used to create the file structure save here for easy access		private var _userName:String;		//	timestamp returned from the php script used to create the job folder structure		private var _timeStamp:String;				private var _imageSequenceZip:ZipOutput;		private var _dummyTimer:Timer;				private var images:Array;		private var imageCurrent;				//temp		private var prefix = ["SpliceA_", "SpliceB_", "SpliceC_", "SpliceD_"];		public function ImageSequenceUploader(userName, withImages, withSpliceImageLengths)		{			images = withImages;			_spliceImageLengths = withSpliceImageLengths;			// = [3, 6, 2]			//	check to see if we are running in the ide or environment where the php scripts will fail			//if(this.loaderInfo.url.indexOf('file://') >= 0)				//_devMode = true;			for each(var amount:int in _spliceImageLengths)			{				_totalFiles += amount;			}			_ml = new MultipartURLLoader();			_ml.dataFormat = URLLoaderDataFormat.BINARY;			_dummyTimer = new Timer(100, 1);			_dummyTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _handleDummyTimerComplete);			//squareplease			_createFileStructure(userName);		}		public function fullReset():void		{			//_userName = '';			_timeStamp = '';			_uploadCounter = 0;			_currentSplice = 0;			_currentSpliceImage = 0;		}		public function _createFileStructure(userName:String):void		{			_userName = userName;			if(_devMode)			{				// replace this with a trace you do not want runtime errors when testing in the ide.				throw new Error('Files will not save in dev mode run in a browser if you want to see this in action');				//trace('Files will not save in dev mode run in a browser if you want to see this in action');			}			_ml.addEventListener(Event.COMPLETE, _onCreateFileStructureComplete);			//	this should be the users facebook userId			_ml.addVariable('un', _userName);			_ml.addVariable('nd', _spliceImageLengths.length);			_ml.load(_phpFileCreationScript);		}		private function makePaddedNumberFrom(number:int, width:int):String {		   var ret:String = ""+number;		   while( ret.length < width )			   ret="0" + ret;		   return ret;		}		public function startSavingSpliceImages():void		{			_movePlayheadToNextFrameForExport();			_imageSequenceZip = new ZipOutput();			_saveAndUploadFile();			//_movePlayheadToNextFrameForExport();			//_saveAndUploadFile();		}		private function _saveAndUploadFile():void		{			if(_devMode)			{				// replace this with a trace you do not want runtime errors when testing in the ide.				throw new Error('Files will not save in dev mode run in a browser if you want to see this in action');				//trace('Files will not save in dev mode run in a browser if you want to see this in action');			}						//new			//	filename arbitrary and can be anything you want			//	the php will use fileName and append an underscore and the index number on the end of the file as well as the .png extension						//temp			var prefixCurrent = prefix[_currentSplice];			var fileName:String = prefixCurrent+makePaddedNumberFrom(_currentSpliceImage+1, 3)+'.png';						//var fileName:String = 'videosequenceimage_'+makePaddedNumberFrom(_currentSpliceImage+1, 3)+'.png';				var bmp:Bitmap = _createBitmapFromTarget(imageCurrent);			var data:ByteArray = PNGEncoder.encode(bmp.bitmapData);				bmp.bitmapData.dispose();				var entry:ZipEntry = new ZipEntry(fileName);			_imageSequenceZip.putNextEntry(entry);			_imageSequenceZip.write(data);			_imageSequenceZip.closeEntry();				_currentSpliceImage++;				if(_currentSpliceImage >= _spliceImageLengths[_currentSplice])			{				_imageSequenceZip.finish();				LiveTrace.output('load batched file');				_loadBatchedFile();			}			else			{				_movePlayheadToNextFrameForExport();				_pauseToAvoidLockup();			}		}				private function _pauseToAvoidLockup():void		{			_dummyTimer.reset();			_dummyTimer.start();		}	private function _handleDummyTimerComplete(e:TimerEvent):void	{		_saveAndUploadFile();	}	private function _loadBatchedFile():void	{		var file:ByteArray = _imageSequenceZip.byteArray;		_ml.addEventListener(Event.COMPLETE, _onLoaderComplete);		_ml.addFile(file, 'imageSequenceBatch');		//	this should be the users facebook userId		_ml.addVariable('un', _userName);		// timestamp that was returned to you from the initializeStructure php call		_ml.addVariable('ts', _timeStamp);		_ml.addVariable('sd', _currentSplice);		_ml.load(_phpSaveImagesScript);	}		private function _createBitmapFromTarget(target):Bitmap		{			var width:int = target.width;			var height:int = target.height;			var bmpData:BitmapData = new BitmapData(width, height, true, 0);			var bmp:Bitmap = new Bitmap(bmpData, 'auto', true);			bmpData.draw(target);			return bmp;		}		private function _onCreateFileStructureComplete(e:Event):void		{			_ml.removeEventListener(Event.COMPLETE, _onCreateFileStructureComplete);			var returned:URLVariables = new URLVariables(MultipartURLLoader(e.target).loader.data.toString());			var success:String = String(returned.success);			// stupid urlVariables wont cast to boolean correctly			// we have to check against the string 'true' otherwise it will always be true			if(success == 'true')			{				LiveTrace.output('onCreateFileStructureComplete: success');				_timeStamp = returned.ts;				Global.props.timeStamp = _timeStamp;				startSavingSpliceImages();			}			else			{				LiveTrace.output('onCreateFileStructureComplete: failure');				trace('all is lost if this didnt work');			}		}		private function _onLoaderComplete(e:Event):void		{			LiveTrace.output('onLoaderComplete');			_ml.removeEventListener(Event.COMPLETE, _onLoaderComplete);				var returned:URLVariables = new URLVariables(MultipartURLLoader(e.target).loader.data.toString());			var success:String = String(returned.success);				// stupid urlVariables wont cast to boolean correctly			// we have to check against the string 'true' otherwise it will always be true			if(success == 'true')			{				_uploadCounter++;				_updateLoaderProgress();				_moveOnToNextSplice();			}			else			{				LiveTrace.output(success);			}		}		private function _movePlayheadToNextFrameForExport():void		{			// 	do what you need to in order to move onto the next image to export for the current splice			//	prob a goToAndStop			// simple rotation so the images saved out are different			//_testImageContainer.getChildAt(0).rotation = _currentSpliceImage * 5;			imageCurrent = images[_currentSplice][_currentSpliceImage];		}		private function _updateLoaderProgress():void		{			//	you can display a percentage or any sort of update to the user here			LiveTrace.output(_uploadCounter + ' of ' + _totalFiles + ' files uploaded');		}		private function _moveOnToNextSplice():void		{			_imageSequenceZip = new ZipOutput();			_currentSpliceImage = 0;			_currentSplice++;			if(_currentSplice >= _spliceImageLengths.length)			{				_allSpliceImagesUploaded();			}			else			{				//	start uploading that splices images				LiveTrace.output('next splice');								_movePlayheadToNextFrameForExport();				_saveAndUploadFile();			}		}		private function _allSpliceImagesUploaded():void		{			//	hooray			LiveTrace.output('hooray all files uploaded');			fullReset();						dispatchEvent(new CustomEvent("ImageSequenceUploaderFinished", {}, true));		}	}}
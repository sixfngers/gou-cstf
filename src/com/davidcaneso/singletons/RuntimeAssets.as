//testpackage com.davidcaneso.singletons{	import com.davidcaneso.collections.List;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.errors.IllegalOperationError;	public class RuntimeAssets	{		private static var _instance:RuntimeAssets;		private var _assets:List;		public static function get instance():RuntimeAssets		{			if (! RuntimeAssets._instance)			{				RuntimeAssets._instance = new RuntimeAssets(new PrivateClass  );			}			return RuntimeAssets._instance;		}		public function RuntimeAssets(pvt:PrivateClass):void		{			if (! pvt)			{				throw new IllegalOperationError("You may not instantiate this Singleton class directly.  Please use the static getter RuntimeAsset.instance");			}			else			{				_assets = new List  ;			}		}		public function addAsset(name:String,val: * ):Boolean		{			return _assets.addToList(name,val);		}		public function findAsset(name:String):*		{			var returnVal:* = _assets.findInList(name);			if ((returnVal == null))			{				returnVal = new Sprite  ;			}			return returnVal;		}		public function addImageAsset(name:String,val:DisplayObjectContainer):Boolean		{			return addAsset(name,val);		}		public function findAssetAsBitmapData(name:String):BitmapData		{			var obj:* = findAsset(name);			var objBitmapData:BitmapData;			if (((obj != null) && obj is DisplayObjectContainer))			{				//trace('get bitmap data from object')				objBitmapData = new BitmapData(obj.width,obj.height,true,0);				objBitmapData.draw(obj);			}			else			{				objBitmapData = new BitmapData(100,100,true,0);			}			return objBitmapData;		}		//duplicateAsset method		//keeps the asset in the list for future use and returns a bitmap of the asset		public function duplicateAsset(assetName:String):Bitmap		{			var bmpData:BitmapData = findAssetAsBitmapData(assetName);			return new Bitmap(bmpData);		}		public function displayAssetNames():void		{			trace(_assets.displayListString());		}		public function displayAssetObjects():void		{			trace(_assets.displayListObject());		}	}}//Singleton Enforcerclass PrivateClass { }
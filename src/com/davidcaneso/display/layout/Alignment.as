/*	author		: 	David Caneso	contact		:	david@davidcaneso.com	version		:	1.0	date		:	02/18/11	changeLog	:	v_1.0	ported from as2 class					DESCRIPTION	: 	Aligns any display object with another.					The alignment occurs according to the registration point of the object					An offsetX and offsetY parameter can be used to adjust the alignment position					TODO		:					USAGE		:	Alignment.align(objectToMove, alignWith, alignmentType, offsetX, offsetY)										@objectToMove 	- the object you want to move					@alignWith 		- the object whose coordinates you want to use to align the object to move					@alignmentType	- static vars describing the type of alignment									- 	TOP										TOP_LEFT										TOP_CENTER										TOP_RIGHT										CENTER										CENTER_LEFT										CENTER_RIGHT										BOTTOM										BOTTOM_LEFT										BOTTOM_CENTER										BOTTOM_RIGHT										LEFT										RIGHT					@offsetX		- in many cases the registration point does not represent the position you wish to align to									  offsetX will be added to the horizontal position of the object									  a negitive number will offset the alignment to the left									  a positive number will offset the alignment to the right					@offsetY		- same as offsetX but effecting the vertical positioning									  a negitive number will offset the alignment to up									  a positive number will offset the alignment to down				EXAMPLE		:	copy paste the code below into a new flash document										import com.davidcaneso.layout.Alignment										var tf:TextField = new TextField()					tf.width = 300;					tf.height = 30					tf.border = true					addChild(tf)										var currentAlignment:int = -1					var alignmentType:Array = [	Alignment.TOP												,Alignment.TOP_LEFT												,Alignment.TOP_CENTER												,Alignment.TOP_RIGHT												,Alignment.CENTER												,Alignment.CENTER_LEFT												,Alignment.CENTER_RIGHT												,Alignment.BOTTOM												,Alignment.BOTTOM_LEFT												,Alignment.BOTTOM_CENTER												,Alignment.BOTTOM_RIGHT												,Alignment.LEFT												,Alignment.RIGHT											]															var sq0Shape:Shape = new Shape()						sq0Shape.graphics.beginFill(0xff0000)						sq0Shape.graphics.drawRect(0, 0, 30, 30)										var sq1Shape:Shape = new Shape()						sq1Shape.graphics.beginFill(0x000000)						sq1Shape.graphics.drawRect(0, 0, 150, 60)															var square0 = new Sprite()						square0.addChild(sq0Shape)						square0.x = int(Math.random() * (stage.stageWidth - square0.width))						square0.y = int(Math.random() * (stage.stageHeight- square0.height))												square0.buttonMode = true						square0.mouseChildren = false						square0.addEventListener(MouseEvent.CLICK, alignSquares)										var square1 = new Sprite()						square1.addChild(sq1Shape)						square1.x = int(Math.random() * (stage.stageWidth - square1.width))						square1.y = int(Math.random() * (stage.stageHeight- square1.height))										addChild(square1)					addChild(square0)																														function alignSquares(e:MouseEvent):void					{						changeAlignment()						tf.text = 'alignment is ' + alignmentType[currentAlignment]						//Alignment.align(square0, square1, Alignment.TOP)						//Alignment.align(square0, square1, Alignment.BOTTOM)						//Alignment.align(square0, square1, Alignment.CENTER)						//Alignment.align(square0, square1, Alignment.LEFT)						//Alignment.align(square0, square1, Alignment.RIGHT)												//Alignment.align(square0, square1, Alignment.TOP_LEFT)						//Alignment.align(square0, square1, Alignment.TOP_CENTER)						//Alignment.align(square0, square1, Alignment.TOP_RIGHT)												//Alignment.align(square0, square1, Alignment.CENTER_LEFT)						//Alignment.align(square0, square1, Alignment.CENTER_RIGHT)												//Alignment.align(square0, square1, Alignment.BOTTOM_LEFT)						//Alignment.align(square0, square1, Alignment.BOTTOM_CENTER)						//Alignment.align(square0, square1, Alignment.BOTTOM_RIGHT)					}										function changeAlignment():void					{						currentAlignment++						if(currentAlignment >= alignmentType.length) currentAlignment = 0						Alignment.align(square0, square1, alignmentType[currentAlignment])					}																					LICENSE		:	The MIT License					Copyright (c) 2009 David Caneso					Permission is hereby granted, free of charge, to any person obtaining a copy					of this software and associated documentation files (the "Software"), to deal					in the Software without restriction, including without limitation the rights					to use, copy, modify, merge, publish, distribute, sublicense, and/or sell					copies of the Software, and to permit persons to whom the Software is					furnished to do so, subject to the following conditions:					The above copyright notice and this permission notice shall be included in					all copies or substantial portions of the Software.					THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR					IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,					FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE					AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER					LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,					OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN					THE SOFTWARE.*/package com.davidcaneso.display.layout{	import flash.display.DisplayObject;		public class Alignment	{		//	properties		public static const TOP				:String = 'top';		public static const TOP_LEFT		:String = 'topLeft';		public static const TOP_CENTER		:String = 'topCenter';		public static const TOP_RIGHT		:String = 'topRight';				public static const CENTER			:String = 'center';		public static const CENTER_LEFT		:String = 'centerLeft';		public static const CENTER_RIGHT	:String = 'centerRight';				public static const BOTTOM			:String = 'bottom';		public static const BOTTOM_LEFT		:String = 'bottomLeft';		public static const BOTTOM_CENTER	:String = 'bottomCenter';		public static const BOTTOM_RIGHT	:String = 'bottomRight';				public static const LEFT			:String = 'left';				public static const RIGHT			:String = 'right';				//	constructor		public function Alignment():void{}				//	public methods		public static function align(target:DisplayObject, alignWith:DisplayObject, type:String, offsetX:int = 0, offsetY:int = 0):void		{			switch(type){				case TOP:				case BOTTOM:					_alignVertical(target, alignWith, type, offsetY);					break;								case LEFT:				case RIGHT:					_alignHorizontal(target, alignWith, type, offsetX);					break;								case CENTER:					_alignVertical(target, alignWith, type, offsetY);					_alignHorizontal(target, alignWith, type, offsetX);					break;								case TOP_LEFT:					_alignVertical(target, alignWith, TOP, offsetY);					_alignHorizontal(target, alignWith, LEFT, offsetX);					break;								case TOP_CENTER:					_alignVertical(target, alignWith, TOP, offsetY);					_alignHorizontal(target, alignWith, CENTER, offsetX);					break;									case TOP_RIGHT:					_alignVertical(target, alignWith, TOP, offsetY);					_alignHorizontal(target, alignWith, RIGHT, offsetX);					break;								case BOTTOM_LEFT:					_alignVertical(target, alignWith, BOTTOM, offsetY);					_alignHorizontal(target, alignWith, LEFT, offsetX);					break;									case BOTTOM_CENTER:					_alignVertical(target, alignWith, BOTTOM, offsetY);					_alignHorizontal(target, alignWith, CENTER, offsetX);					break;									case BOTTOM_RIGHT:					_alignVertical(target, alignWith, BOTTOM, offsetY);					_alignHorizontal(target, alignWith, RIGHT, offsetX);					break;								case CENTER_LEFT:					_alignVertical(target, alignWith, type, offsetY);					_alignHorizontal(target, alignWith, LEFT, offsetX);					break;				case CENTER_RIGHT:					_alignVertical(target, alignWith, type, offsetY);					_alignHorizontal(target, alignWith, RIGHT, offsetX);					break;			}		}										//	private methods		private static function _alignVertical(target:DisplayObject, alignWith:DisplayObject, type:String, offset:int = 0):void		{			//	trace('alignDisplayObjectVertical')			var alignToY:int = alignWith.y;			var alignToHeight:int = alignWith.height;						switch(type){				case TOP:					target.y = int(alignToY + offset);					break;								case BOTTOM:					target.y = int(alignToY + alignToHeight + offset);					break;									default:					target.y = int(alignToY + (alignToHeight * .5) + offset);					break;			}		}				private static function _alignHorizontal(target:DisplayObject, alignWith:DisplayObject, type:String, offset:int = 0):void		{			//	trace('alignHorizontal')			var alignToX:int = alignWith.x;			var alignToWidth:int = alignWith.width;						switch(type){				case LEFT:					target.x = int(alignToX + offset);					break;								case RIGHT:					target.x = int(alignToX + alignToWidth + offset);					break;									default:					target.x = int(alignToX + (alignToWidth * .5) + offset);					break;			}		}			}	}
package com.davidcaneso.display{	import com.davidcaneso.events.SliderEvent;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;	public class SliderSimple extends Sprite	{		public static const ORIENTATION:Array = ["horizontal","vertical"];		public static const FREQUENCY_DEFAULT:int = 100;		//properties		protected var _handle:DisplayObject;		protected var _trackSize:Number;		protected var _orientation:String;		private var _stage:Stage;		private var _bounds:Rectangle;		private var _percent:Number;		private var _isDragging:Boolean;		private var _interval:Timer;		private var _precise:Boolean;		private var _frequency:int;		private var _mouseWheelEnabled:Boolean;		//---------------------------------		//constructor		//---------------------------------		public function SliderSimple(handle:DisplayObject,stage:Stage,trackSize:int,orientation:String='horizontal',precise:Boolean=false)		{			_mouseWheelEnabled = false;			_handle = handle;			_stage = stage;			_isDragging = false;			_orientation = orientation;			_precise = precise;			_percent = 0;			this.frequency = FREQUENCY_DEFAULT;			_interval = new Timer(_frequency,0);			_trackSize = trackSize;			if ((_orientation == ORIENTATION[0]))			{				_bounds = new Rectangle(0,0,_trackSize,0);			}			else			{				_bounds = new Rectangle(0,0,0,_trackSize);			}			addChild(_handle);		}		//---------------------------------		//public methods		//---------------------------------		//stop all timers and remove all event listeners		public function destroy():void		{			_interval.stop();			deactivate(true);		}		public function activate(withMouseWheel:Boolean=true):void		{			Sprite(_handle).buttonMode = true;			_interval.addEventListener(TimerEvent.TIMER,_update);			_addDragEvents();			if (withMouseWheel)			{				_addMouseWheelEvents();			}		}		public function deactivate(suppressEvent:Boolean=false):void		{			_interval.removeEventListener(TimerEvent.TIMER,_update);			_drop(null,suppressEvent);			Sprite(_handle).buttonMode = false;			_removeDragEvents();			_removeMouseWheelEvents();		}		public function moveHandleToPercent(number:Number,updateAfter:Boolean):void		{			var pct:Number;			if ((number <= 0))			{				pct = 0;			}			else if ((number >= 100))			{				pct = 100;			}			else			{				pct = number;			}			var pos:Number;			if (_precise)			{				pos = _trackSize * (pct / 100);			}			else			{				pos = int((_trackSize * (pct / 100)));			}			switch (_orientation)			{				case ORIENTATION[0] :					_handle.x = pos;					break;				case ORIENTATION[1] :					_handle.y = pos;					break;			}			if (updateAfter)			{				_drop(null);			}		}		//---------------------------------		//getters & setters		//---------------------------------		public function get handle():DisplayObject		{			return _handle;		}		public function get orientation():String		{			return _orientation;		}		public function get percent():Number		{			return _percent;		}		public function set frequency(milliseconds:int):void		{			if ((milliseconds <= 0))			{				_frequency = 100;			}			else			{				_frequency = milliseconds;			}			if ((_interval != null))			{				_interval.delay = _frequency;			}		}		public function get frequency():int		{			return _frequency;		}		public function get isDragging():Boolean		{			return _isDragging;		}		//---------------------------------		//private methods		//---------------------------------		protected function _drag(event:MouseEvent):void		{			Sprite(_handle).startDrag(false,_bounds);			_removeDragEvents();			_addDropEvents();			_interval.start();			_isDragging = true;			dispatchEvent(new SliderEvent(SliderEvent.DRAG_START,_percent));			_update(null);		}		protected function _drop(event:MouseEvent,suppressEvent:Boolean=false):void		{			Sprite(_handle).stopDrag();			_removeDropEvents();			_addDragEvents();			_isDragging = false;			_interval.stop();			_update(null,suppressEvent);			if (! suppressEvent)			{				dispatchEvent(new SliderEvent(SliderEvent.DRAG_STOP,_percent));			}		}		protected function _mouseWheelScroll(e:MouseEvent):void		{			var next:int = (_percent + -e.delta);			if ((next < 0))			{				next = 0;			}			if ((next > 100))			{				next = 100;			}			moveHandleToPercent(next,true);		}		private function _update(event:TimerEvent,suppressEvent:Boolean=false):void		{			if ((_orientation == ORIENTATION[0]))			{				if (_precise)				{					_percent = Number(Sprite(_handle).x / _trackSize * 100);				}				else				{					_percent = int(Sprite(_handle).x / _trackSize * 100);				}			}			else			{				if (_precise)				{					_percent = Number(Sprite(_handle).y / _trackSize * 100);				}				else				{					_percent = int(Sprite(_handle).y / _trackSize * 100);				}			}			if (! suppressEvent)			{				dispatchEvent(new SliderEvent(SliderEvent.DRAG_UPDATE,_percent));			}		}		private function _addDragEvents():void		{			Sprite(_handle).addEventListener(MouseEvent.MOUSE_DOWN,_drag);		}		private function _removeDragEvents():void		{			Sprite(_handle).removeEventListener(MouseEvent.MOUSE_DOWN,_drag);		}		private function _addDropEvents():void		{			_stage.addEventListener(MouseEvent.MOUSE_UP,_drop);			Sprite(_handle).addEventListener(MouseEvent.MOUSE_UP,_drop);		}		private function _removeDropEvents():void		{			_stage.removeEventListener(MouseEvent.MOUSE_UP,_drop);			Sprite(_handle).removeEventListener(MouseEvent.MOUSE_UP,_drop);		}		private function _addMouseWheelEvents():void		{			if (! _mouseWheelEnabled)			{				_mouseWheelEnabled = true;				addEventListener(MouseEvent.MOUSE_WHEEL,_mouseWheelScroll);			}		}		private function _removeMouseWheelEvents():void		{			if (_mouseWheelEnabled)			{				_mouseWheelEnabled = false;				removeEventListener(MouseEvent.MOUSE_WHEEL,_mouseWheelScroll);			}		}	}}
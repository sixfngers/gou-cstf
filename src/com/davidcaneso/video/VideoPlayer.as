package com.davidcaneso.video {	import com.davidcaneso.events.video.VideoLoadEvent;	import com.davidcaneso.events.video.VideoPlaybackEvent;import com.davidcaneso.utils.LiveTrace;import flash.display.Sprite;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.TimerEvent;	import flash.media.SoundTransform;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.utils.Timer;	public class VideoPlayer extends Sprite	{		public static const VIDEO_PLAYER_STATE_CHANGE:String 	= 'videoStateChange';		public static const VIDEO_UNSTARTED_STATE:String 		= 'videoUnstarted';		public static const VIDEO_START_STATE:String 			= 'videoStarted';		public static const VIDEO_STOP_STATE:String 			= 'videoStopped';		public static const VIDEO_PLAY_STATE:String 			= 'videoPlaying';		public static const VIDEO_PAUSE_STATE:String 			= 'videoPaused';		public static const VIDEO_COMPLETE_STATE:String 		= 'videoComplete';		public static const VIDEO_SCRUB_STATE:String 			= 'videoScrubbing';		public static const VIDEO_BUFFERING_START_STATE:String 	= 'videoStartBuffering';		public static const VIDEO_BUFFERING_STOP_STATE:String 	= 'videoStopBuffering';		public static const VIDEO_LOAD_UPDATE:String 			= 'videoPlayerLoadUpdate';		public static const VIDEO_TIME_UPDATE:String 			= 'videoPlayerPositionUpdate';		public static const VIDEO_PLAYER_DESTROY:String 		= 'videoDestroy';		private static const MIN_BUFFER_TIME:Number = 5;		private static const VIDEO_TIMER_INTERVAL:Number = 200;		private static const VIDEO_LOAD_TIMER_INTERVAL:Number = 200;		//development properties		private var _showTraceStatments:Boolean = true;		//properties		private var _unpauseOnWake:Boolean;		private var _videoFile:String;		private var _videoDisplay:VideoDisplay;		private var _nc:NetConnection;		private var _ns:NetStream;		private var _nsVolume:SoundTransform;		private var _percentagePlayed:int;		private var _videoDuration:Number = 0;		private var _videoTimer:Timer;		private var _isPaused:Boolean;		private var _videoComplete:Boolean;		private var _isScrubbing:Boolean;		private var _flvReader:FlvReader;		private var _playerState:String;		//video loading properties		private var _loadTimer:Timer;		private var _percentLoaded:int;		private var _isLoaded:Boolean;		private var _bufferTime:Number;        private var _isStreamingServer:Boolean;        private var _streamingServerPath:String;		//constructor		public function VideoPlayer(maxWidth:int,maxHeight:int,bgColor:Number,server:String='')		{			_unpauseOnWake = false;			_showTraceStatments = false;			changeBufferTime(MIN_BUFFER_TIME);			_nc = new NetConnection();			_nc.addEventListener(NetStatusEvent.NET_STATUS,_netStatusHandler);			_nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR,_securityErrorHandler);			_nc.client = this;			_flvReader = new FlvReader(this);			_videoDisplay = new VideoDisplay(maxWidth,maxHeight,bgColor);            _playerState = VideoPlayer.VIDEO_UNSTARTED_STATE;			if (server.length > 0)			{                _streamingServerPath = server;                _isStreamingServer = true;				_nc.connect(server);			}			else			{				_nc.connect(null);			}		}		//required when streaming from a media server		public function onBWDone():void		{			devTrace('hit onBWDone');		}        public function recconnect():void        {            _nc.connect(_streamingServerPath);        }		//public methods		public function startVideo(video:String):void		{            devTrace("start video "+video);			_updatePercentagePlayed(0);			_updateVideoComplete(false);			//check to see if the new video is the same as the video (if any) that is currently loaded			if ((video == _videoFile))			{				if (_isLoaded)				{					_updatePlayerState(VIDEO_START_STATE);					_restartVideo();					return;				}			}			closeStream();			_videoFile = video;			_updatePlayerState(VIDEO_BUFFERING_START_STATE);			_updatePlayerState(VIDEO_START_STATE);			_ns.play(_videoFile);			if(!_isStreamingServer)                _startLoadTimer();		}		public function sleepPlayer():void		{			if (! _videoComplete && ! _isPaused)			{				_unpauseOnWake = true;				pauseVideo(true);			}		}		public function wakePlayer():void		{			if (_unpauseOnWake)			{				_unpauseOnWake = false;				pauseVideo(false);			}		}		public function changeBufferTime(val:Number):void		{			var setVal:Number = MIN_BUFFER_TIME;			if ((val >= MIN_BUFFER_TIME))			{				setVal = val;			}			_bufferTime = setVal;		}		public function pauseVideo(val:Boolean=false):void		{			if (val)			{				set_isPaused(true);				_ns.pause();			}			else			{				set_isPaused(false);				_ns.resume();			}		}		public function startScrub(percentage:int):void		{			devTrace('startScrubbing');			_isScrubbing = true;			pauseVideo(true);			scrub(percentage);		}		public function scrub(percentage:int):void		{			var pct:int = percentage;			if ((percentage <= 0))			{				pct = 0;			}			if ((percentage >= 95))			{				pct = 95;			}			var full:Number = _videoDuration - 1;			var time:Number = Math.floor(((full * pct) * .01));			devTrace('jump to time '+time);            devTrace('duration '+_videoDuration);			_videoJumpTo(time);		}		public function endScrub(percentage:int):void		{			devTrace('endScrubbing');			_isScrubbing = false;			scrub(percentage);			pauseVideo(false);		}		public function changeVolume(val:Number):void		{			_nsVolume.volume = val;			_ns.soundTransform = _nsVolume;		}		public function closeStream(full:Boolean=false):void		{			_videoFile = '';			_isLoaded = false;			_videoDisplay.clearDisplay();			_stopLoadTimer();			_stopVideoTimer();			if (full)			{				_nc.close();				_ns.close();			}		}		public function destroy():void		{			devTrace('hit destroy in StreamingVideoPlayer');			_updatePlayerState(VIDEO_PLAYER_DESTROY);			pauseVideo(true);			_nc.removeEventListener(NetStatusEvent.NET_STATUS,_netStatusHandler);			_nc.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,_securityErrorHandler);			_ns.removeEventListener(NetStatusEvent.NET_STATUS,_netStatusHandler);			closeStream(true);			_stopVideoTimer();			_videoTimer.removeEventListener(TimerEvent.TIMER,_onTick);			_loadTimer.stop();			_loadTimer.removeEventListener(TimerEvent.TIMER,_loadTick);			_videoDisplay.video.clear();		}		// this should be restricted to internal but is not working right now;		public function updateVideoDuration(val:Number):void		{			_videoDuration = val;		}		//getters and setters		public function get videoFile():String		{			return _videoFile;		}		public function get videoDisplay():VideoDisplay		{			return _videoDisplay;		}		public function get nc():NetConnection		{			return _nc;		}		public function get ns():NetStream		{			return _ns;		}		public function get nsVolume():SoundTransform		{			return _nsVolume;		}		public function get percentagePlayed():int		{			return _percentagePlayed;		}		public function get videoDuration():Number		{			return _videoDuration;		}		public function get videoTimer():Timer		{			return _videoTimer;		}		public function get loadTimer():Timer		{			return _loadTimer;		}		public function get isPaused():Boolean		{			return _isPaused;		}		public function get videoComplete():Boolean		{			return _videoComplete;		}		public function get isScrubbing():Boolean		{			return _isScrubbing;		}		public function get flvReader():FlvReader		{			return _flvReader;		}		public function get playerState():String		{			return _playerState;		}		public function get percentLoaded():int		{			return _percentLoaded;		}		public function get isLoaded():Boolean		{			return _isLoaded;		}		//private methods		private function _netStatusHandler(event:NetStatusEvent):void		{			devTrace(("_netStatusHandler code: " + event.info.code));			switch (event.info.code)			{				case "NetConnection.Connect.Success" :					_connectStream();					break;				case 'NetStream.Play.Stop' :					if (! _isScrubbing)					{						set_isPaused(true);						//_updatePlayerState(VIDEO_STOP_STATE)					}					else					{						trace('video is scrubbing no need to call stop function');						return;					}					break;				case 'NetStream.Play.Start' :					if (this.playerState == VideoPlayer.VIDEO_UNSTARTED_STATE)					{						_updatePlayerState(VIDEO_START_STATE);					}					set_isPaused(false);					break;				case 'NetStream.Pause.Notify' :					set_isPaused(true);					break;				case 'NetStream.Unpause.Notify' :					set_isPaused(false);					break;				case 'NetStream.Seek.Notify' :					if (_isScrubbing)					{						set_isPaused(true);					}					return;				case 'NetStream.Seek.Failed' :					return;				case 'NetStream.Seek.InvalidTime' :					if (! _isLoaded)					{						_updatePlayerState(VIDEO_BUFFERING_START_STATE);					}					endScrub(_percentLoaded);					return;				case 'NetStream.Buffer.Full' :					_updatePlayerState(VIDEO_BUFFERING_STOP_STATE);					break;				case 'NetStream.Buffer.Flush' :					_updatePlayerState(VIDEO_BUFFERING_STOP_STATE);					break;				case 'NetStream.Buffer.Empty' :					if (_ns.time > Math.floor((_videoDuration - 1)))					{						_updatePlayerState(VIDEO_STOP_STATE);					}					//TODO:					// is this still needed? Verify that this should be taken out of the class.					/*					if(!_isLoaded){					devTrace(_ns.time)					_updatePlayerState(VIDEO_BUFFERING_START_STATE)					}else{					devTrace('video is loaded no need to show buffer')					return;					}					*/					break;				case 'NetStream.Play.StreamNotFound' :                    set_isPaused(true);                    _updatePlayerState(VIDEO_STOP_STATE);                    dispatchEvent(new VideoPlaybackEvent(VideoPlaybackEvent.FILE_NOT_FOUND,_playerState,_percentagePlayed));                    break;                case 'NetStream.Play.FileStructureInvalid':                case 'NetStream.Play.NoSupportedTrackFound':                    set_isPaused(true);                    _updatePlayerState(VIDEO_STOP_STATE);                    dispatchEvent(new VideoPlaybackEvent(VideoPlaybackEvent.INVALID_FORMAT,_playerState,_percentagePlayed));                    break;				case 'NetConnection.Connect.Success' :					return;			}		}		private function _connectStream():void		{			_ns = new NetStream(_nc);			_ns.bufferTime = _bufferTime;			_ns.client = _flvReader;			_ns.addEventListener(NetStatusEvent.NET_STATUS,_netStatusHandler);			_videoDisplay.video.attachNetStream(_ns);			_nsVolume = _ns.soundTransform;			_videoTimer = new Timer(VIDEO_TIMER_INTERVAL);			_videoTimer.addEventListener(TimerEvent.TIMER,_onTick);			_loadTimer = new Timer(VIDEO_LOAD_TIMER_INTERVAL);			_loadTimer.addEventListener(TimerEvent.TIMER,_loadTick);			set_isPaused(true,true);			addChild(_videoDisplay);			_updatePlayerState(VIDEO_UNSTARTED_STATE);		}		private function _securityErrorHandler(event:SecurityErrorEvent):void		{			devTrace(("_securityErrorHandler: " + event));		}		private function _restartVideo():void		{			_videoJumpTo(0);			pauseVideo(false);		}		private function _videoJumpTo(time:Number):void		{			var dur:Number = Math.floor(_videoDuration);			if ((time >= dur))			{				_ns.seek((dur - 1));			}			else			{				_ns.seek(time);			}		}		private function _startVideoTimer():void		{			if(_videoTimer)                _videoTimer.start();		}		private function _stopVideoTimer():void		{            if(_videoTimer)			    _videoTimer.stop();		}		private function _onTick(event:TimerEvent):void		{			_updatePercentagePlayed(Math.ceil(_ns.time / _videoDuration * 100));		}		private function _startLoadTimer():void		{			_changePercentLoaded(0);			_loadTimer.reset();			_loadTimer.start();		}		/*		private function _pauseLoadTimer():void		{			if (_loadTimer.running)			{				_loadTimer.stop();			}		}		private function _unpauseLoadTimer():void		{			if (! _isLoaded)			{				if (! _loadTimer.running)				{					_loadTimer.start();				}			}		}		*/		private function _stopLoadTimer():void		{            if(_loadTimer)			    _loadTimer.stop();		}		private function _loadTick(event:TimerEvent):void		{			var pct:int = Math.ceil(_ns.bytesLoaded / _ns.bytesTotal * 100);			if ((pct >= 100))			{				pct = 100;				_isLoaded = true;				_stopLoadTimer();			}			_changePercentLoaded(pct);		}		private function _updatePlayerState(newState:String,broadcastEvent:Boolean=true):void		{			_playerState = newState;			if (broadcastEvent)			{				devTrace(('_updatePlayerState ' + newState));				dispatchEvent(new VideoPlaybackEvent(VideoPlaybackEvent.PLAYER_STATE_CHANGE,_playerState,_percentagePlayed));			}			else			{				devTrace((('suppressed ' + newState) + ' event'));			}		}		private function _updatePercentagePlayed(val:int):void		{			var validPercent:int = val;			if ((val < 0))			{				validPercent = 0;			}			if ((val > 100))			{				validPercent = 100;			}			_percentagePlayed = validPercent;			dispatchEvent(new VideoPlaybackEvent(VideoPlaybackEvent.PLAYER_TIME_CHANGE,_playerState,_percentagePlayed));		}		private function set_isPaused(val:Boolean,supressFunctionCall:Boolean=false):void		{			var setVal:Boolean;			var pct:Number = Math.ceil(_ns.time / _videoDuration * 100);			var newState:String = VIDEO_PLAY_STATE;			var broadcastEvent:Boolean = true;			if (val)			{				newState = VIDEO_PAUSE_STATE;				setVal = true;				_stopVideoTimer();				if ((pct >= 100))				{					if (! _isScrubbing)					{						_updateVideoComplete(true);						_isPaused = setVal;						_updatePlayerState(VIDEO_COMPLETE_STATE);						return;					}					else					{						_updatePlayerState(newState,false);						return;					}				}				else				{					_updateVideoComplete(false);				}			}			else			{				setVal = false;				_startVideoTimer();			}			_isPaused = setVal;			if (supressFunctionCall)			{				broadcastEvent = false;			}			_updatePlayerState(newState,broadcastEvent);		}		private function _updateVideoComplete(val:Boolean):void		{			var setVal:Boolean = false;			if (val)			{				setVal = true;				_updatePercentagePlayed(100);			}			devTrace(('udpateVideoComplete = ' + setVal));			_videoComplete = setVal;		}		private function _changePercentLoaded(val:int=0):void		{			_percentLoaded = val;			devTrace(('VideoPlayer dispatch VideoLoadEvent ' + _percentLoaded));			dispatchEvent(new VideoLoadEvent(VideoLoadEvent.UPDATE,_percentLoaded));		}		//IDE development functionality		public function hideTraces():void		{			_showTraceStatments = false;		}		public function showTraces():void		{			_showTraceStatments = true;		}		internal function devTrace(val:String):void		{			if (_showTraceStatments)			{				LiveTrace.output(val);                trace(val);			}		}	}}
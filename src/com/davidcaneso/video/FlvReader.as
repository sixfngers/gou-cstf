package com.davidcaneso.video {	import com.davidcaneso.events.video.VideoCuePointEvent;	import com.davidcaneso.events.video.VideoPlaybackEvent;		public class FlvReader	{		//	properties		private var _player:VideoPlayer;		private var _cueData:Object;				//	event names		public static const METADATA_EVENT:String = 'metaDataUpadate';		public static const CUE_POINT_EVENT:String = 'cueDataUpadate';				//	constructor		public function FlvReader(player:VideoPlayer)		{			_player = player;		}				//	public methods		public function onMetaData(info:Object):void		{            for (var i:String in info)            {                _player.devTrace(i + ": " + info[i]);            }            _player.devTrace("metadata: duration=" + info.duration + " width=" + info.width + " height=" + info.height + " framerate=" + info.framerate);			_player.updateVideoDuration(Number(info.duration));			_player.dispatchEvent(new VideoPlaybackEvent(VideoPlaybackEvent.METADATA_RECEIVED, _player.playerState, _player.percentagePlayed, info));		}        public function onTimeCoordInfo(info:Object):void		{            for (var i:String in info)            {                _player.devTrace('onTimeCoordInfo '+i + ": " + info[i]);            }		}						public function onPlayStatus(e:*):void		{            _player.devTrace(e.toString());			_player.dispatchEvent(new VideoPlaybackEvent(VideoPlaybackEvent.PLAYER_STATE_CHANGE, _player.playerState, _player.percentagePlayed));		}								public function onCuePoint(info:Object):void		{			_player.devTrace("cuepoint: time=" + info.time + " name=" + info.name + " type=" + info.type);						//	check to see if player is scrubbing			if(_player.isScrubbing)			{				_player.devTrace('cue went unhandled because player is scrubbing');				return;			}						_cueData = info;			_player.dispatchEvent(new VideoCuePointEvent(VideoCuePointEvent.CUE_POINT_REACHED, info));			//_player.broadcast(CUE_POINT_EVENT)		}				public function onXMPData(info:Object):void        {            for (var i:String in info)            {                _player.devTrace('XMPData '+i + ": " + info[i]);            }        }										//	getters & setters		public function get player():VideoPlayer		{			return _player;		}				public function get cueData():Object		{			return _cueData;		}									}				}
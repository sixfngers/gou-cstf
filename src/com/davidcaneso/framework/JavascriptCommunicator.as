package com.davidcaneso.framework{	import flash.events.EventDispatcher;	import flash.external.ExternalInterface;	import com.davidcaneso.events.framework.ExternalLinkEvent;	import com.davidcaneso.singletons.StageReference;	public class JavascriptCommunicator extends EventDispatcher	{		//constructor		public function JavascriptCommunicator():void		{		}		//public methods		public static function makeCall(jsFunction:String,supressEvent:Boolean=false,hasCallBack:Boolean=false,... jsParameters):void		{			//you are communicating with javascript make the javascript call through ExternalInterface			if (! ExternalInterface.available)			{				StageReference.instance.stage.dispatchEvent(new ExternalLinkEvent(ExternalLinkEvent.EXTERNAL_INTERFACE_UNAVAILABLE));				return;			}			var returnedValue:*;			if (! supressEvent)			{				StageReference.instance.stage.dispatchEvent(new ExternalLinkEvent(ExternalLinkEvent.LINK_ATTEMPT));			}			if (jsParameters.length < 1)			{				returnedValue = ExternalInterface.call(jsFunction);			}			else			{				returnedValue = ExternalInterface.call(jsFunction,jsParameters);			}			//are you expecting a return value from javascript			//it will be returned in this event dispatched on the stage			if (hasCallBack)			{				StageReference.instance.stage.dispatchEvent(new ExternalLinkEvent(ExternalLinkEvent.CALLBACK_READY,returnedValue));			}		}		//getters & setters;		public static function get externalInterfaceAvailable():Boolean		{			return ExternalInterface.available;		}		/**/	}}
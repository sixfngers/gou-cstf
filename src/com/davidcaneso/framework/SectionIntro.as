package com.davidcaneso.framework {	import com.davidcaneso.events.framework.DevelopmentEnvironmentEvent;	import com.davidcaneso.events.framework.IntroEvent;	import com.davidcaneso.events.framework.SiteManagerEvent;	import com.davidcaneso.singletons.XMLData;	public class SectionIntro extends ActiveSiteElement	{		//properties		protected var _sectionNumber:int;		protected var _isActive:Boolean;		protected var _exitToLoader:Boolean;		//constructor		public function SectionIntro()		{			super();			_className = 'SectionIntro';			_isActive = false;			_exitToLoader = false;			_devSectionNumber = -1;			_devConfigFile = '';			_devSetupType = DevelopmentEnvironment.INTRO_EVENT_TYPES;		}		//mandatory override methods		override protected function setup():void		{		}		protected function animateIn():void		{		}		protected function animateOut():void		{		}		//private methods		override protected function init():void		{			classTrace('init');			if (! _dev)			{				_sectionNumber = _top.nextSectionNumber;				_xml = XMLList(XMLData.instance.sitemap.sectionlist.section[_sectionNumber]);			}			super.init();		}		protected function introAnimateInComplete():void		{			classTrace('introAnimateInComplete');			stage.dispatchEvent(new IntroEvent(IntroEvent.TRANSITION_IN_COMPLETE));		}		protected function introAnimateOutComplete():void		{			classTrace('introAnimateOutComplete');			classTrace(('_exitToLoader = ' + _exitToLoader));			if (! _exitToLoader)			{				stage.dispatchEvent(new IntroEvent(IntroEvent.TRANSITION_OUT_COMPLETE));			}			else			{				stage.dispatchEvent(new IntroEvent(IntroEvent.TRANSITION_OUT_TO_LOADER_COMPLETE));			}		}		override protected function handleSiteStateUpdate(e:SiteManagerEvent):void		{			var currentState:String = _top.siteState;			classTrace(('handleSiteStateUpdate ' + currentState));			switch (currentState)			{				case SiteManager.INTRO_TRANS_IN_STATE :					_isActive = true;					animateIn();					break;				case SiteManager.INTRO_TRANS_OUT_STATE :					_isActive = false;					destroy();					animateOut();					break;				case SiteManager.INTRO_TRANS_OUT_TO_LOADER_STATE :					_isActive = false;					_exitToLoader = true;					destroy();					animateOut();					break;				case SiteManager.SLEEP_STATE :					if (_isActive)					{						sleep();					}					break;				case SiteManager.WAKE_STATE :					if (_isActive)					{						wake();					}					break;			}		}		override public function destroy():void		{			//remove all listeners and stop all timers			classTrace('destroy');			super.destroy();		}		//development methods		override protected function devSetupComplete(e:DevelopmentEnvironmentEvent):void		{			_sectionNumber = _devSectionNumber;			_xml = XMLList(XMLData.instance.sitemap.sectionlist.section[_sectionNumber]);			classTrace(('_xml: ' + _xml));			super.devSetupComplete(e);		}	}}
package com.davidcaneso.framework{	import com.davidcaneso.display.buttons.TestButton;	import com.davidcaneso.events.framework.DevelopmentEnvironmentEvent;	import com.davidcaneso.events.framework.ExternalLinkEvent;	import com.davidcaneso.events.loading.CssLoaderEvent;	import com.davidcaneso.events.loading.PreloaderEvent;	import com.davidcaneso.events.loading.XmlLoaderEvent;	import com.davidcaneso.loading.CssLoader;	import com.davidcaneso.loading.Preloader;	import com.davidcaneso.loading.XmlLoader;	import com.davidcaneso.singletons.RuntimeAssets;	import com.davidcaneso.singletons.Styling;	import com.davidcaneso.singletons.XMLData;	import com.davidcaneso.text.EmbededFonts;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.MouseEvent;	// imports		public dynamic class DevelopmentEnvironment extends SiteManager	{		//	properties		public var devBaseUrl			:String;		public var buttonHolder			:Sprite;        public var rollOverHolder       :Sprite;				private var _sectionNumber		:int;		private var _configLoader		:XmlLoader;		private var _cssLoader			:CssLoader;		private var _sitemapLoader		:XmlLoader;		private var _typeLoader			:Preloader;		private var _t0					:TestButton;		private var _t1					:TestButton;		private var _t2					:TestButton;		private var _t3					:TestButton;		private var _eventTypes			:String;			private static var CLASS_NAME			:String = 'DevelopmentEnvironment';		public static var INITIAL_EVENT_TYPES	:String = 'initial';		public static var SECTION_EVENT_TYPES	:String = 'section';		public static var INTRO_EVENT_TYPES		:String = 'intro';		public static var SLEEPER_EVENT_TYPES	:String = 'sleeper';				//	constructor		public function DevelopmentEnvironment(xmlFile:String, eventTypes:String, sectionNumber:int = -1, showTraces:Boolean = false):void		{			classTrace("constructor in "+CLASS_NAME);			_showTraces 	= showTraces;			_sectionNumber 	= sectionNumber;			_eventTypes 	= eventTypes;			loadConfigFile(xmlFile);			super();		}				//	private methods		public function classTrace(val:*, className:String = ''):void		{			if(!_showTraces) return;			var prefix:String = '';			if(className.length > 0) 	prefix = className+': ';			else						prefix = CLASS_NAME+': ';			trace(prefix + val);		}		//	config loader functions		private function loadConfigFile(xmlFile:String = ''):void		{			classTrace('hit loadConfigFile');			if(xmlFile.length == 0)			{				classTrace('no config file to load');				setupComplete();				return;			}						_configLoader = new XmlLoader(xmlFile);			_configLoader.addEventListener(	XmlLoaderEvent.ERROR		,	handleConfigLoadError		);			_configLoader.addEventListener(	XmlLoaderEvent.COMPLETE		,	handleConfigLoadComplete	);			_configLoader.startLoad();		}				private function handleConfigLoadComplete(e:XmlLoaderEvent):void		{			classTrace('hit handleConfigLoadComplete');			XMLData.instance.config = e.xml;			//_config = e.xml;			_configLoader.removeEventListener(	XmlLoaderEvent.ERROR		,	handleConfigLoadError		);			_configLoader.removeEventListener(	XmlLoaderEvent.COMPLETE		,	handleConfigLoadComplete	);			_configLoader.destroy();			_configLoader = null;			devBaseUrl = e.xml.@devbaseurl;			Styling.instance.addColorFromXmlList(e.xml.colorpalette, 'name', 'value');			//Styling.instance.addColorFromXmlList(XML(e.xml.colorpalette, 'name', 'value');			loadGlobalType();		}				private function handleConfigLoadError(e:XmlLoaderEvent):void		{			throw(new IllegalOperationError('an error occurred loading the config xml file the site cannot continue with out this load completing'));		}				//	global type load		private function loadGlobalType():void		{			//var file:String = config.initialload.@globaltypefile			var config:XML = XMLData.instance.config;			var file:String = config.initialload.@globaltypefile;			classTrace('hit loadGlobalType '+devBaseUrl + file);			if(file.length < 1)			{				loadCSSFile();				return;			}						this['typeHolder'] = new MovieClip();			addChild(this['typeHolder']);						_typeLoader = new Preloader();			_typeLoader.addToLoadStack(devBaseUrl + file, this['typeHolder']);			_typeLoader.addEventListener(	PreloaderEvent.COMPLETE, 	handleTypeLoadComplete	);			_typeLoader.addEventListener(	PreloaderEvent.ERROR, 		handleTypeLoadError		);			_typeLoader.startLoad();		}				private function handleTypeLoadComplete(e:PreloaderEvent):void		{			if(e != null)			{				super.globalType = MovieClip(e.loadTarget);				Styling.instance.addTypeSwf(new EmbededFonts());				Styling.instance.addFormatFromXMLList(XMLData.instance.config.textformats.format);			}						classTrace('hit handleTypeLoadComplete');			_typeLoader.removeEventListener(	PreloaderEvent.COMPLETE, 	handleTypeLoadComplete	);			_typeLoader.removeEventListener(	PreloaderEvent.ERROR, 		handleTypeLoadError		);			_typeLoader.destroy();			_typeLoader = null;			loadCSSFile();		}				private function handleTypeLoadError(e:PreloaderEvent):void		{			classTrace('error occurred loading '+e.file);			handleTypeLoadComplete(null);		}				//	css loading functions		private function loadCSSFile():void		{			var config:XML = XMLData.instance.config;			var file:String = config.textformats.@css;			classTrace('hit loadCSSFile');			if(file.length < 1)			{				loadSitemapFile();				return;			}						_cssLoader = new CssLoader(devBaseUrl + file);			_cssLoader.addEventListener(	CssLoaderEvent.ERROR,		handleCSSLoadError		);			_cssLoader.addEventListener(	CssLoaderEvent.COMPLETE,	handleCSSLoadComplete	);			_cssLoader.startLoad();		}				private function handleCSSLoadComplete(e:CssLoaderEvent):void		{			if(e != null)			{				classTrace('hit handleCSSLoadComplete');				Styling.instance.addStyleSheet(e.cssText);			}						//	destroy the cssLoader			_cssLoader.removeEventListener(	CssLoaderEvent.ERROR,		handleCSSLoadError		);			_cssLoader.removeEventListener(	CssLoaderEvent.COMPLETE,	handleCSSLoadComplete	);			_cssLoader.destroy();			_cssLoader = null;			loadSitemapFile();		}				private function handleCSSLoadError(evt:Event):void		{			classTrace('hit handleCSSLoadError');			handleCSSLoadComplete(null);		}				//	sitemap loader functions		private function loadSitemapFile():void		{			var config:XML = XMLData.instance.config;			var file:String = config.initialload.@xmlfile;			classTrace('hit loadSitemap');			if(file.length < 1)			{				setupComplete();				return;			}						classTrace('load '+devBaseUrl + file+' using _xmlLoader');			_sitemapLoader = new XmlLoader(devBaseUrl + file);			_sitemapLoader.addEventListener(	XmlLoaderEvent.ERROR		,	handleSitemapLoadError		);			_sitemapLoader.addEventListener(	XmlLoaderEvent.COMPLETE		,	handleSitemapLoadComplete	);			_sitemapLoader.startLoad();		}				private function handleSitemapLoadComplete(e:XmlLoaderEvent):void		{			if(e != null)			{				classTrace('hit handleSitemapLoadComplete');				XMLData.instance.sitemap = e.xml;			}						_sitemapLoader.removeEventListener(	XmlLoaderEvent.ERROR		,	handleSitemapLoadError		);			_sitemapLoader.removeEventListener(	XmlLoaderEvent.COMPLETE		,	handleSitemapLoadComplete	);			_sitemapLoader.destroy();			_sitemapLoader = null;			loadRuntimeAssets();		}				private function handleSitemapLoadError(e:XmlLoaderEvent):void		{			classTrace('en error occurred loading the file with sitemapLoader');			handleSitemapLoadComplete(null);		}				private function loadRuntimeAssets():void		{			classTrace('load runtime assets');			var config:XML = XMLData.instance.config;			var initialRuntimeAssets:XMLList = new XMLList();			var sectionRuntimeAssets:XMLList = new XMLList();						initialRuntimeAssets = config.runtimeassets.initial.children();						if(_eventTypes == SECTION_EVENT_TYPES){				sectionRuntimeAssets = config.runtimeassets.section[_sectionNumber].children();			}												var iLimit:int 	= 0;			var iiLimit:int = 0;			if(initialRuntimeAssets.length() > 0)	iLimit = initialRuntimeAssets.length();			if(sectionRuntimeAssets.length() > 0)	iiLimit = sectionRuntimeAssets.length();						classTrace(iLimit+' initialRuntimeAssets '+initialRuntimeAssets);			classTrace(iiLimit+' runtimeAssets '+sectionRuntimeAssets);						if(iLimit == 0 && iiLimit == 0)			{				classTrace('nothing else to load call setup complete');				setupComplete();				return;			}						super._preloader = new Preloader();			super._preloader.addEventListener(	PreloaderEvent.COMPLETE		,	handleRuntimeAssetLoadComplete	);						var fileName:String;			var targetName:String;			for(var i:int = 0; i < iLimit; i++)			{				fileName	= initialRuntimeAssets.@file[i];				targetName 	= initialRuntimeAssets.@target[i];								RuntimeAssets.instance.addAsset(targetName, new Sprite());				_preloader.addToLoadStack(devBaseUrl + fileName, RuntimeAssets.instance.findAsset(targetName));			}						for(var ii:int = 0; ii < iiLimit; ii++)			{				fileName	= sectionRuntimeAssets.@file[ii];				targetName 	= sectionRuntimeAssets.@target[ii];								RuntimeAssets.instance.addAsset(targetName, new Sprite());				_preloader.addToLoadStack(devBaseUrl + fileName, RuntimeAssets.instance.findAsset(targetName));			}						_preloader.startLoad();		}				private function handleRuntimeAssetLoadComplete(e:PreloaderEvent):void		{			_preloader.removeEventListener(	PreloaderEvent.COMPLETE		,	handleRuntimeAssetLoadComplete	);			_preloader.destroy();			setupComplete();		}				private function setupComplete():void		{			classTrace('setupComplete');			addTestButtons();			dispatchEvent(new DevelopmentEnvironmentEvent(DevelopmentEnvironmentEvent.SETUP_COMPLETE));		}														private function addTestButtons():void		{			var buttonLabels:Array = [	 'enter'									  	,'exit'										,'sleep'										,'wake'									];						buttonHolder = new Sprite();			buttonHolder.x = 10;			buttonHolder.y = 40;			var xpos:int = 0;			var ypos:int = 0;			var spacerX:int = 40;			var mc:TestButton;			var iLimit:int = buttonLabels.length;			for(var i:int = 0; i<iLimit; i++)			{				mc = new TestButton(0xff0000, buttonLabels[i]);				this['_t'+i] = mc;				mc.x = xpos;				mc.y = ypos;				buttonHolder.addChild(mc);				mc.addEventListener(MouseEvent.CLICK, testButtonClick);				xpos += spacerX;			}						if(_eventTypes == INITIAL_EVENT_TYPES) this['_t'+1].visible = false;			if(_eventTypes == SLEEPER_EVENT_TYPES)			{				this['_t'+0].visible = false;				this['_t'+1].visible = false;				this['_t'+3].visible = false;			}						addChild(buttonHolder);		}										private function testButtonClick(event:MouseEvent):void		{			//			var eventName:String = '';			switch(event.currentTarget){				case _t0:					if(_eventTypes == INITIAL_EVENT_TYPES){						eventName = SiteManager.INITIAL_ANIMATION_STATE;					}										if(_eventTypes == SECTION_EVENT_TYPES){						eventName = SiteManager.SECTION_TRANS_IN_STATE;					}										if(_eventTypes == INTRO_EVENT_TYPES){						eventName = SiteManager.INTRO_TRANS_IN_STATE;					}					break;									case _t1:					if(_eventTypes == SECTION_EVENT_TYPES){						eventName = SiteManager.SECTION_TRANS_OUT_STATE;					}										if(_eventTypes == INTRO_EVENT_TYPES){						eventName = SiteManager.INTRO_TRANS_OUT_STATE;					}					break;									case _t2:					if(_eventTypes == SLEEPER_EVENT_TYPES){						stage.dispatchEvent(new ExternalLinkEvent(ExternalLinkEvent.LINK_ATTEMPT));						return;					}										eventName = SiteManager.SLEEP_STATE;					break;									case _t3:					eventName = SiteManager.WAKE_STATE;					break;			}						changeSiteState(eventName);		}			}	}
package com.davidcaneso.facebook.ui{	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.system.LoaderContext;	import flash.system.Security;	import flash.utils.Timer;	// imports		public class IconLoader extends Sprite	{		//	properties		private var _crossdomainFile:String = 'crossdomain.xml';				private var _loader:Loader;		private var _accessChildTimer:Timer;		//private var url:String;				//	constructor		public function IconLoader():void		{			addEventListener(Event.ADDED_TO_STAGE, _init);			_accessChildTimer = new Timer(100);						_loader = new Loader();			_loader.contentLoaderInfo.addEventListener( Event.COMPLETE, _onLoaderComplete );		}				public function loadIcon(url:String):void		{			resetIcon();						var context:LoaderContext = new LoaderContext();			context.checkPolicyFile = true;						var request:URLRequest = new URLRequest( url );			_loader.load( request, context );		}				public function resetIcon():void		{			try			{				_loader.close();			}			catch(e:Error)			{				//LiveTrace.output('iconloader is not loading anything right now')			}						while(this.numChildren > 0)			{				removeChild(this.getChildAt(0));			}		}										//	PRIVATE METHODS		private function _init(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _init);			addEventListener(Event.REMOVED_FROM_STAGE, _destroy);		}				private function _destroy(e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _init);			removeEventListener(Event.REMOVED_FROM_STAGE, _destroy);						_accessChildTimer.stop();			_accessChildTimer.removeEventListener( TimerEvent.TIMER, _onAccessChildTimer );						resetIcon();			_loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, _onLoaderComplete );		}				private function _onLoaderComplete( event:Event ):void		{			//	facebook graph returns a url for you to load the users profile image from			//	this often fails because its a redirect			//	checking loaderInfo.childAllowsParent assures that you can have access to the profile image			//	if you don't start a new load from the url that was returned						var loaderInfo:LoaderInfo = LoaderInfo(event.target);						if(loaderInfo.childAllowsParent)			{				//	image was able to load from url				_displayIcon();			}			//else if( loaderInfo.url != this.url )			else			{				//	image was unable to load from url load again from different url				var loadedUrl:String = loaderInfo.url;								//	assure that the url to the crossdomain is correctly formated				if(loadedUrl.substr(-1) != '/') _crossdomainFile = '/'+_crossdomainFile;								var redirectURL:String = loaderInfo.url + _crossdomainFile;								Security.loadPolicyFile( redirectURL );								_accessChildTimer.addEventListener( TimerEvent.TIMER, _onAccessChildTimer );				_accessChildTimer.reset();				_accessChildTimer.start();			}		}				private function _onAccessChildTimer( e:TimerEvent):void		{			var loaderInfo:LoaderInfo = _loader.contentLoaderInfo;			if( loaderInfo.childAllowsParent )			{				_accessChildTimer.stop();				_accessChildTimer.removeEventListener( TimerEvent.TIMER, _onAccessChildTimer );				_displayIcon();			}		}				private function _displayIcon():void		{			addChild(_loader.content);		}			}	}
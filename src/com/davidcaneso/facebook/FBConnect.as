package com.davidcaneso.facebook{	import flash.events.EventDispatcher		import com.davidcaneso.facebook.auth.FacebookOAuth2	import com.davidcaneso.facebook.auth.Session	import com.davidcaneso.facebook.events.GraphEvent;	import com.davidcaneso.facebook.objects.User;	import com.davidcaneso.utils.LiveTrace		public class FBConnect extends EventDispatcher	{		private static var DEFAULT_PERMISSIONS	:Array = ['publish_stream']; 		private static var _instance			:FBConnect;				private var _oauth2						:FacebookOAuth2;		private var _permissions				:String;		private var _user						:User;				//public var proxyURL						:String = './proxy.php'				//----------------------//		//    PUBLIC METHODS    //		//----------------------//		public static function get instance():FBConnect		{			if (!FBConnect._instance) FBConnect._instance = new FBConnect(new PrivateClass());			return FBConnect._instance;		}				//----------------------//		//   	CONSTRUCTOR		//		//----------------------//		public function FBConnect(pvt:PrivateClass):void 		{			LiveTrace.instance						_user = new User();						//	do not add event listeners or init _oauth2 until the user has been tested for login and connection status			_oauth2 = new FacebookOAuth2();			_oauth2.addEventListener(GraphEvent.USER_TEST_COMPLETE, _onConnectedUser);			//_oauth2.addEventListener(GraphEvent.LOGGED_IN, _onOAuth2Login);			//_oauth2.init();		}				public function initOAuth2():void		{			LiveTrace.output('initOAuth2');			_oauth2.init();		}				//----------------------//		//   	GETTERS			//		//----------------------//		public function get loggedIn()	:Boolean 	{ return _oauth2.loggedIn 		}		public function get session()	:Session 	{ return _oauth2.session		}		public function get token()		:String 	{ return session.access_token 	}		public function get user()		:User		{ return _user 	}						public function changePermissions(permissionsList:Array):void		{			var _permissionsList:String = DEFAULT_PERMISSIONS.toString();			if(permissionsList.length > 0) _permissionsList = permissionsList.toString();						_permissions = _permissionsList		}				public function login():void 		{			LiveTrace.output('login function loggedIn :'+loggedIn);			if (!loggedIn)			{				var options:Object = {};				//options.perms = _permissions;				options.scope = _permissions;								if(!_oauth2.hasEventListener(GraphEvent.LOGGED_IN)) _oauth2.addEventListener(GraphEvent.LOGGED_IN,_onOAuth2Login);				_oauth2.addEventListener(GraphEvent.LOGIN_WINDOW_OPEN,_onOAuth2WindowOpen);				_oauth2.addEventListener(GraphEvent.LOGIN_WINDOW_CLOSED,_onOAuth2WindowClosed);				LiveTrace.output('call _oauth2.login');				_oauth2.login(options);			}		}				public function logout():void		{			LiveTrace.output('FBConnect.logout');			if (loggedIn)			{				//				LiveTrace.output('call _oauth2.logout');				_oauth2.logout();			}		}				//----------------------//		//    PRIVATE METHODS	//		//----------------------//				//Authentication		private function _onOAuth2Login(e:GraphEvent):void		{			LiveTrace.output('FBConnect _onOAuth2Login loggedIn :'+loggedIn);			_oauth2.removeEventListener(GraphEvent.LOGGED_IN, _onOAuth2Login);			if(!_oauth2.hasEventListener(GraphEvent.LOGGED_OUT)) 	_oauth2.addEventListener(GraphEvent.LOGGED_OUT, _onOAuth2Logout);						_user.addEventListener(GraphEvent.USER_INFO_READY, 	_userProfileReady);			_user.addEventListener(GraphEvent.ALBUM_INFO_READY, _userAlbumsReady);			_user.addEventListener(GraphEvent.APP_ALBUM_CREATED, _userAppAlbumCreated);			_user.addEventListener(GraphEvent.APP_ALBUM_CREATED_ERROR, _userAppAlbumCreatedError);			//_user.addEventListener(GraphEvent.ALBUM_IMAGES_INFO_READY, _userAlbumImagesReady);			//			//			if(session != null)			{				LiveTrace.output('FBConnect _onOAuth2Login session uid :'+session.uid);				_user.loadInfo(session.uid);			}					}				//		private function _onConnectedUser(e:GraphEvent):void		{			LiveTrace.output('_onConnectedUser loggedIn :'+loggedIn);			_oauth2.removeEventListener(GraphEvent.USER_TEST_COMPLETE, _onConnectedUser);						if(loggedIn)			{				if(!_oauth2.hasEventListener(GraphEvent.LOGGED_IN))		_oauth2.addEventListener(GraphEvent.LOGGED_IN,_onOAuth2Login);				if(!_oauth2.hasEventListener(GraphEvent.LOGGED_OUT)) 	_oauth2.addEventListener(GraphEvent.LOGGED_OUT, _onOAuth2Logout);								_user.addEventListener(GraphEvent.USER_INFO_READY, 	_userProfileReady);				_user.addEventListener(GraphEvent.ALBUM_INFO_READY, _userAlbumsReady);				_user.addEventListener(GraphEvent.APP_ALBUM_CREATED, _userAppAlbumCreated);				_user.addEventListener(GraphEvent.APP_ALBUM_CREATED_ERROR, _userAppAlbumCreatedError);				LiveTrace.output('_onConnectedUser User.loadInfo');				_user.loadInfo(session.uid);			}			else			{				_oauth2.addEventListener(GraphEvent.LOGGED_IN, _onOAuth2Login);			}									//_user.addEventListener(GraphEvent.ALBUM_IMAGES_INFO_READY, _userAlbumImagesReady);			//_user.loadInfo(session.uid);						dispatchEvent(new GraphEvent(GraphEvent.USER_TEST_COMPLETE))		}		//				private function _onOAuth2Logout(e:GraphEvent = null):void		{			LiveTrace.output('FBConnect _onOAuth2Logout');			_oauth2.addEventListener(GraphEvent.LOGGED_IN, _onOAuth2Login);			_oauth2.removeEventListener(GraphEvent.LOGGED_OUT, _onOAuth2Logout);						_user.removeEventListener(GraphEvent.USER_INFO_READY, 	_userProfileReady);			_user.removeEventListener(GraphEvent.ALBUM_INFO_READY, _userAlbumsReady);			_user.removeEventListener(GraphEvent.APP_ALBUM_CREATED, _userAppAlbumCreated);			_user.removeEventListener(GraphEvent.APP_ALBUM_CREATED_ERROR, _userAppAlbumCreatedError);			//_user.removeEventListener(GraphEvent.ALBUM_IMAGES_INFO_READY, _userAlbumImagesReady);			_user.clearUserData();						dispatchEvent(new GraphEvent(GraphEvent.LOGGED_OUT));		}				private function _onOAuth2WindowOpen(e:GraphEvent):void {dispatchEvent(new GraphEvent(GraphEvent.LOGIN_WINDOW_OPEN));}		private function _onOAuth2WindowClosed(e:GraphEvent):void {dispatchEvent(new GraphEvent(GraphEvent.LOGIN_WINDOW_CLOSED));}				private function _userProfileReady(e:GraphEvent):void		{			LiveTrace.output('FBConnect:: _userProfileReady');			_user.removeEventListener(GraphEvent.USER_INFO_READY, _userProfileReady);			dispatchEvent(new GraphEvent(GraphEvent.LOGGED_IN, _user));		}				private function _userAlbumsReady(e:GraphEvent):void		{			LiveTrace.output('_userAlbumsReady');			_user.removeEventListener(GraphEvent.ALBUM_INFO_READY, _userAlbumsReady);			dispatchEvent(new GraphEvent(GraphEvent.ALBUM_INFO_READY));		}				private function _userAppAlbumCreated(e:GraphEvent):void		{			LiveTrace.output('FBConnect:: _userAppAlbumCreated');			_user.removeEventListener(GraphEvent.APP_ALBUM_CREATED, _userAppAlbumCreated);			_user.removeEventListener(GraphEvent.APP_ALBUM_CREATED_ERROR, _userAppAlbumCreatedError);			dispatchEvent(new GraphEvent(GraphEvent.APP_ALBUM_CREATED))		}				private function _userAppAlbumCreatedError(e:GraphEvent):void		{			LiveTrace.output('FBConnect:: _userAppAlbumCreatedError');			_user.removeEventListener(GraphEvent.APP_ALBUM_CREATED, _userAppAlbumCreated);			_user.removeEventListener(GraphEvent.APP_ALBUM_CREATED_ERROR, _userAppAlbumCreatedError);			dispatchEvent(new GraphEvent(GraphEvent.APP_ALBUM_CREATED_ERROR))		}				private function _userAlbumImagesReady(e:GraphEvent):void		{			LiveTrace.output('_albumImagesReady');			_user.removeEventListener(GraphEvent.ALBUM_IMAGES_INFO_READY, _userAlbumImagesReady);			dispatchEvent(new GraphEvent(GraphEvent.ALBUM_IMAGES_INFO_READY));		}					}}//	singleton enforcerclass PrivateClass{	function PrivateClass():void { }}
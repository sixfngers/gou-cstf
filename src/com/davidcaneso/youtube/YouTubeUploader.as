/** * Created with IntelliJ IDEA. * User: work * Date: 1/30/13 * Time: 7:08 AM * To change this template use File | Settings | File Templates. */package com.davidcaneso.youtube{import com.davidcaneso.utils.DataValidator;import flash.events.EventDispatcher;import flash.events.Event;import flash.events.ProgressEvent;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.net.URLVariables;import flash.utils.ByteArray;import ru.inspirit.net.MultipartURLLoader;public class YouTubeUploader extends EventDispatcher	{		private var _requestTokenScript:String;		private var _uploader:MultipartURLLoader;		private var _loader:URLLoader;		private var _token:String;		private var _videoUploadUrl:String;		private var _uploadedFileName:String;				public function YouTubeUploader(tokenScriptUrl:String)		{			_requestTokenScript = tokenScriptUrl;			_uploader = new MultipartURLLoader();			_uploader.dataFormat = URLLoaderDataFormat.BINARY;			_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.BINARY;		}		public function requestUploadToken(username:String,  password:String, videoTitle:String, videoDescription:String):void		{			if(DataValidator.stringIsDefined(videoTitle) && DataValidator.stringIsDefined(videoDescription))			{				_uploader.addEventListener(Event.COMPLETE, _handleLoginComplete);				_uploader.addVariable('video_title', videoTitle);				_uploader.addVariable('video_description', videoDescription);				_uploader.addVariable('u', username);				_uploader.addVariable('p', password);				_uploader.load(_requestTokenScript);			}			else			{				var e:YouTubeUploaderEvent = new YouTubeUploaderEvent(YouTubeUploaderEvent.LOGIN_FAIL);					e.failReason = YouTubeUploaderEvent.UNDEFINED_DESCRIPTION;				if(DataValidator.stringIsDefined(videoTitle))					e.failReason = YouTubeUploaderEvent.UNDEFINED_TITLE;				dispatchEvent(e);			}		}		public function initUpload(url:String, fileName:String):void		{			//	check to see if the user is logged in			if(_token.length > 0 && _videoUploadUrl.length > 0)			{				_uploadedFileName = fileName;				_loader.addEventListener(ProgressEvent.PROGRESS, _handleUploadProgress);				_loader.addEventListener(Event.COMPLETE, _uploadFileToYouTubeAccount, false, 0, true);				_loader.load(new URLRequest(url));			}			else			{				var event:YouTubeUploaderEvent = new YouTubeUploaderEvent(YouTubeUploaderEvent.FILE_UPLOAD_FAIL);					event.failReason = YouTubeUploaderEvent.USER_NOT_LOGGED_IN;				dispatchEvent(event);			}		}		private function _uploadFileToYouTubeAccount(e:Event):void		{			//	move on to sending file			var bytes:ByteArray = _loader.data;			_uploader.addVariable("token", _token);			_uploader.addFile(bytes, _uploadedFileName, "file");			_uploader.addEventListener(Event.COMPLETE, _uploadFileToYouTubeAccountComplete);			_uploader.load(_videoUploadUrl);			dispatchEvent(new YouTubeUploaderEvent(YouTubeUploaderEvent.FILE_UPLOAD_START));		}		private function _handleLoginComplete(e:Event):void		{			var eventName:String;			_uploader.removeEventListener(Event.COMPLETE, _handleLoginComplete);			var returnedString:String = MultipartURLLoader(e.target).loader.data.toString();			var returned:URLVariables = new URLVariables(returnedString);			if(returned.success == 'true')			{				_token = returned.token;				_videoUploadUrl = returned.rurl;				eventName = YouTubeUploaderEvent.LOGIN_SUCCESS;			}			else			{				eventName = YouTubeUploaderEvent.LOGIN_FAIL;			}			dispatchEvent(new YouTubeUploaderEvent(eventName));		}		private function _handleUploadProgress(e:ProgressEvent):void		{			dispatchEvent(e);		}		private function _uploadFileToYouTubeAccountComplete(e:Event):void		{			_uploader.removeEventListener(Event.COMPLETE, _uploadFileToYouTubeAccountComplete);			var returnedString:String = MultipartURLLoader(e.target).loader.data.toString();			var returned:URLVariables = new URLVariables(returnedString);			var event:YouTubeUploaderEvent;			if(returned.success == 'true')			{				_token = '';				_videoUploadUrl = '';				event = new YouTubeUploaderEvent(YouTubeUploaderEvent.FILE_UPLOAD_SUCCESS);				event.youTubeVideoUrl = returned.vidurl;			}			else			{				event = new YouTubeUploaderEvent(YouTubeUploaderEvent.FILE_UPLOAD_FAIL);				switch (returned.code)				{					//	duplicate only works when you are checking the status of an upload. not during the upload					//case 'DUPLICATE':					//	event.failReason = YouTubeUploaderEvent.DUPLICATE;					//	break;					case 'INVALID_TOKEN':						event.failReason = YouTubeUploaderEvent.INVALID_TOKEN;						break;					case 'MISSING_TOKEN':						event.failReason = YouTubeUploaderEvent.MISSING_TOKEN;						break;					case 'TOKEN_EXPIRED':						event.failReason = YouTubeUploaderEvent.TOKEN_EXPIRED;						break;				}			}						event.status = returned.status;			event.code = returned.code;			dispatchEvent(event);		}	}}
/*author: David Canesocontact:code@davidcaneso.comversion:1.0date:09/15/09changeLog:v_1.0first buildTODO:usage::license:The MIT LicenseCopyright (c) 2009 David CanesoPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package com.davidcaneso.sound {	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	// imports	public class Effect	{		//properties		private var _sound:Sound;		private var _channel:SoundChannel;		private var _transform:SoundTransform;		private var volume:Number;		private var _loopPan:Number;		private var _isPlaying:Boolean;		//constructor		public function Effect(librarySound:Sound):void		{			set_sound(librarySound);			set_isPlaying(false);		}		//methods		public function playEffect(vol:Number=1,pan:Number=0,loop:Number=0):void		{			var s:Sound = get_sound();			var loopTotal:Number = loop;			set_loopVol(vol);			set_loopPan(pan);			set_transform(new SoundTransform(vol,pan));			if ((s == null))			{				//this could happen if you have too many sounds playing at once				//or if your viewer doesn't have a sound card				trace('sound is null do not play');				return;			}			if ((loopTotal > 0))			{				set_channel(s.play(0,loopTotal));			}			else			{				set_channel(s.play());			}			set_isPlaying(true);			var ch:SoundChannel = get_channel();			if ((loopTotal < 0))			{				ch.addEventListener(Event.SOUND_COMPLETE,loopEffect);			}			else			{				ch.addEventListener(Event.SOUND_COMPLETE,finishEffect);			}			ch.soundTransform = get_transform();		}		public function stopEffect():void		{			//trace('hit stop effect')			var ch:SoundChannel = get_channel();			ch.removeEventListener(Event.SOUND_COMPLETE,loopEffect);			try			{				set_isPlaying(false);				ch.stop();			}			catch (e:Error)			{				trace(('caught error in Effect class ' + e.toString()));			}		}		private function finishEffect(e:Event):void		{			//trace('hit stop effect')			var ch:SoundChannel = get_channel();			ch.removeEventListener(Event.SOUND_COMPLETE,finishEffect);			try			{				set_isPlaying(false);				ch.stop();			}			catch (e:Error)			{				trace(('caught error in Effect class ' + e.toString()));			}		}		public function changeVolume(vol:Number):void		{			set_loopVol(vol);			set_transform(new SoundTransform(vol,get_loopPan()));			var ch:SoundChannel = get_channel();			ch.soundTransform = get_transform();		}		//private functions		private function loopEffect(evt:Event):void		{			//trace('hit loop '+get_loopVol())			var ch:SoundChannel = get_channel();			ch.removeEventListener(Event.SOUND_COMPLETE,loopEffect);			playEffect(get_loopVol(),get_loopPan(),-1);		}		//getters & setters		public function get_sound():Sound		{			return _sound;		}		private function set_sound(val:Sound):void		{			_sound = val;		}		public function get_channel():SoundChannel		{			return _channel;		}		private function set_channel(val:SoundChannel):void		{			_channel = val;		}		public function get_transform():SoundTransform		{			return _transform;		}		private function set_transform(val:SoundTransform):void		{			_transform = val;		}		public function get_loopVol():Number		{			return volume;		}		public function set_loopVol(val:Number):void		{			volume = val;		}		public function get_loopPan():Number		{			return _loopPan;		}		private function set_loopPan(val:Number):void		{			_loopPan = val;		}		public function get_isPlaying():Boolean		{			return _isPlaying;		}		private function set_isPlaying(val:Boolean):void		{			_isPlaying = val;		}	}}
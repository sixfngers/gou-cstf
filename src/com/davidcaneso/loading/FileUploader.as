//IMPORTANT NOTE://requires the script to return a success=true or success=false var//and a path=string if success is true //or  a reason=string if success is falsepackage com.davidcaneso.loading {	import com.davidcaneso.events.loading.FileUploaderEvent;	import flash.events.DataEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	public class FileUploader extends EventDispatcher	{		//development properties		public var showTraces:Boolean = false;		private var _className:String = 'FileUploader';		//properties		private var _dev:Boolean;		private var _devFile:String;		private var _uploadScript:String;		private var _fileReference:FileReference;		public var fileFilter:FileFilter;		//contstructor		public function FileUploader(uploadScript:String,devMode:Boolean=false,devFile:String='devFilePath'):void		{			_dev = devMode;			_devFile = devFile;			fileFilter = new FileFilter("Images","*.mov;*.mp4;*.flv;*.f4v");			_uploadScript = uploadScript;			_fileReference = new FileReference();			_fileReference.addEventListener(Event.OPEN,_handleFileReferenceEvent);			_fileReference.addEventListener(Event.SELECT,_handleFileReferenceEvent);			_fileReference.addEventListener(Event.CANCEL,_handleFileReferenceEvent);			_fileReference.addEventListener(IOErrorEvent.IO_ERROR,_handleFileReferenceEvent);			_fileReference.addEventListener(ProgressEvent.PROGRESS,_handleFileReferenceEvent);			_fileReference.addEventListener(Event.COMPLETE,_handleFileReferenceEvent);			_fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,_handleFileReferenceEvent);		}		public function browseForFile():void		{			_fileReference.browse([fileFilter]);			dispatchEvent(new FileUploaderEvent(FileUploaderEvent.BROWSE_START,'',0));		}		//private function		private function _handleFileReferenceEvent(e:Event):void		{			switch (e.type)			{				case Event.OPEN :					_classTrace(('fileOpenHandler ' + e.toString()));					dispatchEvent(new FileUploaderEvent(FileUploaderEvent.START,'',0));					break;				case Event.CANCEL :					_classTrace(('Event.CANCEL ' + e.toString()));					dispatchEvent(new FileUploaderEvent(FileUploaderEvent.BROWSE_CANCEL,'',0));					break;				case Event.SELECT :					_classTrace(('Event.SELECT ' + e.toString()));					_fileReference = FileReference(e.target);					_classTrace(e.target.toString());					var date:Date = new Date  ;					var prefix:String = String(date.getTime());					var params:URLVariables = new URLVariables  ;					params.file = prefix;					var uploadURL:URLRequest = new URLRequest  ;					uploadURL.url = String(_uploadScript);					uploadURL.method = URLRequestMethod.POST;					uploadURL.data = params;					if (_dev)					{						dispatchEvent(new FileUploaderEvent(FileUploaderEvent.COMPLETE,_devFile,100));					}					else					{						_fileReference.upload(uploadURL);					}					break;				case IOErrorEvent.IO_ERROR :					_classTrace(("ioErrorHandler: " + IOErrorEvent(e)));					dispatchEvent(new FileUploaderEvent(FileUploaderEvent.ERROR,'',0));					break;				case ProgressEvent.PROGRESS :					var file:FileReference = FileReference(e.target);					_classTrace(((((("progressHandler: name=" + file.name) + " bytesLoaded=") + ProgressEvent(e).bytesLoaded) + " bytesTotal=") + ProgressEvent(e).bytesTotal));					var percent:int = int(ProgressEvent(e).bytesLoaded / ProgressEvent(e).bytesTotal * 100);					dispatchEvent(new FileUploaderEvent(FileUploaderEvent.UPDATE,file.name,percent));					break;				case Event.COMPLETE :					_classTrace(('Event.COMPLETE ' + e.toString()));					break;				case DataEvent.UPLOAD_COMPLETE_DATA :					_classTrace(("dataCompleteHandler: " + FileReference(DataEvent(e).target).name));					var returned:Object = DataEvent(e)['data'];					_classTrace(('returned = ' + returned));					var returnedString:URLVariables = new URLVariables(returned.toString());					_classTrace(('success  =' + returnedString.success));					if (returnedString.success)					{						dispatchEvent(new FileUploaderEvent(FileUploaderEvent.COMPLETE,returnedString.path,100));					}					else					{						_classTrace(('error: ' + returned.reason));						dispatchEvent(new FileUploaderEvent(FileUploaderEvent.ERROR,returned.reason,0));					}					break;			}		}		private function _classTrace(val: * ):void		{			if (showTraces)			{				trace(((_className + ': ') + val));			}		}	}}
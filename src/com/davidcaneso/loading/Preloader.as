package com.davidcaneso.loading {	import com.davidcaneso.events.loading.PreloaderEvent;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLRequest;	import flash.system.LoaderContext;	// imports	public class Preloader extends Sprite	{		//properties		private var _urlReq:URLRequest;		private var _file:String;		private var _targ:DisplayObjectContainer;		private var _loadStack:Array;		private var _itemsLoaded:int;		private var _itemsTotal:int;		private var _loader:Loader;		private var _percent:int;		private var _loaderContext:LoaderContext;		//development properties		public var showTraces:Boolean = false;		private var _className:String = 'Preloader';		//contstructor		public function Preloader()		{			_loadStack = new Array  ;			_loaderContext = new LoaderContext  ;		}		//public methods		public function addToLoadStack(file:String,targ:DisplayObjectContainer):void		{			var arrayToAdd:Array = new Array  ;			arrayToAdd.push(file);			arrayToAdd.push(DisplayObjectContainer(targ));			_loadStack.push(arrayToAdd);		}		public function clearLoadStack():void		{			var i:int;			var limit:int = _loadStack.length;			var shifted:Object;			for (i = limit; i > 0; i--)			{				shifted = _loadStack.shift();			}			_itemsLoaded = 0;			_itemsTotal = 0;			_percent = 0;		}		public function startLoad():void		{			classTrace(("hit start load in Preloader " + loadStack));			var totalToLoad:int = _loadStack.length;			_percent = 0;			_itemsLoaded = 0;			_itemsTotal = totalToLoad;			if ((totalToLoad == 0))			{				//classTrace("no defined files to load")				allLoadsComplete();			}			else			{				//classTrace("load next file in stack")				loadNextInStack();			}		}		public function stopLoad():void		{			//classTrace("hit stop load in Preloader");			//classTrace(_file+' was loading into '+_targ)			try			{				_loader.close();			}			catch (err:Error)			{				classTrace('no load to close');			}			deleteListeners();		}		public function destroy():void		{			stopLoad();			deleteListeners();			clearLoadStack();		}		//getters & setters		public function get targ():DisplayObjectContainer		{			return _targ;		}		public function get loadStack():Array		{			return _loadStack;		}		public function get loaderContext():LoaderContext		{			return _loaderContext;		}		public function set loaderContext(val:LoaderContext):void		{			_loaderContext = val;		}		public function get loader():Loader		{			return _loader;		}		//private methods		private function loadNextInStack():void		{			deleteListeners();			_loader = new Loader  ;			var stack:Object = _loadStack.shift();			configureListeners(_loader.contentLoaderInfo);			addChild(_loader);			_file = stack[0];			_targ = stack[1];			classTrace(((("now loading " + _file) + " into ") + _targ));			clearContainer(_targ);			_urlReq = new URLRequest(_file);			try			{				_loader.load(_urlReq,_loaderContext);				dispatchEvent(new PreloaderEvent(PreloaderEvent.FILE_CHANGE,_percent,_file,_targ));			}			catch (err:Error)			{				classTrace(((('cannot load ' + _file) + ' into ') + _targ));			}		}		private function configureListeners(dispatcher:IEventDispatcher):void		{			dispatcher.addEventListener(Event.COMPLETE,loadComplete);			dispatcher.addEventListener(Event.INIT,loadInit);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR,loadError);			dispatcher.addEventListener(Event.OPEN,loadStart);			dispatcher.addEventListener(ProgressEvent.PROGRESS,loadProgress);			dispatcher.addEventListener(Event.UNLOAD,unloadFile);		}		private function deleteListeners():void		{			var loader:Loader = _loader;			if ((loader != null))			{				var dispatcher:IEventDispatcher = _loader.contentLoaderInfo;				if ((dispatcher != null))				{					dispatcher.removeEventListener(Event.COMPLETE,loadComplete);					dispatcher.removeEventListener(Event.INIT,loadInit);					dispatcher.removeEventListener(IOErrorEvent.IO_ERROR,loadError);					dispatcher.removeEventListener(Event.OPEN,loadStart);					dispatcher.removeEventListener(ProgressEvent.PROGRESS,loadProgress);					dispatcher.removeEventListener(Event.UNLOAD,unloadFile);				}			}		}		private function loadStart(evt:Event):void		{			dispatchEvent(new PreloaderEvent(PreloaderEvent.START,_percent,_file,_targ));		}		private function loadInit(evt:Event):void		{			//classTrace("initHandler: " + evt);		}		private function loadComplete(evt:Event):void		{            try            {                //classTrace("completeHandler: " + evt);                var loadStack:Array = _loadStack;                if ((evt != null))                {                    var toMove:DisplayObject = _loader.content;                    var moveTo:DisplayObjectContainer = DisplayObjectContainer(_targ);                    moveTo.addChild(toMove);                }                if (loadStack.length > 0)                {                    //classTrace("more files to load");                    _itemsLoaded++;                    loadNextInStack();                }                else                {                    //classTrace("no more to load");                    allLoadsComplete();                }            }catch(e:*)            {//                bullshit error by flash            }		}		private function loadError(evt:IOErrorEvent):void		{			classTrace(("ioErrorHandler: " + evt));			evt.stopPropagation();			loadComplete(null);		}		private function unloadFile(evt:Event):void		{			classTrace(("unLoadHandler: " + evt));		}		private function loadProgress(evt:ProgressEvent):void		{			var itemsTotal:int = _itemsTotal;			var lBytes:int = evt.bytesLoaded;			var tBytes:int = evt.bytesTotal;			var pctPerItem:Number = (100 / itemsTotal);			var pct:Number = lBytes / tBytes;			_percent = ((pctPerItem * pct)) + (pctPerItem * _itemsLoaded);			//classTrace("progressHandler: bytesLoaded=" + evt.bytesLoaded + " bytesTotal=" + evt.bytesTotal);			dispatchEvent(new PreloaderEvent(PreloaderEvent.UPDATE,_percent,_file,_targ));		}		private function allLoadsComplete():void		{			//classTrace("all loads completed")			_percent = 100;			dispatchEvent(new PreloaderEvent(PreloaderEvent.COMPLETE,_percent,_file,_targ,_loader.contentLoaderInfo));		}		private function clearContainer(mc:DisplayObjectContainer):void		{			var target:DisplayObjectContainer = DisplayObjectContainer(mc);			var targetChildren:int = target.numChildren;			//trace(target+'-'+target.name+' has '+ targetChildren +' children to remove')			if ((targetChildren > 0))			{				for (var i:int = 0; i < targetChildren; i++)				{					try					{						//	In place because if you are removing a Section						//	and the dev hasnt setup removed from stage the section will still be destroyed						MovieClip(target.getChildAt(0)).destroy();					}					catch (e:Error)					{						classTrace(('nothing to destroy in ' + target));					}					target.removeChildAt(0);				}			}		}		private function classTrace(val: * ):void		{			if (showTraces)			{				trace(((_className + ': ') + val));			}		}	}}
/*	description	:	use this class whenever you need to call on a server-side script.										we use a lot with send to a friend functionality										Tested with php (what we most commonly use) script can return text or a text/value pairs.					**	Note **						in AS2 all of our php scripts returned value pairs starting with and ending with an &						this throws an error in AS3 text value pairs cannot start or end with an &												&var0=val0&	-	will cause an error in AS3 but works in AS2						var0=val0	-	will work in both AS2 and AS3									author		: 	David Caneso	contact		:	code@davidcaneso.com	version		:	2.0	date		:	02/10/10	changeLog	:	v_2.0	02/10/10							moved into package com.davidcaneso.loading										v_1.3	01/28/10							changed the get_loadedData() function so now if the _dataType = 'variables' the function returns urlVariables instead of a string										v_1.2	07/15/09							added loader.close() to the destroy function so any server contact in action will be terminated										v_1.1	added a _dev property so testing can be done in the ide as if its running on a server							changed the get_loadedData() function so if the class is running in the ide it will return the _devLoadedData var							instead of the _loadedData var which will not be set when running in the ide										v_1.0	first build													TODO		:						usage:		:	import com.davidcaneso.loading.ServerLoader;					//	a php file named script.php that returns text "1" i.e. print("1");					//	must be available in the same folder as the swf for this example to work.					//	to use dataType variables you need to return text/value pairs from the php i.e. print("result=1");																				var timeline:Sprite = new Sprite()					addChild(timeline)										var phpLoader = new ServerLoader(timeline)					addEventListener(			'serverLoadOpen'			,handleServerOpen		)					addEventListener(			'serverLoadComplete'		,handleServerReturn		)					addEventListener(			'serverLoadError'			,handleServerError		)					timeline.addEventListener(	Event.REMOVED_FROM_STAGE	,destroyServerLoader	)										var url:String = 'script.php'					var vars:URLVariables = new URLVariables()					vars.t = 1;					vars.v = 0;					//					var dataType:String = 'text';					//var dataType:String = 'variables';										//	set_devLoadedData() function is for testing in the ide only					//	the php will not return the correct value in the ide so set a value when testing					//	and calling get_loadedData() will return this value when running in the ide					//	there is no need to comment this out as it will be ignored when running live and is an easy way to test php script failures.					//	if the dataType is  set to 'variables' you will need to set name/value pairs as URLVariables ex. phpLoader.set_devLoadedData(new URLVariables('result=1'))					phpLoader.set_devLoadedData('1')					phpLoader.startLoad(url, vars, dataType)																									function handleServerReturn(evt:Event):void					{						if(phpLoader.get_dataType() == 'variables'){							trace('loaded data result = '+phpLoader.get_loadedData().result)						}else{							trace('loaded data result = '+phpLoader.get_loadedData())						}												removeChild(timeline)					}										function handleServerOpen(evt:Event):void					{						trace('contacting php script')					}										function handleServerError(evt:Event):void					{						trace('an error has occurred')					}										function destroyServerLoader(evt:Event):void					{						removeEventListener(			'serverLoadOpen'			,handleServerOpen		)						removeEventListener(			'serverLoadComplete'		,handleServerReturn		)						removeEventListener(			'serverLoadError'			,handleServerError		)						timeline.removeEventListener(	Event.REMOVED_FROM_STAGE	,destroyServerLoader	)						phpLoader.destroy()					}						license		:	The MIT License					Copyright (c) 2009 David Caneso					Permission is hereby granted, free of charge, to any person obtaining a copy					of this software and associated documentation files (the "Software"), to deal					in the Software without restriction, including without limitation the rights					to use, copy, modify, merge, publish, distribute, sublicense, and/or sell					copies of the Software, and to permit persons to whom the Software is					furnished to do so, subject to the following conditions:					The above copyright notice and this permission notice shall be included in					all copies or substantial portions of the Software.					THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR					IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,					FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE					AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER					LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,					OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN					THE SOFTWARE.*/package com.davidcaneso.loading {	import com.davidcaneso.events.loading.ServerLoaderEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;				public class ServerLoader extends EventDispatcher	{		//properties		private var _request:URLRequest;		private var _loader:URLLoader;		private var _dataType:String;		private var _loadedData:*;		//for development only		private var _dev:Boolean;		private var _devLoadedData:*;		private var _showTraces:Boolean = false;		//constructor		public function ServerLoader(dev:Boolean=false, showTraces:Boolean = false)		{			_dev = dev;			_showTraces = showTraces;			_request = new URLRequest();            _loader = new URLLoader();            _dataType = 'text';			setupListeners();		}		private function setupListeners():void		{				_loader.addEventListener(	Event.OPEN							,loadOpenHandler			);			_loader.addEventListener(	IOErrorEvent.IO_ERROR				,loadErrorHandler			);			_loader.addEventListener(	HTTPStatusEvent.HTTP_STATUS			,loadHttpStatusHandler		);			_loader.addEventListener(	Event.COMPLETE						,loadCompleteHandler		);		}		private function killListeners():void		{				_loader.removeEventListener(	Event.OPEN							,loadOpenHandler			);			_loader.removeEventListener(	IOErrorEvent.IO_ERROR				,loadErrorHandler			);			_loader.removeEventListener(	HTTPStatusEvent.HTTP_STATUS			,loadHttpStatusHandler		);			_loader.removeEventListener(	Event.COMPLETE						,loadCompleteHandler		);		}				//methods		public function startLoad(scriptUrl:String, urlVariables:URLVariables = null, dataFormat:String = 'text', usePost:Boolean = false):void		{			stopLoad();			setupListeners();						_dataType = dataFormat;						if(usePost){				_request.method = URLRequestMethod.POST;			}						_request.url = scriptUrl;						if(urlVariables != null)			{				_request.data = urlVariables;			}						try{								if(this.dev)	loadCompleteHandler(null);				else			_loader.load(_request);			}catch (error:SecurityError){				_classTrace("A SecurityError has occurred in startLoad.");				dispatchEvent(new ServerLoaderEvent(ServerLoaderEvent.ERROR));			}		}		public function stopLoad():void		{			try			{				_loader.close();				killListeners();			}catch(e:Error){				_classTrace('caught error '+e.toString());			}		}		public function destroy():void		{			_classTrace("destroy ServerLoader");			_loader.close();			killListeners();		}		private function loadOpenHandler(e:Event):void		{			_classTrace("\n"+_request.url+" file load opened \n");			dispatchEvent(new ServerLoaderEvent(ServerLoaderEvent.START));		}		private function loadErrorHandler(evt:Event):void		{			_classTrace("\n"+_request.url+" ioerror occurred\n");			dispatchEvent(new ServerLoaderEvent(ServerLoaderEvent.ERROR));		}		private function loadHttpStatusHandler(evt:Event):void		{			_classTrace("\n"+_request.url+" httpStatus"+"\n"+evt.toString()+"\n");		}		private function loadCompleteHandler(evt:Event):void		{			_classTrace("\n"+_request.url+" load complete \n");						if(_dev){				if(_devLoadedData == null || _devLoadedData == undefined){					_classTrace('_devLoadedData is not defined');				}else{					_classTrace('use dev data');					_loadedData = _devLoadedData;				}			}else{				_loadedData = _loader.data;			}						dispatchEvent(new ServerLoaderEvent(ServerLoaderEvent.COMPLETE, _loadedData));		}		private function _classTrace(val:String):void		{			if(_showTraces) trace(val);		}																						public function set dev(val:Boolean):void		{			var valid:Boolean = false;						if(val)	valid = true;						_dev = valid;						_classTrace('_dev = '+_dev);		}		public function get dataType():String		{			return _loader.dataFormat;		}		public function get loadedData():*		{			if (_dev)			{				return _devLoadedData;			}			else			{				return _loadedData;			}		}		public function get dev():Boolean		{			return _dev;		}		public function get devLoadedData():*		{			return _devLoadedData;		}		public function set devLoadedData(val: * ):void		{			_devLoadedData = val;		}	}}
package com.davidcaneso.loading {	import com.davidcaneso.events.loading.CssLoaderEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	public class CssLoader extends EventDispatcher	{		private var _cssText:String;		private var _request:URLRequest;		private var _loader:URLLoader;		//constructor		public function CssLoader(filePath:String)		{			_request = new URLRequest(filePath);			_loader = new URLLoader  ;		}		//public methods		public function startLoad():void		{			setupListeners();			try			{				_loader.load(_request);				dispatchEvent(new CssLoaderEvent(CssLoaderEvent.START));			}			catch (error:SecurityError)			{				trace("A SecurityError has occurred.");			}		}		public function stopLoad():void		{			killListeners();			try			{				_loader.close();			}			catch (error:Error)			{				trace('_loader is not active you cannot close a URLLoader that isn\'t loading anything');			}		}		public function destroy():void		{			trace(("destroy CSSLoader for " + _request.url));			stopLoad();		}		//private methods		private function loadCompleteHandler(event:Event):void		{			trace((("\n" + _request.url) + " load complete \n"));			_cssText = _loader.data;			//set_loadedData(get_loader().data)			//_styleSheet.parseCSS(get_loadedData());			dispatchEvent(new CssLoaderEvent(CssLoaderEvent.COMPLETE,_cssText));		}		private function loadErrorHandler(event:Event):void		{			trace(((('\n' + 'error occurred loading ') + _request.url) + '\n'));			dispatchEvent(new CssLoaderEvent(CssLoaderEvent.ERROR,_cssText));		}		private function setupListeners():void		{			_loader.addEventListener(Event.COMPLETE,loadCompleteHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR,loadErrorHandler);		}		private function killListeners():void		{			_loader.removeEventListener(Event.COMPLETE,loadCompleteHandler);			_loader.removeEventListener(IOErrorEvent.IO_ERROR,loadErrorHandler);		}	}}
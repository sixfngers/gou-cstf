/*author: David Canesocontact:info@davidcaneso.comversion:2.0date:01/21/11changeLog:version 2.0-01/21/11removed broadcaster from class. Objects must now listen for events on the xmlloader object itself.This makes things cleaner and removes the chance that multiple loaders conflict with each other.version 1.1-02/06/10moved into the com.davidcaneso.loading packageversion 1.0-first buildTODO:usage::license:The MIT LicenseCopyright (c) 2009 David CanesoPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package com.davidcaneso.loading {	import com.davidcaneso.events.loading.XmlLoaderEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	// imports	public class XmlLoader extends EventDispatcher	{		//vars		private var _xml:XML;		private var _request:URLRequest;		private var _loader:URLLoader;		//constructor		public function XmlLoader(filePath:String)		{			_request = new URLRequest(filePath);			_loader = new URLLoader  ;		}		//public methods		public function startLoad():void		{			setupListeners();			try			{				_loader.load(_request);				dispatchEvent(new XmlLoaderEvent(XmlLoaderEvent.START));			}			catch (error:SecurityError)			{				trace("A SecurityError has occurred.");			}		}		public function stopLoad():void		{			killListeners();			try			{				_loader.close();			}			catch (error:Error)			{				trace('_loader is not active you cannot close a URLLoader that isn\'t loading anything');			}		}		public function destroy():void		{			trace(("destroy XmlLoader for " + _request.url));			stopLoad();		}		//private methods		private function setupListeners():void		{			_loader.addEventListener(Event.COMPLETE,loadCompleteHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR,loadErrorHandler);		}		private function killListeners():void		{			_loader.removeEventListener(Event.COMPLETE,loadCompleteHandler);			_loader.removeEventListener(IOErrorEvent.IO_ERROR,loadErrorHandler);		}		private function loadCompleteHandler(e:Event):void		{			trace((("\n" + _request.url) + " load complete \n"));			_xml = XML(_loader.data);			dispatchEvent(new XmlLoaderEvent(XmlLoaderEvent.COMPLETE,_xml));		}		private function loadErrorHandler(e:Event):void		{			trace(((('\n' + 'an error occurred loading xml ') + _request.url) + '\n'));			dispatchEvent(new XmlLoaderEvent(XmlLoaderEvent.ERROR));		}	}}
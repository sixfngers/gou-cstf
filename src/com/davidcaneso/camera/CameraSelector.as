/*USAGE:var cam:Camera = Camera.getCamera();if (cam != null){    cam.addEventListener(StatusEvent.STATUS, statusHandler);    var vid:Video = new Video();    vid.attachCamera(cam);    addChild(vid);}function statusHandler(event:StatusEvent):void{    // This event gets dispatched when the user clicks the "Allow" or "Deny"    // button in the Flash Player Settings dialog box.    trace(event.code); // "Camera.Muted" or "Camera.Unmuted"}*///	Camera.getCamera needs a string of the camera index,//	NOT the name of the camera.//	_camera = Camera.getCamera( String( index ) );			package com.davidcaneso.camera{	import flash.display.Sprite;	import flash.media.Camera;	import flash.media.Video;	import flash.events.StatusEvent;	import flash.system.Security;    import flash.system.SecurityPanel;	import com.davidcaneso.events.camera.CameraEvent;		public class CameraSelector extends Sprite	{		//	properties		private var _firstCheck:Boolean;		private var _cameraAvailable:Boolean;		private var _screen:Video;		private var _cameraName:String;		private var _camera:Camera;		private var _fps:int = 30;		private var _showTraces:Boolean = false;				//	constructor		public function CameraSelector(videoWidth:int, videoHeight:int):void		{			_firstCheck = true;			_screen = new Video(videoWidth, videoHeight);						var index : int = 0;			for ( var i : int = 0 ; i < Camera.names.length ; i++ ) {				_classTrace(Camera.names[ i ]);				if ( Camera.names[ i ] == "USB Video Class Video" ) {					index = i;				}			}						_changeCamera(String(index));			_checkForAvailableCamera();			addChild(_screen);		}						//	public methods		public function startCamera():void		{			_classTrace('start camera = '+_camera);			if(!_cameraAvailable)			{				dispatchEvent(new CameraEvent(CameraEvent.UNAVAILABLE));				return;			}						if(_camera == null)			{				_classTrace('**** camera is null *****');				_changeCamera(_cameraName);			}						//	dont ask for permissions more than one time			//	if the user denys permission the first time			//	the second time the panel will not show up.			//	force the security panel open the second time.			if(_firstCheck)		_firstCheck = false;			else				if(_camera.muted) Security.showSettings(SecurityPanel.PRIVACY);						if(!_camera.hasEventListener(StatusEvent.STATUS))	_camera.addEventListener(StatusEvent.STATUS, statusHandler);						_camera.setMode(_screen.width, _screen.height, _fps);            _camera.setQuality(0, 80);			_screen.attachCamera( _camera );		}				public function stopCamera():void		{			_classTrace('stop camera = '+_camera);			_classTrace('stop screen = '+_screen);						if (_camera != null)			{				if(_camera.hasEventListener(StatusEvent.STATUS))	_camera.removeEventListener(StatusEvent.STATUS, statusHandler);				_screen.attachCamera( null );				_camera = null;			}		}				public function destroy():void		{			stopCamera();			_screen.clear();						if (_camera != null)			{				if(_camera.hasEventListener(StatusEvent.STATUS))	_camera.removeEventListener(StatusEvent.STATUS, statusHandler);				_screen.attachCamera( null );				_camera = null;			}						_screen = null;			_camera = null;		}				//	getters & setters		public function set showTraces(val:Boolean):void		{			_showTraces = val;		}		public function get screen():Video		{			return _screen;		}				public function get camera():Camera		{			return _camera;		}				public function get cameraName():String		{			return _cameraName;		}				//	private methods		private function _checkForAvailableCamera():void		{			if(_camera == null)	_cameraAvailable = false;			else				_cameraAvailable = true;		}				private function _changeCamera(cameraName:String  = ''):void		{			_cameraName = cameraName;						if(_cameraName.length == 0) _camera = null;			else						_camera = Camera.getCamera(_cameraName);		}				private function statusHandler(e:StatusEvent):void		{			// This event gets dispatched when the user clicks the "Allow" or "Deny" button in the Flash Player Settings dialog box.			// 	code will either be Camera.Muted or Camera.Unmuted"			_classTrace('\n\n'+e.code+'\n\n');							switch (e.code)			{				case "Camera.Muted":					_classTrace("User clicked Deny.");					dispatchEvent(new CameraEvent(CameraEvent.DENY));					break;				case "Camera.Unmuted":					_classTrace("User clicked Accept.");					dispatchEvent(new CameraEvent(CameraEvent.ALLOW));					break;			}		}						private function _classTrace(val:String):void		{			if(_showTraces) trace('CameraSelector: '+val);		}			}	}
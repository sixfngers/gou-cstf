package com.davidcaneso.utils{	//importsimport com.davidcaneso.utils.LiveTrace;import flash.errors.IllegalOperationError;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.Sprite;	import flash.text.TextFieldAutoSize;	import com.davidcaneso.display.buttons.BasicButton;	import com.davidcaneso.display.buttons.ToggleButton;	import com.davidcaneso.display.drawing.SquareArea;	import com.davidcaneso.events.buttonEvent.ToggleButtonEvent;	import com.davidcaneso.text.DynamicTextField;	public class LiveTrace extends Sprite	{		private static const DEFAULT_TEXTFIELD_WIDTH:int = 300;		private static const DEFAULT_TEXTFIELD_HEIGHT:int = 400;		private static const DEFAULT_MINIMUM_TEXTFIELD_WIDTH:int = 160;		private static const DEFAULT_MINIMUM_TEXTFIELD_HEIGHT:int = 100;		private static const DEFAULT_SQUARE_FILL:Number = 0x000000;		private static const DEFAULT_SQUARE_FILL_ALPHA:Number = 1;		private static const border:int = 3;		private static const topBarHeight:int = 24;		private static var _instance:LiveTrace;		private static var _tf:DynamicTextField;		private var _area:SquareArea;		private var _textFieldWidth:int;		private var _textFieldHeight:int;		private var _clearButton:BasicButton;		private var _hideButtonTextField:DynamicTextField;		private var _hideButton:ToggleButton;		//constructor		public static function get instance():LiveTrace		{			if (! LiveTrace._instance)			{				LiveTrace._instance = new LiveTrace(new PrivateClass  );			}			return LiveTrace._instance;		}		public static function output(val: * ):void		{			var outputVal:String = val.toString();			var lt:LiveTrace = LiveTrace.instance;            if (LiveTrace._tf.text.length > 0)			{				LiveTrace._tf.appendText('\n');			}			if ((outputVal == null))			{				outputVal = 'null';			}			LiveTrace._tf.appendText(outputVal);            trace(outputVal);		}		public static function outputObject(val:Object,heading:String='output object begin'):void		{			var s:String;			s = heading + ":\n************************************\n";			for (var property:String in val)			{				s +=  "- " + property + ": " + val[property] + "\n";			}			s +=  "************************************\n";			LiveTrace.output(s);		}		public static function clear():void		{			LiveTrace.instance._clearButtonInteract(null);		}		public static function changeSize(w:int,h:int):void		{			var newWidth:int = w;			var newHeight:int = h;			//make sure the buttons dont hit each other			if ((newWidth <= LiveTrace.DEFAULT_MINIMUM_TEXTFIELD_WIDTH))			{				newWidth = LiveTrace.DEFAULT_MINIMUM_TEXTFIELD_WIDTH;			}			if ((newHeight <= LiveTrace.DEFAULT_MINIMUM_TEXTFIELD_HEIGHT))			{				newHeight = LiveTrace.DEFAULT_MINIMUM_TEXTFIELD_HEIGHT;			}			LiveTrace.instance._textFieldWidth = newWidth;			LiveTrace.instance._textFieldHeight = newHeight;			LiveTrace.instance._area.width = newWidth + LiveTrace.border * 2;			LiveTrace.instance._area.height = newHeight + LiveTrace.topBarHeight + LiveTrace.border * 2;			LiveTrace._tf.width = newWidth;			LiveTrace._tf.height = newHeight;			LiveTrace._tf.y = LiveTrace.topBarHeight + LiveTrace.border;			LiveTrace.instance._hideButton.x = newWidth - LiveTrace.instance._hideButton.width + LiveTrace.border;		}		public function LiveTrace(pvt:PrivateClass):void		{			if (! pvt)			{				throw new IllegalOperationError("You may not instantiate this Singleton class directly. Use the static getter RuntimeAssets.instance");				return;			}			_textFieldWidth = DEFAULT_TEXTFIELD_WIDTH;			_textFieldHeight = DEFAULT_TEXTFIELD_HEIGHT;			_setup();		}		public function destroy(e:Event=null):void		{			trace('destroy LiveTrace');			_drop();			_area.buttonMode = false;			_area.removeEventListener(MouseEvent.MOUSE_DOWN,_areaInteract);			_clearButton.removeEventListener(MouseEvent.CLICK,_clearButtonInteract);			_clearButton.destroy();			_hideButton.removeEventListener(MouseEvent.CLICK,_hideButtonInteract);			_hideButton.destroy();			LiveTrace._tf.selectable = false;			removeEventListener(Event.REMOVED_FROM_STAGE,destroy);		}		//private & protected methods		private function _setup():void		{			_area = new SquareArea(int((_textFieldWidth + (border * 2))),int(((_textFieldHeight + topBarHeight) + (border * 2))),DEFAULT_SQUARE_FILL);			_area.alpha = DEFAULT_SQUARE_FILL_ALPHA;			_area.buttonMode = true;			_tf = new DynamicTextField(_textFieldWidth,_textFieldHeight,null,TextFieldAutoSize.NONE);			_tf.x = border;			_tf.y = topBarHeight + border;			_tf.selectable = true;			_tf.background = true;			_tf.backgroundColor = 0xffffff;			//clear button setup			var clearButtonTextField:DynamicTextField = new DynamicTextField((_textFieldWidth / 4),0);			clearButtonTextField.text = 'clear';			clearButtonTextField.background = true;			clearButtonTextField.backgroundColor = 0xff0000;			_clearButton = new BasicButton(true);			_clearButton.addChild(clearButtonTextField);			_clearButton.x = border;			_clearButton.y = border * 2;			_clearButton.addEventListener(MouseEvent.CLICK,_clearButtonInteract);			//hide button setup;			_hideButtonTextField = new DynamicTextField((_textFieldWidth / 4),0);			_hideButtonTextField.text = 'hide';			_hideButtonTextField.background = true;			_hideButtonTextField.backgroundColor = 0xff0000;			_hideButton = new ToggleButton(false,true);			_hideButton.addChild(_hideButtonTextField);			_hideButton.x = _textFieldWidth - _hideButton.width + border;			_hideButton.y = border * 2;			_hideButton.addEventListener(ToggleButtonEvent.UPDATE,_hideButtonInteract);			addChild(_area);			addChild(_clearButton);			addChild(_hideButton);			addChild(_tf);			_drop();			addEventListener(Event.REMOVED_FROM_STAGE,destroy);		}		private function _clearButtonInteract(e:MouseEvent=null):void		{			_tf.text = "";		}		private function _hideButtonInteract(e:ToggleButtonEvent):void		{			var visibleHeight:int = _textFieldHeight + topBarHeight + (border * 2);			if (e.isOn)			{				visibleHeight = topBarHeight + border;				_hideButtonTextField.text = 'show';				LiveTrace._tf.height = 0;			}			else			{				_hideButtonTextField.text = 'hide';				LiveTrace._tf.height = _textFieldHeight;			}			_area.height = visibleHeight;		}		private function _areaInteract(e:MouseEvent):void		{			switch (e.type)			{				case MouseEvent.MOUSE_DOWN :					_drag();					break;				case MouseEvent.MOUSE_UP :					_drop();					break;			}		}		private function _drag():void		{			_area.removeEventListener(MouseEvent.MOUSE_DOWN,_areaInteract);			this.startDrag(false);			_area.addEventListener(MouseEvent.MOUSE_UP,_areaInteract);			if (_area.stage != null)			{				_area.stage.addEventListener(MouseEvent.MOUSE_UP,_areaInteract);			}		}		private function _drop():void		{			_area.removeEventListener(MouseEvent.MOUSE_UP,_areaInteract);			if (_area.stage != null)			{				_area.stage.removeEventListener(MouseEvent.MOUSE_UP,_areaInteract);			}			this.stopDrag();			_area.addEventListener(MouseEvent.MOUSE_DOWN,_areaInteract);		}	}}//Singleton Enforcerclass PrivateClass { }
/*use class whenever you need to validate datavalidation functions such as 		isEmail()	isZipCode()		that checks assure data is properly formatedsee usage:author		:	David Canesocontact		:	code@davidcaneso.comversion		:	1.0date		:	05/01/09change log	:	v_1.0	-	first build																									usage		: 	import com.dmc.utils.DataValidator								var validator:DataValidator								validator.isEmail('email@address.com')		\\returns true				validator.isZipCode('value')				\\returns false				validator.isZipCode(90034)					\\returns true																								TODO		:	add international address validation*/package com.davidcaneso.utils{					public class DataValidator	{			//	properties		public static var MONTH_NAMES:Array 			=	[	"january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"	];		public static var MONTH_ABBREVIATIONS:Array 	=	[	"jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sept", "oct", "nov", "dec"	];		public static var DAYS_IN_MONTH:Array 			=	[	31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31	];		public static var MINIMUM_YEAR:int				=	1900;										//	constructor		public function DataValidator():void		{			//send me data and i will validate for you		}														//	methods		public static function isEmail(val:String):Boolean		{			//			trace("check if "+val+" is an valid email address");			var atIndex:int		= val.indexOf("@");			var dotIndex:int	= val.lastIndexOf(".");						if ( atIndex < 0 || dotIndex < 0 ) 	return false;			if ( atIndex > dotIndex ) 			return false;			if ( atIndex < 1 ) 					return false;			if ( dotIndex - atIndex < 1 ) 		return false;			if ( val.length - dotIndex <= 1 ) 	return false;							//	email is valid			//trace(val+" is a valid email address")			return true;		}										public static function isZipCode(val:String):Boolean		{			var digit:Number;						//trace("check if "+val+" is an valid zip code")						if ( val.length != 5 ) 				return false;			for(var i:Number = 0; i < val.length; i++)			{				digit = Number(val.substr(i, 1));				if(isNaN(digit)) 				return false;			}						//	zip code is valid			//	trace(val+" is a valid zip code")			return true;		}				public static function isValidMonthName(val:String):Boolean		{			var validate:String = val.toLowerCase();						for(var i:int = 0; i < MONTH_NAMES.length; i++){				//	trace('validate != '+MONTH_NAMES[i])								if(validate == MONTH_NAMES[i]){					return true;				}			}						return false;		}				public static function isValidMonthAbbreviation(val:String):Boolean		{			var validate:String = val.toLowerCase();						if(validate.substr(validate.length - 1, 1) == '.')			{				validate = validate.substr(0, validate.length - 1);			}						if(validate.length > 3 && validate != 'sept')	return false;						for(var i:int = 0; i < MONTH_ABBREVIATIONS.length; i++)			{				//trace('validate != '+MONTH_ABBREVIATIONS[i]);								if(validate == MONTH_ABBREVIATIONS[i])	return true;			}						return false;		}				public static function findMonthNameNumber(val:String):Number		{			var validate:String = val.toLowerCase();						for(var i:int = 0; i < MONTH_NAMES.length; i++)			{				//trace('validate != '+MONTH_NAMES[i]);								if(validate == MONTH_NAMES[i]) return i;			}						return NaN;		}				public static function findMonthAbbreviationNumber(val:String):Number		{			var validate:String = val.toLowerCase();									if(validate.substr(validate.length - 1, 1) == '.')			{				validate = validate.substr(0, validate.length - 1);			}						for(var i:int = 0; i < MONTH_ABBREVIATIONS.length; i++)			{				//trace('validate != '+MONTH_ABBREVIATIONS[i])								if(validate == MONTH_ABBREVIATIONS[i])	return i;			}						return NaN;		}										public static function isValidDate(month:Number, day:Number, year:Number):Boolean		{			if(!isValidMonth(month))			return false;			if(!isValidYear(year))				return false;			if(!isValidDay( month, day, year ))	return false;						return true;		}				public static function isValidMonth(val:Number):Boolean		{			if(isNaN(val))	return false;			if(val < 1)		return false;			if(val > 12)	return false;						return true;		}				public static function isValidDay(month:Number, day:Number, year:Number = NaN):Boolean		{			var daysInMonth:Array = DAYS_IN_MONTH;			if(!isNaN(year))			{				if(isLeapYear(year)) daysInMonth[1] = 29;			}						var maxDays:Number = daysInMonth[month - 1];						if(isNaN(day))			return false;			if(day < 1)				return false;			if(day > maxDays)		return false;						return true;		}				public static function isValidYear(year:Number, allowFuture:Boolean = true):Boolean		{			var today:Date = new Date();			var thisYear:Number = today.getFullYear();						if(isNaN(year))						return false;			if(year.toString().length < 4)		return false;			if(year < MINIMUM_YEAR)				return false;			if(!allowFuture)			{				if(year > thisYear)				return false;			}						return true;		}				public static function isLeapYear(year:int):Boolean // tests to see feb has 29 days due to leap year		{			var returnValue:Boolean = false;			var test:Number	= year/4;			var validate:Number	= Math.round(test);						if(test == validate)			{				trace('29 days in feb in the year '+year);				//DAYS_IN_MONTH[1] = 29				returnValue = true;			}						return returnValue;		}		public static function stringIsDefined(val:String):Boolean		{			var stringToValidate:String = StringUtils.removeSpaces(val);			return (stringToValidate.length > 1);		}							}			}
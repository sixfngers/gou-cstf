package com.davidcaneso.utils{		public class DateCalculator	{		//	properties		private var _monthOfRelease			:int;		private var _dateOfRelease			:int;		private var _yearOfRelease			:int;		private var _releaseState			:String;		private var _dataValidator			:DataValidator;		private var _daysInMonth			:Array;		//	states		private static const PAST:String 		=	'past';		private static const IN_RANGE:String	=	'inRange';		private static const TODAY:String 		=	'today';		private static const FUTURE:String		=	'future';										//	constructor		public function DateCalculator(month:int, day:int, year:int, ticketRange:int)		{			_monthOfRelease = month;			_dateOfRelease 	= day;			_yearOfRelease 	= year;						_dataValidator = new DataValidator();			_daysInMonth = _dataValidator.DAYS_IN_MONTH;			if(_dataValidator.isLeapYear(_yearOfRelease)) _daysInMonth[1] = 29;						var timeLeftTillRelease:Number = daysUntilRelease();			trace('releaseDate = '+_monthOfRelease+'/'+_dateOfRelease+'/'+_yearOfRelease+' and '+timeLeftTillRelease+' days until release & ticketRange  = '+ticketRange);									if(timeLeftTillRelease > ticketRange)			{				_releaseState = FUTURE;			}else if(timeLeftTillRelease <= ticketRange && timeLeftTillRelease > 0){				_releaseState = IN_RANGE;			}else if (timeLeftTillRelease == 0){				_releaseState = TODAY;			}else if (timeLeftTillRelease < 0){				_releaseState = PAST;			}						trace("_releaseState = "+_releaseState);		}				public function daysUntilRelease():Number		{			var releaseDate:Date = new Date( _yearOfRelease, _monthOfRelease - 1, _dateOfRelease);			var rd:Number = releaseDate.getTime();		//	convert releaseDate to milliseconds			var local:Date = new Date();			var currentDate:Date = new Date( local.getFullYear(), local.getMonth(), local.getDate() );			var cd:Number = currentDate.getTime();		//	convert cd to milliseconds						//	trace("releaseDate = "+releaseDate.toString())			//	trace("currentDate = "+currentDate.toString())			//	trace("time difference = "+(rd - cd))			//	trace("seconds difference = "+(rd - cd)/1000)			//	trace("minutes differnce = "+((rd - cd)/1000)/60)			//	trace("hours differnce = "+(((rd - cd)/1000)/60)/60)			//	trace("days differnce = "+((((rd - cd)/1000)/60)/60)/24)						var timeLeftTillRelease:Number = Number( ((((rd - cd)/1000)/60)/60)/24 );			return timeLeftTillRelease;		}				public function daysBetween(month0:int, day0:int, year0:int, month1:int, day1:int, year1:int):Number		{			var returnValue:Number = NaN;			if(_dataValidator.isValidDate(month0, day0, year0) && _dataValidator.isValidDate(month1, day1, year1))			{				var date0:Date = new Date(year0, month0 - 1, day0);				var date1:Date = new Date(year1, month1 - 1, day1);							var rd:Number = date0.getTime();		//	convert date0 to milliseconds				var cd:Number = date1.getTime();		//	convert date1 to milliseconds								returnValue = Number( ((((rd - cd)/1000)/60)/60)/24 );			}						return returnValue;		}				public function leadingZero(num:Number):String		{			var returnString:String;						if (num < 10){				returnString = "0" + num.toString();			}else{				returnString = num.toString();			}						return returnString;		}				public function twoDigitYear(num:Number):String		{			var returnVal:String;			var local:Date = new Date();			var localYear:Number = local.getFullYear();			var thousandsOfYears:Number =  Number(String(localYear).substr(0, 1))*1000;						if (num > thousandsOfYears){				returnVal = leadingZero(num - thousandsOfYears);			}						return returnVal;		}				public function get monthOfRelease ():int		{			return _monthOfRelease;		}				public function get dateOfRelease():int		{			return _dateOfRelease;		}				public function get yearOfRelease():int		{			return _yearOfRelease;		}				public function get releaseState():String		{			return _releaseState;		}			}	}
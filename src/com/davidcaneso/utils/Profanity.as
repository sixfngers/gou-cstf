package com.davidcaneso.utils{		public class Profanity	{		private static const MISC		:Array = ['.com'];		private static const NUMBERS	:Array = ['69'];		private static const A			:Array = ['anal', 'analsex', 'arse', 'ass', 'a55', 'aunt flo'];		private static const B			:Array = ['bastard', 'beastial', 'beat off', 'beat your meat', 'beatingoff', 'beatoff', 'beat-off', 'beatyourmeat', 'beaver', 'bestial', 'bfe', 'biatch', 'bigdick', 'bisexual', 'bi-sexual', 'bitch', 'blackie', 'blackies', 'bl0wjob', 'bloj0b', 'blow job', 'blowj0b', 'blowjob', 'blowme', 'boff', 'boink', 'boinking', 'boinks', 'bondage', 'boner', 'boners', 'boob', 'boobies', 'boobs', 'booty', 'boyonboy', 'boysonboys', 'breast', 'brothel', 'bull', 'bumblefuck', 'bumfuck', 'bunghole', 'bushpig', 'butch', 'butt', 'butthole'];		private static const C			:Array = ['c0ck', 'camel toe', 'cameltoe', 'carpet muncher', 'carpetmuncher', 'castrate', 'castrates', 'castration', 'chick2chick', 'chickonchick', 'chicks2chicks', 'chicksonchicks', 'chink', 'chinks', 'choad', 'chode', 'clit', 'cock', 'comestain', 'condom', 'condoms', 'coon', 'copulate', 'copulating', 'copulation', 'cornhole', 'crap', 'crotch', 'cum', 'cunnilingus', 'cunt'];		private static const D			:Array = ['d.d.', 'd-up', 'darkie', 'darkies', 'darky', 'defecate', 'defecating', 'defecation', 'dickhead', 'dickring', 'dicks', 'dicksucker', 'dicksuckers', 'dicksucking', 'dicksucks', 'dickweed', 'dike', 'dildo', 'dogshit', 'domination', 'dominatrix', 'dook', 'dork', 'douche', 'dyke'];		private static const E			:Array = ['ejaculate', 'ejaculation', 'enema', 'enima', 'enimas', 'erection', 'erotic', 'eroticism'];		private static const F			:Array = ['fag', 'fck', 'felch', 'fellatio', 'feltch', 'fisting', 'flog', 'flogging', 'flogs', 'foreskin', 'fornicate', 'fornicating', 'fornication', 'forked', 'frigging', 'frottage', 'fubar', 'fuck', 'fukc', 'fudgepack', 'fuq'];		private static const G			:Array = ['gangbang', 'gay', 'genital', 'gerbiling', 'girlongirl', 'girlsongirls', 'goddammit', 'goddamn', 'gook', 'gubb', 'guppy', 'guyonguy', 'guysonguys', 'gyfs'];		private static const H			:Array = ['hairpie', 'hairpies', 'hardon', 'hardons', 'ho', 'hoe', 'hoebag', 'homo', 'honkey', 'honkie', 'honkies', 'hoochie', 'hooker', 'hookers', 'hornie', 'horny', 'horseshit', 'hosebeast', 'hump'];		private static const I			:Array = [];		private static const J			:Array = ['jackoff', 'jap', 'jerkoff', 'jew', 'jewboy', 'jism', 'jizm', 'jizz'];		private static const K			:Array = ['kike', 'kikes', 'kinky', 'kkk', 'knockers', 'koolie'];		private static const L			:Array = ['lesbian', 'lesbo', 'lesbos', 'limpdick', 'lovehole'];		private static const M			:Array = ['mammaries', 'manonman', 'masochism', 'masochist', 'masterbate', 'masterbates', 'masterbating', 'masterbation', 'menonmen', 'milf', 'motherfuck', 'muff'];		private static const N			:Array = ['naked', 'nards', 'nazi', 'necrophile', 'necrophilia', 'nigga', 'niggas', 'nigger', 'niggers', 'nip', 'nookie', 'noshit', 'nude', 'nudes', 'nudity', 'nymph'];		private static const O			:Array = ['oral', 'orgasm', 'orgi', 'orgiastic', 'orgies', 'orgy'];		private static const P			:Array = ['panties', 'panty', 'pecker', 'pedophile', 'pedophilia', 'pen15', 'penii', 'penis', 'penises', 'phile', 'philes', 'philia', 'phuck', 'phuk', 'phuq', 'piss', 'poke', 'poon', 'poopchute', 'porking', 'porks', 'porn', 'poot', 'prostitot', 'pube', 'pubes', 'pubic', 'pud', 'punanni', 'punanny', 'puntang', 'pussi', 'pussies', 'pussy'];		private static const Q			:Array = ['queer', 'queers', 'quim'];		private static const R			:Array = ['racial', 'racism', 'racist', 'racists', 'rape', 'raping', 'rapist', 'redtide', 'ricockulous', 'rimjob', 'rimjobs', 'rubbers', 'rumpranger', 'rumprider', 'rumps'];		private static const S			:Array = ['sadism', 'sadist', 'sadomasochism', 'sapphic', 'sappho', 'sapphos', 'satan', 'scatological', 'scheiss', 'schlong', 'schtup', 'screw', 'scrog', 'semen', 'sex', 'shit', 'shiznits', 'sixtynine', 'sixtynining', 'sketell', 'sko', 'skrew', 'skrewing', 'skrews', 'slanteyes', 'slattern', 'slave', 'slopehead', 'slut', 'smut', 'snatch', 'soddom', 'sodom', 'sonnofabitch', 'sonnovabitch', 'sonnuvabitch', 'sonofabitch', 'spank', 'sperm', 'spermicidal', 'spermjuice', 'sphincter', 'spic', 'spick', 'spik', 'spooge', 'stiffie', 'stiffy', 'swinger'];		private static const T			:Array = ['tar baby', 'teenonteen', 'teensonteens', 'testes', 'testical', 'testicle', 'tit', 'transexual', 'transvestite', 'twat'];		private static const U			:Array = ['umfriend', 'urinate', 'urinating', 'urination'];		private static const V			:Array = ['vagina', 'vibrator', 'virgin', 'voyeur'];		private static const W			:Array = ['wank', 'wetback', 'whip', 'whiz', 'whore', 'whoring', 'womanonwoman', 'womenonwomen'];		private static const X			:Array = [];		private static const Y			:Array = ['yak'];		private static const Z			:Array = ['zipperhead', 'zipperheads'];				// constructor code		public function Profanity()		{		}		public static function isProfane(word:String):Boolean		{			var censor:Boolean = false;			var wordToCheck:String = stripInitialBlanks(word).toLowerCase();			//trace('check if '+wordToCheck+' is profane')			var filter:Array = Profanity.filteredList(word);			//trace('check list '+filter)			var iLimit:int = filter.length;			for (var i:int = 0; i < iLimit; i++)			{				//trace(wordToCheck+' = '+filter[i])				if ((wordToCheck === filter[i]))				{					//trace('cannot use that language with me')					censor = true;					break;				}			}			return censor;		}		public static function stripInitialBlanks(word:String):String		{			var newString:String = '';			var iLimit:int = word.length;			var firstIndexOfLetters:int = 0;			var currentLetter:String;			for (var i:int = 0; i < iLimit; i++)			{				currentLetter = word.substr(i,1);				if ((currentLetter != ' '))				{					newString +=  currentLetter;					break;				}			}			firstIndexOfLetters = i;			newString = word.substr(firstIndexOfLetters,iLimit - firstIndexOfLetters);			return newString;		}		public static function stripAllBlanks(word:String):String		{			var newString:String = '';			var iLimit:int = word.length;			var currentLetter:String;			for (var i:int = 0; i < iLimit; i++)			{				currentLetter = word.substr(i,1);				if ((currentLetter != ' '))				{					newString +=  currentLetter;				}			}			return newString;		}		public static function filteredList(word:String):Array		{			var listToCheck:Array = Profanity.MISC;			var iLimit:int = word.length;			var currentLetter:String;			for (var i:int = 0; i < iLimit; i++)			{				currentLetter = word.substr(i,1);				if ((currentLetter != ' '))				{					break;				}			}			var numberExp:RegExp = /[0-9]/;			var letterExp:RegExp = /[a-z]/;			//check if letter is 0 - 9			//trace('is number: '+numberExp.exec(filter))			if (numberExp.exec(currentLetter) != null)			{				listToCheck = Profanity.NUMBERS;			}						//check if letter is A - Z			//trace('is letter: '+letterExp.exec(filter))			if (letterExp.exec(currentLetter) != null)			{				listToCheck = Profanity[currentLetter.toUpperCase()];			}						return listToCheck;		}	}}
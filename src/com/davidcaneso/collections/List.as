package com.davidcaneso.collections{	/*	TODO	this is now a dictionary with less functionality	this class should probably extend dictionary	or the framework should use a dictionary and this class can be deleted.	*/		public class List extends Object	{		//	properties		private var _names:Array;		private var _values:Array;						//	constructor		public function List()		{			_names = new Array();			_values = new Array();		}				//	methods		public function addToList(name:String, value:Object):Boolean		{			//trace("add to list "+name+" with value "+value)			var test:Object = findInList(name);			var success:Boolean = false;						if(test == null)			{				_names.push(name);				_values.push(value);				success = true;			}						return success;		}				public function removeFromList(name:String):Object		{			var returnObject:Object = new Object();			var removedName:Object;			var removedValue:Object;			var position:int = findPositionInList(name);						if(position >= 0)			{				removedName	= _names.splice(position, 1);				removedValue = _values.splice(position, 1);								returnObject[0] = removedName[0];				returnObject[1] = removedValue;			}						return returnObject;		}				public function findInList(name:String):Object		{			var returnVal:Object = null;			var list:Array = _names;						for(var i:Number = 0; i < list.length; i++)			{				if(name == list[i])				{					returnVal = _values[i];					break;				}			}						return returnVal;		}				public function findPositionInList(name:String):int		{			var returnVal:int = -1;			var list:Array = _names;						for(var i:int = 0; i < list.length; i++)			{				if(name == list[i])				{					returnVal = i;					break;				}			}						return returnVal;		}				public function displayListString(delimiter:String = '|'):String		{			var returnValue:String	= '';			var listNames:Array		= _names;			var listValues:Array	= _values;			var limit:int = listNames.length;						for(var i:int = 0; i < limit; i++)			{				returnValue += listNames[i]+','+ listValues[i]+delimiter;			}						return returnValue;		}				public function displayListObject():Object		{			var returnValue:Array		= new Array();			var listNames:Array		= _names;			var listValues:Array	= _values;			var singleValue:Array 	= new Array();						for(var i:int = 0; i < listNames.length; i++)			{								singleValue[0] = listNames[i];				singleValue[1] = listValues[i];								returnValue.push(singleValue);				singleValue = new Array();			}						return returnValue as Object;		}				public function clearList():void		{			_names	= new Array();			_values = new Array();		}				//	getters and setters		public function get names():Array		{			return _names;		}				public function get values():Array		{			return _values;		}			}	}
package com.davidcaneso.text{	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.AntiAliasType;	import flash.text.GridFitType;	import com.davidcaneso.singletons.Styling;	public class DynamicTextField extends TextField	{		public function DynamicTextField(fieldWidth:int,fieldHeight:int,textFormatName: * =null,sizing:String=TextFieldAutoSize.LEFT):void		{			defaultTextFormat = _validateFormat(textFormatName);			mouseWheelEnabled = false;			selectable = false;			autoSize = sizing;			if (fieldWidth > 0)			{				multiline = true;				wordWrap = true;				width = fieldWidth;				height = fieldHeight;			}			else			{				width = 0;				height = 0;			}		}		public function changeAntiAlias(type:String=AntiAliasType.ADVANCED,sharpness:int=0,thickness:int=0,gridFitType:String=GridFitType.NONE):void		{			this.antiAliasType = type;			if ((type == AntiAliasType.ADVANCED))			{				this.sharpness = sharpness;				this.thickness = thickness;				this.gridFitType = gridFitType;			}		}		public function applyFormat(textFormatName: * ,startCharIndex:int=-1,endCharIndex:int=-1):void		{			var fmt:TextFormat = _validateFormat(textFormatName);			this.setTextFormat(fmt,startCharIndex,endCharIndex);		}		private function _validateFormat(format: * ):TextFormat		{			var returnFormat:TextFormat = new TextFormat  ;			if ((format == null))			{				returnFormat = new TextFormat();			}			else			{				if ((format is TextFormat))				{					returnFormat = format;				}				else				{					returnFormat = Styling.instance.findFormat(format);				}			}			embedFonts = true;			//if(returnFormat.font == null && returnFormat.size == null) embedFonts = false;			if (returnFormat.font == null)			{				embedFonts = false;			}			if (Styling.instance.useDeviceFonts)			{				embedFonts = false;			}			return returnFormat;		}	}}
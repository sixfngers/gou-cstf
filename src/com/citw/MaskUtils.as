package com.citw {		import flash.display.MovieClip;	import com.greensock.*;	import com.greensock.easing.*;	import flash.display.Shape;		public class MaskUtils {		public function MaskUtils() {			// constructor code		}				public static function maskIn(target, rect, o=null) {						var obj = o==null?{}:o;						if(!obj.hasOwnProperty("speedRatio")) {				obj.speedRatio = 1;			}						if(!obj.hasOwnProperty("cmd")) {				obj.cmd = true;			}						var cursorY = 0;			var container = new MovieClip();			var tintContainer = new MovieClip();						var startScale;			var targetScale;			if(obj.cmd) {				startScale = 0;				targetScale = 1;			}else {				startScale = 1;				targetScale = 0;			}						while(cursorY<target.height) {				var jump = Math.random()*(rect.height*0.25);								var speed = (0.25+Math.random()*0.5)*obj.speedRatio;				var d = Math.random()*0.5*obj.speedRatio;								if(cursorY+jump>target.height) {					jump -= (cursorY+jump)-target.height;				}								for(var i=0; i<2; i++) {					var strip = new MovieClip();					strip.graphics.beginFill(0);					strip.graphics.moveTo(0, cursorY);					strip.graphics.lineTo(rect.width, cursorY);					strip.graphics.lineTo(rect.width, cursorY+jump);					strip.graphics.lineTo(0, cursorY+jump);					strip.graphics.endFill();										if(i == 0) {						container.addChild(strip);						strip.scaleX = startScale;						strip.alpha = startScale;						TweenMax.to(strip, 0.25*obj.speedRatio, {alpha:targetScale, ease:Quad.easeInOut, delay:d});						TweenMax.to(strip, speed, {scaleX:targetScale, ease:Linear.easeNone, delay:d});					}else {						tintContainer.addChild(strip);						TweenMax.to(strip, 0, {tint:obj.hasOwnProperty("tint")?obj.tint:0xFFFFFF});						TweenMax.delayedCall(Math.random()*obj.speedRatio, hideObject, [strip]);						//TweenMax.to(strip, speed*0.5, {alpha:0, ease:Linear.easeNone, delay:d});					}				}								cursorY += jump;			}						target.cacheAsBitmap = container.cacheAsBitmap = true;			target.addChild(container);			target.mask = container;						target.addChild(tintContainer);			//tintContainer.x = target.x;			//tintContainer.y = target.y;			if(!obj.hasOwnProperty("tint")) {				tintContainer.blendMode = "invert";			}						TweenMax.delayedCall(2.75, function() {target.mask = null, target.removeChild(container), target.removeChild(tintContainer);});		}				public static function hideObject(target) {			target.visible = false;		}				public static function maskInWithLines(target, rect, i=1, d=0.5) {			var inc = i;			var container = new MovieClip();			var c = 0;			for(var i=0; i<rect.height; i+=inc) {				var shape = new Shape();				shape.graphics.beginFill(0);				shape.graphics.moveTo(0, i);				shape.graphics.lineTo(rect.width, i);				shape.graphics.lineTo(rect.width, i+inc);				shape.graphics.lineTo(0, i+inc);				shape.graphics.endFill();				container.addChild(shape);								//shape.alpha = 0;				shape.scaleX = 0;				TweenMax.to(shape, Math.random()*0.25, {scaleX:1, delay:c*0.0125+(i%2==0?d:0), ease:Linear.easeNone});				c++;			}						container.cacheAsBitmap = target.cacheAsBitmap = true;			target.addChild(container);			target.mask = container;						TweenMax.delayedCall(c*0.0125+0.25, function() {target.removeChild(container), target.mask = null, target.cacheAsBitmap = false;});					}	}	}
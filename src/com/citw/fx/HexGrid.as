package com.citw.fx {	import flash.display.Shape;	import flash.geom.Point;	import flash.display.MovieClip;	import com.greensock.*;	import com.greensock.easing.*;	import flash.events.Event;		import com.citw.fx.PerlinMask;		import com.greensock.plugins.*;		TweenPlugin.activate([GlowFilterPlugin]);	public class HexGrid extends MovieClip {		public static function initHexGrid(target) {			var container = new MovieClip();			target.addChild(container);						var h0 = new HexGrid();			container.addChild(h0);			var h1 = new HexGrid(3, 4);			container.addChild(h1);			var dif = (target.stage.stageWidth-1600)*0.5;			h0.x = 0-dif;			h1.x = 1600+dif-h1.width*0.5;		}		public function HexGrid(w=4, h=2) {			// constructor code			container = new MovieClip();			addChild(container);						container.alpha = 0;			TweenMax.to(container, .25, {alpha:1, ease:Quint.easeOut});						TweenMax.to(container, 0, {glowFilter:{color:0xda6f15, alpha:1, blurX:10, blurY:10, strength:7}});			TweenMax.to(container, 0, {blurFilter:{blurX:1.5, blurY:1.5}});						grid = drawGrid(w, h, 50);			container.addChild(grid);						pm = new PerlinMask(grid);			container.addChild(pm);						addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);		}				var container;		var grid;		var pm;				function removedFromStageHandler(e=null) {			//			trace("removedFromStageHandler: HexGrid");						removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);						removeChild(container);		}				function drawGrid(w, h, a) {			var amp = a;			var spacing = new Point(3*(amp*Math.cos(conv(60))), (amp*Math.cos(conv(30))));			spacing.x = Math.round(spacing.x);			spacing.y = Math.round(spacing.y);						//visual hack			spacing.y += 0;						var grid = new MovieClip();						for(var y=0; y<h; y++) {				for(var x=0; x<w; x++) {					var hex = drawHex(amp);										if(Math.floor(Math.random()*3)==0) {						hex.visible = false;					}										hex.x = x*spacing.x;					hex.y = (x%2==0?spacing.y:0)+(y*(spacing.y*2));								grid.addChild(hex);				}			}						return grid;		}				function drawHex(amp) {			var angle = 0;			var hex = new Shape();			hex.graphics.lineStyle(1, 0xFFFFFF);						var point;			var oldPoint;						for(var i=0; i<=6; i++) {				oldPoint = point;				point = new Point(Math.cos(conv(angle))*amp, Math.sin(conv(angle))*amp);								if(i>0 && 0) {					var difX = oldPoint.x-point.x;					var difY = oldPoint.y-point.y;					var distance = Math.sqrt(difX*difX+difY*difY);					trace("Distance: "+distance);				}								if(i == 0) {					hex.graphics.moveTo(point.x, point.y);				}else {					hex.graphics.lineTo(point.x, point.y);				}								angle += 60;			}						return hex;		}		function conv(angle) {			return angle*(Math.PI/180);		}	}	}